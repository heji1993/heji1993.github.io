<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>何机的技术博客</title>
  <subtitle>No pains,no gains</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://heji.website/"/>
  <updated>2017-03-31T06:16:00.179Z</updated>
  <id>http://heji.website/</id>
  
  <author>
    <name>何机</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>jQuery2.1.1源码解析七、get和eq的区别</title>
    <link href="http://heji.website/2017/03/31/jQuery2.1.1%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%B8%83%E3%80%81get%E5%92%8Ceq%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://heji.website/2017/03/31/jQuery2.1.1源码解析七、get和eq的区别/</id>
    <published>2017-03-31T06:15:21.801Z</published>
    <updated>2017-03-31T06:16:00.179Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>get方法和eq方法的区别：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">.eq()  减少匹配元素的集合，根据index索引值，精确指定索引对象。</div><div class="line">.get() 通过检索匹配jQuery对象得到对应的DOM元素。</div></pre></td></tr></table></figure>
</li>
</ul>
<p>上两节我们看过了get方法的源码，这次，我们来看看eq方法的源码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">eq: <span class="function"><span class="keyword">function</span>(<span class="params"> i </span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> len = <span class="keyword">this</span>.length,</div><div class="line">			j = +i + ( i &lt; <span class="number">0</span> ? len : <span class="number">0</span> );</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.pushStack( j &gt;= <span class="number">0</span> &amp;&amp; j &lt; len ? [ <span class="keyword">this</span>[j] ] : [] ); <span class="comment">//创建一个新的jQuery对象</span></div><div class="line">	&#125;</div><div class="line">...</div><div class="line">pushStack: <span class="function"><span class="keyword">function</span>(<span class="params"> elems </span>) </span>&#123;</div><div class="line">    <span class="comment">//新建一个jQuery对象然后用jQuery.merge语句把elems节点合并到新的jQuery对象上</span></div><div class="line">    <span class="keyword">var</span> ret = jQuery.merge( <span class="keyword">this</span>.constructor(), elems );</div><div class="line">    <span class="comment">//把执行find方法前的对象的引用赋给prevObject属性</span></div><div class="line">    ret.prevObject = <span class="keyword">this</span>;</div><div class="line">    ret.context = <span class="keyword">this</span>.context;</div><div class="line">    <span class="comment">// 放回新创建的jQuery对象</span></div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>jQuery的考虑很周到，通过eq方法只能产生一个新的对象，但是如果需要的是一个合集对象要怎么处理？因此jQuery便提供了一个slice方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">slice: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.pushStack( slice.apply( <span class="keyword">this</span>, <span class="built_in">arguments</span> ) ); <span class="comment">//slice.apply( this, arguments )把this指向的jQuery集合分割，然后再调用pushStack方法返回分割后的新的jQuery集合</span></div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Ps:pushStack方法其实就是对jQuery集合进行包装，供jQuery回溯使用</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;get方法和eq方法的区别：&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;
    
    </summary>
    
      <category term="jQuery" scheme="http://heji.website/categories/jQuery/"/>
    
    
      <category term="web前端" scheme="http://heji.website/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://heji.website/tags/JavaScript/"/>
    
      <category term="jQuery" scheme="http://heji.website/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>jQuery2.1.1源码解析六、仿栈与队列的操作</title>
    <link href="http://heji.website/2017/03/31/jQuery2.1.1%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E5%85%AD%E3%80%81%E4%BB%BF%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97%E7%9A%84%E6%93%8D%E4%BD%9C/"/>
    <id>http://heji.website/2017/03/31/jQuery2.1.1源码解析六、仿栈与队列的操作/</id>
    <published>2017-03-31T06:13:29.391Z</published>
    <updated>2017-03-31T06:15:10.997Z</updated>
    
    <content type="html"><![CDATA[<p>jQuery既然是模仿的数组结构，那么肯定会实现一套类数组的处理方法，比如常见的栈与队列操作push、pop、shift、unshift、求和、遍历循环each、排序及筛选等一系的扩展方法。<br>jQuery提供了.get()、:index()、 :lt()、:gt()、:even()及 :odd()这类索引值相关的选择器，他们的作用可以过滤他们前面的匹配表达式的集合元素:<br>我们看一下下面几个选择器的原理：<br>get方法–是通过检索匹配jQuery对象得到对应的DOM元素，如下代码实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [];</div><div class="line"><span class="keyword">var</span> slice = arr.slice;</div><div class="line">...</div><div class="line">get: <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> num != <span class="literal">null</span> ?</div><div class="line">    <span class="comment">// Return just the one element from the set</span></div><div class="line">    (num &lt; <span class="number">0</span> ? <span class="keyword">this</span>[num + <span class="keyword">this</span>.length] : <span class="keyword">this</span>[num]) :</div><div class="line">    <span class="comment">// Return all the elements in a clean array</span></div><div class="line">    slice.call(<span class="keyword">this</span>); <span class="comment">//slice指向的是Array对象的slice属性。这行代码的详细理解请查看另一篇笔记`Array.prototype.slice.call(arguments)的理解`</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>原理很简单，因为jQuery查询出来的是一个数组的DOM集合，所以就可以按照数组的方法通过下标的索引取值，当然如果num的值超出范围，比如小于元素数量的负数或等于或大于元素的数量的数，那么它将返回undefined。当没有穿参数时，返回jQuery对象数组。<br>由于是数组的关系，所以我们有几个快速方法，比如头跟尾的取值：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">first: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.eq( <span class="number">0</span> );</div><div class="line">&#125;,</div><div class="line">last: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.eq(<span class="number">-1</span>);</div><div class="line">&#125;,</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;jQuery既然是模仿的数组结构，那么肯定会实现一套类数组的处理方法，比如常见的栈与队列操作push、pop、shift、unshift、求和、遍历循环each、排序及筛选等一系的扩展方法。&lt;br&gt;jQuery提供了.get()、:index()、 :lt()、:gt()、
    
    </summary>
    
      <category term="jQuery" scheme="http://heji.website/categories/jQuery/"/>
    
    
      <category term="web前端" scheme="http://heji.website/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://heji.website/tags/JavaScript/"/>
    
      <category term="jQuery" scheme="http://heji.website/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>jQuery2.1.1源码解析五、回溯处理的设计</title>
    <link href="http://heji.website/2017/03/31/jQuery2.1.1%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%BA%94%E3%80%81%E5%9B%9E%E6%BA%AF%E5%A4%84%E7%90%86%E7%9A%84%E8%AE%BE%E8%AE%A1/"/>
    <id>http://heji.website/2017/03/31/jQuery2.1.1源码解析五、回溯处理的设计/</id>
    <published>2017-03-31T06:11:01.594Z</published>
    <updated>2017-03-31T06:13:17.167Z</updated>
    
    <content type="html"><![CDATA[<p>我们知道Query选择器最终都是通过DOM接口实现取值的, 但是通过jQuery处理后返回的不仅仅只有DOM对象，而是一个包装容器，下面是控制台打印的jQuery对象（使用了链式操作之后）。<br><img src="imgs/1489561386731_3.png" alt=""><br><strong>在jQuery对象中有个prevObject对象，这个是干嘛用的呢？</strong><br>如果你想知道prevObject是做什么的，咱们首先得先来了解一下jQuery对象栈，jQuery内部维护着一个jQuery对象栈。每个遍历方法都会找到一组新元素（一个jQuery对象），然后jQuery会把这组元素推入到栈中。<br>而每个jQuery对象都有三个属性：context、selector和prevObject，其中的prevObject属性就指向这个对象栈中的前一个对象，而通过这个属性可以回溯到最初的DOM元素集中。<br>jQuery为我们操作这个内部对象栈提供个非常有用的2个方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">.end()</div><div class="line">.addBack()</div></pre></td></tr></table></figure></p>
<p>总的来说：end方法就是回溯到上一个Dom合集,因此对于链式操作与优化，这个方法还是很有意义的。下面是jQuery的end方法的源码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">end: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">     <span class="keyword">return</span> <span class="keyword">this</span>.prevObject || <span class="keyword">this</span>.constructor(<span class="literal">null</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>prevObject在什么情况下会产生？</strong><br>在构建jQuery对象的时候，通过pushStack方法构建，如下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">jQuery.fn.extend(&#123;</div><div class="line">    find: <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>) </span>&#123;</div><div class="line">       <span class="keyword">var</span> i,</div><div class="line">			len = <span class="keyword">this</span>.length,</div><div class="line">			ret = [],</div><div class="line">			self = <span class="keyword">this</span>;</div><div class="line">		</div><div class="line">        <span class="keyword">if</span> ( <span class="keyword">typeof</span> selector !== <span class="string">"string"</span> ) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.pushStack( jQuery( selector ).filter(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">				<span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; len; i++ ) &#123;</div><div class="line">					<span class="keyword">if</span> ( jQuery.contains( self[ i ], <span class="keyword">this</span> ) ) &#123;</div><div class="line">						<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;) );</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; len; i++ ) &#123;</div><div class="line">			jQuery.find( selector, self[ i ], ret ); <span class="comment">//直接利用 Sizzle 接口，把结果注入到 ret 数组中去</span></div><div class="line">		&#125;</div><div class="line">        <span class="comment">// Needed because $( selector, context ) becomes $( context ).find( selector )</span></div><div class="line">        <span class="comment">//此处this指执行find前的jQuery对象</span></div><div class="line">        ret = <span class="keyword">this</span>.pushStack(len &gt; <span class="number">1</span> ? jQuery.unique(ret) : ret);</div><div class="line">        ret.selector = <span class="keyword">this</span>.selector ? <span class="keyword">this</span>.selector + <span class="string">" "</span> + selector : selector;</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接着我们看pushStack对象，作用就通过新的DOM元素去创建一个新的jQuery对象:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">pushStack: <span class="function"><span class="keyword">function</span>(<span class="params"> elems </span>) </span>&#123;</div><div class="line">    <span class="comment">//新建一个jQuery对象然后用jQuery.merge语句把elems节点合并到新的jQuery对象上</span></div><div class="line">    <span class="keyword">var</span> ret = jQuery.merge( <span class="keyword">this</span>.constructor(), elems );</div><div class="line"></div><div class="line">    <span class="comment">//把执行find方法前的对象的引用赋给prevObject属性</span></div><div class="line">    ret.prevObject = <span class="keyword">this</span>;</div><div class="line">    ret.context = <span class="keyword">this</span>.context;</div><div class="line"></div><div class="line">    <span class="comment">// 放回新创建的jQuery对象</span></div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>流程解析：<br>1、首先构建一个新的jQuery对象，因为constructor是指向构造器的，所以这里就等同于调用jQuery()方法了，返回了一个新的jQuery对象；<br>2、然后用jQuery.merge语句把elems节点合并到新的jQuery对象上；<br>3、最后给返回的新jQuery对象添加prevObject属性，我们看到prevObject其实还是当前jQuery的一个引用罢了，所以也就是为什么通过prevObject能取到上一个合集的原因了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们知道Query选择器最终都是通过DOM接口实现取值的, 但是通过jQuery处理后返回的不仅仅只有DOM对象，而是一个包装容器，下面是控制台打印的jQuery对象（使用了链式操作之后）。&lt;br&gt;&lt;img src=&quot;imgs/1489561386731_3.png&quot; al
    
    </summary>
    
      <category term="jQuery" scheme="http://heji.website/categories/jQuery/"/>
    
    
      <category term="web前端" scheme="http://heji.website/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://heji.website/tags/JavaScript/"/>
    
      <category term="jQuery" scheme="http://heji.website/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>jQuery2.1.1源码解析四、插件接口的设计</title>
    <link href="http://heji.website/2017/03/31/jQuery2.1.1%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E5%9B%9B%E3%80%81%E6%8F%92%E4%BB%B6%E6%8E%A5%E5%8F%A3%E7%9A%84%E8%AE%BE%E8%AE%A1/"/>
    <id>http://heji.website/2017/03/31/jQuery2.1.1源码解析四、插件接口的设计/</id>
    <published>2017-03-31T06:09:56.961Z</published>
    <updated>2017-03-31T06:10:37.135Z</updated>
    
    <content type="html"><![CDATA[<p>在javascript的世界中一共有四种上下文调用方式：方法调用模式、函数调用模式、构造器调用模式、apply调用模式。我要分别解释一下：<br>方法调用模式： 类似于foo.bar()，函数作为一个对象的方法出现，this指向foo。<br>函数调用模式：类似于bar(),函数单独出现，this指向window<br>构造器调用模式：类似于 var foo = new bar()，this指向new bar()返回的对象。<br>apply调用：类似于bar.apply(object)，this指向object</p>
<p><strong>关于apply方法的说明：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*定义一个人类*/</span>  </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;  </div><div class="line">    <span class="keyword">this</span>.name=name;  </div><div class="line">    <span class="keyword">this</span>.age=age;  </div><div class="line">&#125;  </div><div class="line"><span class="comment">/*定义一个学生类*/</span>  </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name,age,grade</span>)</span>&#123;  </div><div class="line">    Person.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>);  </div><div class="line">    <span class="keyword">this</span>.grade=grade;  </div><div class="line">&#125;  </div><div class="line"><span class="comment">//创建一个学生类  </span></div><div class="line"><span class="keyword">var</span> student=<span class="keyword">new</span> Student(<span class="string">"zhangsan"</span>,<span class="number">21</span>,<span class="string">"一年级"</span>);  </div><div class="line"><span class="comment">//测试  </span></div><div class="line">alert(<span class="string">"name:"</span>+student.name+<span class="string">"\n"</span>+<span class="string">"age:"</span>+student.age+<span class="string">"\n"</span>+<span class="string">"grade:"</span>+student.grade);  </div><div class="line"><span class="comment">//大家可以看到测试结果name:zhangsan age:21  grade:一年级  </span></div><div class="line"><span class="comment">//学生类里面我没有给name和age属性赋值啊,为什么又存在这两个属性的值呢,这个就是apply的神奇之处.</span></div></pre></td></tr></table></figure></p>
<p>分析: <code>Person.apply(this,arguments);</code><br>this:在创建对象在这个时候代表的是Student对象<br>arguments:是参数数组,也就是[“zhangsan”,”21”,”一年级”];<br>通俗一点讲就是:用student去执行Person这个类里面的内容,在Person这个类里面存在this.name等之类的语句,这样就将属性创建到了student对象里面。</p>
<p>jQuery插件的开发分为两种：<br>  ☑  一种是挂在jQuery命名空间下的全局函数，也可称为静态方法；<br>  ☑  另一种是jQuery对象级别的方法，即挂在jQuery原型下的方法，这样通过选择器获取的jQuery对象实例也能共享该方法。</p>
<p>提供的接口：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$.extend(target, [object1], [objectN]);</div></pre></td></tr></table></figure></p>
<p><strong>注意：该方法也可用来合并对象(其实扩展jQuery就是把内容合并到jQuery对象或者jQuery实例对象中去)</strong></p>
<p>下面是拟jQuery源码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $ = jQuery = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> jQuery.fn.init(selector);</div><div class="line">&#125;</div><div class="line">jQuery.fn = jQuery.prototype = &#123;</div><div class="line">    name: <span class="string">'heji'</span>,</div><div class="line">	init: <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>) </span>&#123;</div><div class="line">		<span class="keyword">this</span>.selector = selector;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">	&#125;,</div><div class="line">	<span class="keyword">constructor</span>: jQuery</div><div class="line">&#125;</div><div class="line">jQuery.fn.init.prototype = jQuery.fn</div><div class="line">jQuery.extend = jQuery.fn.extend = function() &#123;</div><div class="line">	<span class="keyword">var</span> options, src, copy,</div><div class="line">		target = <span class="built_in">arguments</span>[<span class="number">0</span>] || &#123;&#125;, <span class="comment">//target默认执行第一个对象或者空对象(合并对象)</span></div><div class="line">		i = <span class="number">1</span>,</div><div class="line">		length = <span class="built_in">arguments</span>.length;</div><div class="line">	<span class="comment">//只有一个参数，就是对jQuery自身的扩展处理，如果多个参数，表示合并对象</span></div><div class="line">	<span class="comment">//extend,fn.extend</span></div><div class="line">	<span class="keyword">if</span> (i === length) &#123;</div><div class="line">	    <span class="comment">//调用的上下文对象jQuery/或者实例,当使用jQuery.extend扩展时,this表示jQuery对象;当使用jQuery.fn.extend扩展时,实际上this表示jQuery对象原型</span></div><div class="line">		target = <span class="keyword">this</span>; </div><div class="line">		i--;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (; i &lt; length; i++) &#123;</div><div class="line">		<span class="comment">//从i开始取参数,不为空开始遍历</span></div><div class="line">		<span class="keyword">if</span> ((options = <span class="built_in">arguments</span>[i]) != <span class="literal">null</span>) &#123;</div><div class="line">			<span class="keyword">for</span> (name <span class="keyword">in</span> options) &#123;</div><div class="line">				copy = options[name];</div><div class="line">				<span class="comment">//拷贝属性到target.</span></div><div class="line">				target[name] = copy;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> target;</div><div class="line">&#125;</div><div class="line">jQuery.fn.extend(&#123;</div><div class="line">	setName: <span class="function"><span class="keyword">function</span>(<span class="params">myName</span>) </span>&#123;</div><div class="line">		<span class="keyword">this</span>.myName = myName</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">	&#125;,</div><div class="line">	getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		$(<span class="string">"#name"</span>).html(<span class="keyword">this</span>.myName)</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">	&#125;</div><div class="line">&#125;)</div><div class="line">$().setName(<span class="string">'何机'</span>).getName();</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在javascript的世界中一共有四种上下文调用方式：方法调用模式、函数调用模式、构造器调用模式、apply调用模式。我要分别解释一下：&lt;br&gt;方法调用模式： 类似于foo.bar()，函数作为一个对象的方法出现，this指向foo。&lt;br&gt;函数调用模式：类似于bar()
    
    </summary>
    
      <category term="jQuery" scheme="http://heji.website/categories/jQuery/"/>
    
    
      <category term="web前端" scheme="http://heji.website/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://heji.website/tags/JavaScript/"/>
    
      <category term="jQuery" scheme="http://heji.website/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>jQuery2.1.1源码解析三、方法链式调用的实现</title>
    <link href="http://heji.website/2017/03/31/jQuery2.1.1%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%B8%89%E3%80%81%E6%96%B9%E6%B3%95%E9%93%BE%E5%BC%8F%E8%B0%83%E7%94%A8%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://heji.website/2017/03/31/jQuery2.1.1源码解析三、方法链式调用的实现/</id>
    <published>2017-03-31T06:08:56.029Z</published>
    <updated>2017-03-31T06:09:32.395Z</updated>
    
    <content type="html"><![CDATA[<p>我们先来看看使用jQuery的一段链式代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'input[type="button"]'</span>)</div><div class="line">    .eq(<span class="number">0</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        alert(<span class="string">'点击我!'</span>);</div><div class="line">&#125;).end().eq(<span class="number">1</span>)</div><div class="line">.click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $(<span class="string">'input[type="button"]:eq(0)'</span>).trigger(<span class="string">'click'</span>);</div><div class="line">&#125;).end().eq(<span class="number">2</span>)</div><div class="line">.toggle(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $(<span class="string">'.aa'</span>).hide(<span class="string">'slow'</span>);</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $(<span class="string">'.aa'</span>).show(<span class="string">'slow'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>看这个代码的结构，我们或多或少都能猜到其含义：<br>  ☑  找出type类型为button的input元素<br>  ☑  找到第一个按钮，并绑定click事件处理函数<br>  ☑  返回所有按钮，再找到第二个<br>  ☑  为第二个按钮绑定click事件处理函数<br>  ☑  为第三个按钮绑定toggle事件处理函数</p>
<p>jQuery的这种管道风格的链式代码，总的来说：</p>
<ul>
<li>节约JS代码</li>
<li>所返回的都是同一个对象，可以提高代码的效率。</li>
</ul>
<p>链式处理的前提必须是方法中必须返回一个或者一些实例对象。例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">aQuery.prototype = &#123;</div><div class="line">    init: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;,</div><div class="line">    name: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们先来看看使用jQuery的一段链式代码：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;li
    
    </summary>
    
      <category term="jQuery" scheme="http://heji.website/categories/jQuery/"/>
    
    
      <category term="web前端" scheme="http://heji.website/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://heji.website/tags/JavaScript/"/>
    
      <category term="jQuery" scheme="http://heji.website/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>jQuery2.1.1源码解析二、无new构建实例</title>
    <link href="http://heji.website/2017/03/31/jQuery2.1.1%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%BA%8C%E3%80%81%E6%97%A0new%E6%9E%84%E5%BB%BA%E5%AE%9E%E4%BE%8B/"/>
    <id>http://heji.website/2017/03/31/jQuery2.1.1源码解析二、无new构建实例/</id>
    <published>2017-03-31T04:31:13.285Z</published>
    <updated>2017-03-31T04:32:02.295Z</updated>
    
    <content type="html"><![CDATA[<p>在jQuery里面，你既可以用<code>$.isArray()</code>调用<code>jq</code>的静态方法，也可以通过<code>$().css()</code>获取对象执行对象方法。<br>在js中，要实现一个变量既能被new，又能调用它的方法，其实不难实现(使用原型实现)：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</div><div class="line">a.func = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;alert(<span class="string">"静态方法"</span>);&#125;;</div><div class="line">a.prototype.t = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;alert(<span class="string">"对象方法"</span>);&#125;;</div><div class="line"><span class="keyword">var</span> t = <span class="keyword">new</span> a();</div><div class="line">t.t();</div><div class="line">a.func();</div></pre></td></tr></table></figure></p>
<h3 id="无new构建"><a href="#无new构建" class="headerlink" title="无new构建"></a>无new构建</h3><p>下面就是一个无new构建的例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> aQuery = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>) </span>&#123;</div><div class="line">	<span class="comment">//调用时this表示window对象(函数是window对象的属性)</span></div><div class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>===<span class="built_in">window</span>); <span class="comment">//true,false</span></div><div class="line">    <span class="keyword">if</span> (!(<span class="keyword">this</span> <span class="keyword">instanceof</span> aQuery)) &#123;</div><div class="line">    	<span class="comment">//如果this不是aQuery对象的实例,新建一个aQuery对象返回,此时this即为aQuery对象的一个实例</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> aQuery(selector);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.constructor===aQuery); <span class="comment">//true</span></div><div class="line">    <span class="comment">// /[^#].*/：匹配除#外的所有字符串,exec方法返回匹配结果组成的数组</span></div><div class="line">    <span class="keyword">var</span> elem = <span class="built_in">document</span>.getElementById(<span class="regexp">/[^#].*/</span>.exec(selector)[<span class="number">0</span>]);</div><div class="line">    <span class="keyword">this</span>.length = <span class="number">1</span>;</div><div class="line">    <span class="keyword">this</span>[<span class="number">0</span>] = elem;</div><div class="line">    <span class="keyword">this</span>.context = <span class="built_in">document</span>;</div><div class="line">    <span class="keyword">this</span>.selector = selector;</div><div class="line">    <span class="keyword">this</span>.get = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>[num];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(aQuery(<span class="string">"#book"</span>).get(<span class="number">0</span>));</div></pre></td></tr></table></figure></p>
<p>现在，我们看看jQuery是如何做的：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> jQuery = <span class="function"><span class="keyword">function</span>(<span class="params">selector, context</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> jQuery.fn.init(selector, context);</div><div class="line">&#125;;</div><div class="line">jQuery.fn = jQuery.prototype = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> init = jQuery.fn.init = <span class="function"><span class="keyword">function</span>(<span class="params">selector, context</span>)</span>&#123;&#125;;</div><div class="line"><span class="comment">//让返回对象的原型指向jQuery的原型,这样,所有$()获取的对象的原型其实就都是jQuery对象的原型</span></div><div class="line">init.prototype = jQuery.fn;</div></pre></td></tr></table></figure></p>
<p>通俗解释：</p>
<ol>
<li><code>$()</code>,<code>jQuery()</code>是执行一个函数，<code>$</code>和<code>jQuery</code>是函数名称，这个函数返回的是一个对象，所以里面是一个new表达式，但是名字不能是自己，否则无限循环。</li>
<li>既然不是自己，其实可以理解为<code>jQuery()</code>返回的不是jQuery对象，而是<code>jQuery.fn.init</code>（一个名字而已）对象。</li>
<li>但是为了原型链，jQuery这样处理，<code>jQuery.fn.init.prototype = jQuery.prototype</code>.</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>jQuery的无new构建原理中在<code>$()</code>内部中首先保证是通过<code>new</code>创建,使得我们在函数调用中可以使用this来代表该jq实例，通过原型的共享而实现了静态方法与实例方法的共存。手段惊艳，不得不赞叹作者的过人之处。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在jQuery里面，你既可以用&lt;code&gt;$.isArray()&lt;/code&gt;调用&lt;code&gt;jq&lt;/code&gt;的静态方法，也可以通过&lt;code&gt;$().css()&lt;/code&gt;获取对象执行对象方法。&lt;br&gt;在js中，要实现一个变量既能被new，又能调用它的方法，其实不难实
    
    </summary>
    
      <category term="jQuery" scheme="http://heji.website/categories/jQuery/"/>
    
    
      <category term="web前端" scheme="http://heji.website/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://heji.website/tags/JavaScript/"/>
    
      <category term="jQuery" scheme="http://heji.website/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>jQuery2.1.1源码解析一、理解架构</title>
    <link href="http://heji.website/2017/03/31/jQuery2.1.1%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%B8%80%E3%80%81%E7%90%86%E8%A7%A3%E6%9E%B6%E6%9E%84/"/>
    <id>http://heji.website/2017/03/31/jQuery2.1.1源码解析一、理解架构/</id>
    <published>2017-03-31T04:24:39.158Z</published>
    <updated>2017-03-31T04:30:59.709Z</updated>
    
    <content type="html"><![CDATA[<p>接触前端已经有一年多，觉得应该能尝试着看一些伟大框架的源码。首先是大名鼎鼎的jQuery，感谢慕课网的教程。<br><a id="more"></a></p>
<h3 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h3><ul>
<li><p>jQuery2.1.1的结构如下：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"> global, factory </span>) </span>&#123;</div><div class="line">    	<span class="keyword">if</span> ( <span class="keyword">typeof</span> <span class="built_in">module</span> === <span class="string">"object"</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">module</span>.exports === <span class="string">"object"</span> ) &#123;</div><div class="line">    		<span class="built_in">module</span>.exports = global.document ?</div><div class="line">    			factory( global, <span class="literal">true</span> ) :</div><div class="line">    			<span class="function"><span class="keyword">function</span>(<span class="params"> w </span>) </span>&#123;</div><div class="line">    				<span class="keyword">if</span> ( !w.document ) &#123;</div><div class="line">    					<span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>( <span class="string">"jQuery requires a window with a document"</span> );</div><div class="line">    				&#125;</div><div class="line">    				<span class="keyword">return</span> factory( w );</div><div class="line">    			&#125;;</div><div class="line">    	&#125; <span class="keyword">else</span> &#123;</div><div class="line">    		factory( global );</div><div class="line">    	&#125;</div><div class="line">    &#125;(<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">"undefined"</span> ? <span class="built_in">window</span> : <span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> window, noGlobal </span>) </span>&#123;</div><div class="line">    	<span class="keyword">var</span> jQuery = <span class="function"><span class="keyword">function</span>(<span class="params"> selector, context </span>) </span>&#123;</div><div class="line">    		<span class="keyword">return</span> <span class="keyword">new</span> jQuery.fn.init( selector, context );</div><div class="line">    	&#125;;</div><div class="line">    	<span class="comment">// 核心方法</span></div><div class="line">    	<span class="comment">// 回调系统</span></div><div class="line">    	<span class="comment">// 异步队列</span></div><div class="line">    	<span class="comment">// 数据缓存</span></div><div class="line">    	<span class="comment">// 队列操作</span></div><div class="line">    	<span class="comment">// 选择器引</span></div><div class="line">    	<span class="comment">// 属性操作</span></div><div class="line">    	<span class="comment">// 节点遍历</span></div><div class="line">    	<span class="comment">// 文档处理</span></div><div class="line">    	<span class="comment">// 样式操作</span></div><div class="line">    	<span class="comment">// 属性操作</span></div><div class="line">    	<span class="comment">// 事件体系</span></div><div class="line">    	<span class="comment">// AJAX交互</span></div><div class="line">    	<span class="comment">// 动画引擎</span></div><div class="line">    	<span class="keyword">return</span> jQuery;</div><div class="line">    &#125;));</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
</li>
<li><p>jQuery的模块依赖网<br>  <img src="imgs/1488794281489_3.png" alt=""><br>  jQuery库如今一共13个模块，模块不是单一的，比如jQuery动画，依赖异步队列、动画队列、回调队列与数据缓存模块等。jQuery的设计中最喜欢做的事就是抽出代码的共同特性使之“模块化”，这是非常值得我们学习的。</p>
</li>
</ul>
<h3 id="自调用匿名函数"><a href="#自调用匿名函数" class="headerlink" title="自调用匿名函数"></a>自调用匿名函数</h3><p>任何库与框架设计的第一个要点就是解决命名空间与变量污染的问题。jQuery就是利用了JavaScript函数作用域的特性，采用自调用匿名函数的方法来解决这个问题。<br>自定义匿名函数有两种常用的方式：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//方式一,jQuery使用的方式</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(a);</div><div class="line">&#125;(<span class="built_in">window</span>));</div><div class="line"><span class="comment">//方式二</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(a);</div><div class="line">&#125;)(<span class="built_in">window</span>)</div></pre></td></tr></table></figure></p>
<p>下面是jQuery结构代码的详细解析：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"> global, factory </span>) </span>&#123;</div><div class="line">    <span class="comment">//这里定义一个匿名函数,global变量实际上就是typeof window !== "undefined" ? window : this三目运算符的结果,factory变量实际上就是封装了jQuery所有功能代码的函数</span></div><div class="line">    <span class="keyword">if</span> ( <span class="keyword">typeof</span> <span class="built_in">module</span> === <span class="string">"object"</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">module</span>.exports === <span class="string">"object"</span> ) &#123;</div><div class="line">        <span class="comment">//如果是node平台,且支持window.document属性,那么直接暴露factory函数,第二个参数表示不需要创建全局变量jQuery和$</span></div><div class="line">        <span class="built_in">module</span>.exports = global.document ?</div><div class="line">            factory( global, <span class="literal">true</span> ) :</div><div class="line">            <span class="function"><span class="keyword">function</span>(<span class="params"> w </span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> ( !w.document ) &#123;</div><div class="line">                    <span class="comment">//如果不支持window.document属性,直接抛出异常</span></div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>( <span class="string">"jQuery requires a window with a document"</span> );</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> factory( w );</div><div class="line">            &#125;;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//如果不是node平台,直接返回factory函数,此时没有传递noGlobal参数,那么该参数就是undefined</span></div><div class="line">        factory( global );</div><div class="line">    &#125;</div><div class="line">&#125;(<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">"undefined"</span> ? <span class="built_in">window</span> : <span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> window, noGlobal </span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> jQuery = <span class="function"><span class="keyword">function</span>(<span class="params"> selector, context </span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> jQuery.fn.init( selector, context );</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">// 核心方法</span></div><div class="line">    <span class="comment">// 回调系统</span></div><div class="line">    <span class="comment">// 异步队列</span></div><div class="line">    <span class="comment">// 数据缓存</span></div><div class="line">    <span class="comment">// 队列操作</span></div><div class="line">    <span class="comment">// 选择器引</span></div><div class="line">    <span class="comment">// 属性操作</span></div><div class="line">    <span class="comment">// 节点遍历</span></div><div class="line">    <span class="comment">// 文档处理</span></div><div class="line">    <span class="comment">// 样式操作</span></div><div class="line">    <span class="comment">// 属性操作</span></div><div class="line">    <span class="comment">// 事件体系</span></div><div class="line">    <span class="comment">// AJAX交互</span></div><div class="line">    <span class="comment">// 动画引擎</span></div><div class="line">    <span class="keyword">var</span> strundefined = <span class="keyword">typeof</span> <span class="literal">undefined</span>;</div><div class="line">    <span class="keyword">if</span> ( <span class="keyword">typeof</span> noGlobal === strundefined ) &#123;</div><div class="line">        <span class="comment">//如果noGlobal变量未定义,需要全局变量jQuery和$</span></div><div class="line">    	<span class="built_in">window</span>.jQuery = <span class="built_in">window</span>.$ = jQuery;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> jQuery;</div><div class="line">&#125;));</div></pre></td></tr></table></figure>
<p>问题：为什么需要传递window？<br>这样做是为了减少变量查找所花的时间，如果变量在函数体内就不用经过scope作用域大范围查找。因此，显然把它当成一个局部变量来查找要快一些。另外，把window作为参数传递进来，在进行代码压缩时能减小框架的体积（压缩之后参数名会变化）<br>问题：为什么需要传递undefined？<br>因为在早期的浏览器，undefined变量的值是能够改变的，在jQuery功能函数内需要一个准确的undefined变量，所以需要传递进来。</p>
<h3 id="jQuery的类数组对象结构"><a href="#jQuery的类数组对象结构" class="headerlink" title="jQuery的类数组对象结构"></a>jQuery的类数组对象结构</h3><p>很多人迷惑的jQuery为什么能像数组一样操作，通过对象get方法或者直接通过下标0索引就能转成DOM对象。<br>9种用法整体来说可以分三大块：选择器、dom的处理、dom加载。<br>换句话说jQuery就是为了获取DOM、操作DOM而存在的！所以为了更方便这些操作，让节点与实例对象通过一个桥梁给关联起来，jQuery内部就采用了一种叫“类数组对象”的方式作为存储结构，所以我们即可以像对象一样处理jQuery操作，也能像数组一样可以使用push、pop、shift、unshift、sort、each、map等类数组的方法操作jQuery对象了。<br>jQuery对象可用数组下标索引是什么原理？<br>通过<code>$(&quot;.Class&quot;)</code>构建的对象结构如下所示：<br><img src="imgs/1488854531784_2.png" alt=""><br>整个结构很明了，通过对象键值对的关系保存着属性，原型保存着方法。我们来简单的模拟一个这样的数据结构：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> aQuery = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>) </span>&#123;</div><div class="line">	<span class="comment">//调用时this表示window对象(函数是window对象的属性)</span></div><div class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>===<span class="built_in">window</span>); <span class="comment">//true,false</span></div><div class="line">    <span class="keyword">if</span> (!(<span class="keyword">this</span> <span class="keyword">instanceof</span> aQuery)) &#123;</div><div class="line">    	<span class="comment">//如果this不是aQuery对象的实例,新建一个aQuery对象返回,此时this即为aQuery对象的一个实例</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> aQuery(selector);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>===aQuery); <span class="comment">//true</span></div><div class="line">    <span class="comment">// /[^#].*/：匹配除#外的所有字符串,exec方法返回匹配结果组成的数组</span></div><div class="line">    <span class="keyword">var</span> elem = <span class="built_in">document</span>.getElementById(<span class="regexp">/[^#].*/</span>.exec(selector)[<span class="number">0</span>]);</div><div class="line">    <span class="keyword">this</span>.length = <span class="number">1</span>;</div><div class="line">    <span class="keyword">this</span>[<span class="number">0</span>] = elem;</div><div class="line">    <span class="keyword">this</span>.context = <span class="built_in">document</span>;</div><div class="line">    <span class="keyword">this</span>.selector = selector;</div><div class="line">    <span class="keyword">this</span>.get = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>[num];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(aQuery(<span class="string">"#book"</span>).get(<span class="number">0</span>));</div></pre></td></tr></table></figure></p>
<p>以上是模拟jQuery的对象结构，通过aQuery方法抽象出了对象创建的具体过程，这也是软件工程领域中的广为人知的设计模式-工厂方法。</p>
<ul>
<li>jQuery的无new构建原理<br>  函数aQuery()内部首先保证了必须是通过new操作符构建。这样就能保证当前构建的是一个带有this的实例对象，既然是对象我们可以把所有的属性与方法作为对象的key与value的方式给映射到this上，所以如上结构就可以模拟出jQuery的这样的操作了，即可通过索引取值，也可以链式方法取值，但是这样的结构是有很大的缺陷的，每次调用ajQuery方法等于是创建了一个新的实例，那么类似get方法就要在每一个实例上重新创建一遍，性能就大打折扣，所以jQuery在结构上的优化不仅仅只是我们看到的，除了实现类数组结构、方法的原型共享，而且还实现方法的静态与实例的共存，这是我们之后将会重点分析的。</li>
</ul>
<h3 id="变量污染与变量冲突"><a href="#变量污染与变量冲突" class="headerlink" title="变量污染与变量冲突"></a>变量污染与变量冲突</h3><p>任何库与框架设计的第一个要点就是解决命名空间与变量污染的问题。jq就是利用js本身函数的作用域采用立即调用表达式将变量包裹的函数里，对外开放的只有jQuery和$作为入口。<br>但是<code>$</code>这么轻便的变量，如果其他框架也将它作为简写怎么办，所以jq提供了noConflict()方法来让出<code>$</code>这个变量，用法是先引入其他框架的js，再引入jq。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;script src=<span class="string">"other_lib.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;script src=<span class="string">"jquery.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line"></div><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">  $.noConflict();</div><div class="line">  jQuery(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="comment">// 使用 jQuery 的代码</span></div><div class="line">  &#125;);</div><div class="line">  <span class="comment">// 使用其他库的 $ 的代码</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<p>解决变量冲突的源码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span></div><div class="line">    <span class="comment">//因为此时jQuery尚未对window.jQuery赋值,此时window.jQuery表示undefined</span></div><div class="line">	_jQuery = <span class="built_in">window</span>.jQuery,</div><div class="line">    <span class="comment">//因为此时jQuery尚未对window.$赋值,此时$表示其他框架的全局变量</span></div><div class="line">	_$ = <span class="built_in">window</span>.$;</div><div class="line"><span class="comment">//deep参数指示是否允许彻底将 jQuery 变量还原。</span></div><div class="line">jQuery.noConflict = <span class="function"><span class="keyword">function</span>(<span class="params"> deep </span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span> ( <span class="built_in">window</span>.$ === jQuery ) &#123;</div><div class="line">	    <span class="comment">//引入jQuery之后,window.$表示jQuery对象,此时恢复其他框架变量对$符号的使用</span></div><div class="line">	    <span class="built_in">window</span>.$ = _$;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> ( deep &amp;&amp; <span class="built_in">window</span>.jQuery === jQuery ) &#123;</div><div class="line">        <span class="comment">//引入jQuery之后,window.jQuery表示jQuery对象,如果指定deep=true,那么window.jQuery将会被还原为undefined</span></div><div class="line">		<span class="built_in">window</span>.jQuery = _jQuery;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//返回jQuery对象（可以重新指派引用）</span></div><div class="line">	<span class="keyword">return</span> jQuery;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">if</span> ( <span class="keyword">typeof</span> noGlobal === strundefined ) &#123;</div><div class="line">	<span class="built_in">window</span>.jQuery = <span class="built_in">window</span>.$ = jQuery;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>另外，可以使用闭包的方式传入jQuery对象,也可解决<code>$</code>冲突的问题。</p>
<h3 id="jQuery中的ready与load事件"><a href="#jQuery中的ready与load事件" class="headerlink" title="jQuery中的ready与load事件"></a>jQuery中的ready与load事件</h3><p>Query有3种针对文档加载的方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// ...代码...</span></div><div class="line">&#125;)</div><div class="line"><span class="comment">//document ready 简写</span></div><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// ...代码...</span></div><div class="line">&#125;)</div><div class="line">$(<span class="built_in">document</span>).load(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// ...代码...</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>一个是ready一个是load，这两个到底有什么区别呢？<br>ready在构建了基本的DOM结构之后就会触发，load事件需要在所有资源比如图片等加载完成之后才触发。所以，ready先执行，load后执行。<br><strong>DOM文档加载的步骤：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(1) 解析HTML结构。</div><div class="line">(2) 加载外部脚本和样式表文件。</div><div class="line">(3) 解析并执行脚本代码。</div><div class="line">(4) 构造HTML DOM模型。//ready</div><div class="line">(5) 加载图片等外部文件。</div><div class="line">(6) 页面加载完毕。//load</div></pre></td></tr></table></figure></p>
<p>现在我们看看jQuery如何处理文档加载时机的问题：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> readyList;</div><div class="line">jQuery.fn.ready = <span class="function"><span class="keyword">function</span>(<span class="params"> fn </span>) </span>&#123;</div><div class="line">	jQuery.ready.promise().done( fn );</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">completed</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">document</span>.removeEventListener( <span class="string">"DOMContentLoaded"</span>, completed, <span class="literal">false</span> );</div><div class="line">	<span class="built_in">window</span>.removeEventListener( <span class="string">"load"</span>, completed, <span class="literal">false</span> );</div><div class="line">	jQuery.ready();</div><div class="line">&#125;</div><div class="line">jQuery.ready.promise = <span class="function"><span class="keyword">function</span>(<span class="params"> obj </span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span> ( !readyList ) &#123;</div><div class="line">		readyList = jQuery.Deferred();</div><div class="line">		<span class="keyword">if</span> ( <span class="built_in">document</span>.readyState === <span class="string">"complete"</span> ) &#123;</div><div class="line">			setTimeout( jQuery.ready );</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="built_in">document</span>.addEventListener( <span class="string">"DOMContentLoaded"</span>, completed, <span class="literal">false</span> );</div><div class="line">			<span class="built_in">window</span>.addEventListener( <span class="string">"load"</span>, completed, <span class="literal">false</span> );</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> readyList.promise( obj );</div><div class="line">&#125;;</div><div class="line">jQuery.ready.promise();</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接触前端已经有一年多，觉得应该能尝试着看一些伟大框架的源码。首先是大名鼎鼎的jQuery，感谢慕课网的教程。&lt;br&gt;
    
    </summary>
    
      <category term="jQuery" scheme="http://heji.website/categories/jQuery/"/>
    
    
      <category term="web前端" scheme="http://heji.website/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://heji.website/tags/JavaScript/"/>
    
      <category term="jQuery" scheme="http://heji.website/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>Array.prototype.slice.call(arguments)的理解</title>
    <link href="http://heji.website/2017/03/31/Array.prototype.slice.call(arguments)%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>http://heji.website/2017/03/31/Array.prototype.slice.call(arguments)的理解/</id>
    <published>2017-03-31T04:14:55.718Z</published>
    <updated>2017-03-31T04:18:29.439Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript中call和apply方法在一些框架的源码中经常遇到，这里简单介绍一下这两个方法。以Array.prototype.slice.call(arguments)为例</p>
<a id="more"></a>
<p>Array.prototype.slice.call(arguments)能将具有length属性的对象转成数组，除了IE下的节点集合（因为ie下的dom对象是以com对象的形式实现的，js对象与com对象不能进行转换）<br>例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a=&#123;length:<span class="number">2</span>,<span class="number">0</span>:<span class="string">'first'</span>,<span class="number">1</span>:<span class="string">'second'</span>&#125;;</div><div class="line"><span class="built_in">Array</span>.prototype.slice.call(a);<span class="comment">//  ["first", "second"]</span></div><div class="line"><span class="keyword">var</span> a=&#123;length:<span class="number">2</span>&#125;;</div><div class="line"><span class="built_in">Array</span>.prototype.slice.call(a);<span class="comment">//  [undefined, undefined]</span></div></pre></td></tr></table></figure></p>
<p>在说明Array.prototype.slice.call(arguments)之前，先举一个call用法的例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);    <span class="comment">//this表示'littledu'</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="keyword">this</span>);      <span class="comment">//  Object</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span> <span class="keyword">instanceof</span> <span class="built_in">String</span>);    <span class="comment">// true</span></div><div class="line">&#125;</div><div class="line">a.call(<span class="string">'littledu'</span>);</div></pre></td></tr></table></figure></p>
<p>调用call方法会把构造函数内部的this指向参数代表的对象<br>现在我们分析下Array.prototype.slice.call(arguments)。slice是Array原型对象的一个属性（以函数的形式存在）。当调用slice.call方法时，slice函数内部的this引用就指向arguments[0]<br>此时，我们再看看splice方法的实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype.slice = <span class="function"><span class="keyword">function</span>(<span class="params">start,end</span>)</span>&#123;</div><div class="line">     <span class="keyword">var</span> result = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">     start = start || <span class="number">0</span>;</div><div class="line">     end = end || <span class="keyword">this</span>.length; <span class="comment">//this指向调用的对象，当用了call后，能够改变this的指向，也就是指向传进来的对象，这是关键</span></div><div class="line">     <span class="keyword">for</span>(<span class="keyword">var</span> i = start; i &lt; end; i++)&#123;</div><div class="line">          result.push(<span class="keyword">this</span>[i]);</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>也就是说Array.prototype.slice.call(arguments)的参数对象必须要有length属性，并且其他属性的key必须是从0开始的索引才能把对象转成数组。<br>最后，附个转成数组的通用函数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> toArray = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>)</span>&#123;</div><div class="line">     <span class="keyword">try</span>&#123;</div><div class="line">         <span class="keyword">return</span> <span class="built_in">Array</span>.prototype.slice.call(s);</div><div class="line">     &#125; <span class="keyword">catch</span>(e)&#123;</div><div class="line">           <span class="comment">//当没有length属性时</span></div><div class="line">             <span class="keyword">var</span> arr = [];</div><div class="line">             <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>,len = s.length; i &lt; len; i++)&#123;</div><div class="line">                 <span class="comment">//arr.push(s[i]);</span></div><div class="line">                  arr[i] = s[i];  <span class="comment">//据说这样比push快</span></div><div class="line">             &#125;</div><div class="line">              <span class="keyword">return</span> arr;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>另外，call方法和apply方法很类似，区分它们看下面这句代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">foo.call(<span class="keyword">this</span>, arg1,arg2,arg3) == foo.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)==<span class="keyword">this</span>.foo(arg1, arg2, arg3)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JavaScript中call和apply方法在一些框架的源码中经常遇到，这里简单介绍一下这两个方法。以Array.prototype.slice.call(arguments)为例&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://heji.website/categories/JavaScript/"/>
    
    
      <category term="web前端" scheme="http://heji.website/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://heji.website/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>AngularJS踩坑记(未完待续)</title>
    <link href="http://heji.website/2017/03/15/AngularJS%E8%B8%A9%E5%9D%91%E8%AE%B0/"/>
    <id>http://heji.website/2017/03/15/AngularJS踩坑记/</id>
    <published>2017-03-15T02:21:22.811Z</published>
    <updated>2017-03-15T03:56:09.112Z</updated>
    
    <content type="html"><![CDATA[<p>第一次把AngularJS应用到生产开发，发现很多需要注意的问题。</p>
<a id="more"></a>
<ul>
<li><p>正确理解AngularJS擅长的SPA（单页面应用）的开发，因为AngularJS应用每次启动都需要重新编译HTML，所以AngularJS推荐的是初始页面不变，页面的跳转只是页面部分DOM的替换。从这一点看，那些频繁进行完整HTML的跳转，一次又一次初始化AngularJS应用的项目无疑是不恰当的。</p>
</li>
<li><p>关于服务注入的问题<br>  <strong>推断式注入：</strong></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> app.controller(<span class="string">"myCtrl1"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope,hello1,hello2</span>)</span>&#123;</div><div class="line">    $scope.hello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        hello1.hello();</div><div class="line">        hello2.hello();</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>  这种注入方式，需要在保证参数名称与服务名称相同。如果代码要经过压缩等操作，就会导致注入失败。<br>  <strong>内联式注入：</strong></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">app.controller(<span class="string">"myCtrl3"</span>,[<span class="string">'$scope'</span>,<span class="string">'hello1'</span>,<span class="string">'hello2'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope,hello1,hello2</span>)</span>&#123;</div><div class="line">    $scope.hello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        hello1.hello();</div><div class="line">        hello2.hello();</div><div class="line">    &#125;</div><div class="line">&#125;]);</div></pre></td></tr></table></figure>
</li>
<li><p>AngularJS与第三方技术整合，如果需要在第三方框架准备完成之后再初始化AngularJS，此时推荐手动初始化：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//等待设备准备完成</span></div><div class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"plusready"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">//设置APP只能竖屏显示</span></div><div class="line">	plus.screen.lockOrientation(<span class="string">"portrait-primary"</span>);</div><div class="line">	<span class="comment">//app依赖于框架的组件以及app自身的demo模块</span></div><div class="line">	angular.module(<span class="string">"standardApp"</span>,[<span class="string">"pd.src"</span>,<span class="string">"pd.action"</span>,<span class="string">"pd.view"</span>,<span class="string">"standardApp.login"</span>])</div><div class="line">	<span class="comment">//配置常量</span></div><div class="line">	.constant(<span class="string">"VIEWINSTYLE"</span>, <span class="string">"slide-in-right"</span>)</div><div class="line">	<span class="comment">//公司外网测试:http://202.104.140.36:8888/zwxxpt</span></div><div class="line">	.constant(<span class="string">"SERVICEURL"</span>, <span class="string">"http://202.104.140.36:8888/zwxxpt"</span>) </div><div class="line">	<span class="comment">//后端端服务请求path</span></div><div class="line">	.constant(<span class="string">"SERVICEPATH"</span>, <span class="string">"/invoke"</span>) </div><div class="line">	<span class="comment">//后端登陆请求path</span></div><div class="line">	.constant(<span class="string">"LGOINPATH"</span>, <span class="string">"/webLogin.do"</span>) </div><div class="line">	<span class="comment">//配置是否自动升级</span></div><div class="line">	.constant(<span class="string">"AUTOUPVERSION"</span>, <span class="literal">true</span>)</div><div class="line">	<span class="comment">//版本升级检测路径</span></div><div class="line">	.constant(<span class="string">"CHECKVERSIONURL"</span>, <span class="string">"/"</span>)</div><div class="line">	<span class="comment">//请求过期时间,15秒</span></div><div class="line">	.constant(<span class="string">"TIMEOUT"</span>, <span class="number">15000</span>)</div><div class="line">	<span class="comment">//默认下载的路径</span></div><div class="line">	.constant(<span class="string">"SERVICEDOWNLOADURL"</span>, <span class="string">"/pages/platform/config/xtcs/downFileProcessor.jsp"</span>) </div><div class="line">	<span class="comment">//附件下载保存的路径,注意不要使用_downloads/temp/作为路径，会找不到文件。且要以_downloads为根目录</span></div><div class="line">	.constant(<span class="string">"DOWNLOADPATH"</span>, <span class="string">"_downloads/_temp/"</span>)</div><div class="line">	<span class="comment">//服务器端下载的路径</span></div><div class="line">	.constant(<span class="string">"SERVICEDOWNLOADURL"</span>, <span class="string">"/pages/platform/config/xtcs/downFileProcessor.jsp"</span>)</div><div class="line">	<span class="comment">//服务器端上传的路径</span></div><div class="line">	.constant(<span class="string">"SERVICEUPLOADURL"</span>, <span class="string">"/upload/uploadfile.do"</span>) </div><div class="line">	<span class="comment">//调试用常量</span></div><div class="line">	.constant(<span class="string">"IMEI"</span>, <span class="string">"3C:07:54:04:E2:E5"</span>)</div><div class="line">	.constant(<span class="string">"SIM"</span>, <span class="string">"131111111"</span>);</div><div class="line">	<span class="comment">//手动初始化Angular应用</span></div><div class="line">	angular.bootstrap(<span class="built_in">document</span>,[<span class="string">"standardApp"</span>]);</div><div class="line">&#125;,<span class="literal">false</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>当一个元素使用了多个自定义指令时，指令不应该存在多个独立的作用域即应该都使用父作用域，设置为false（默认）或只能有一个独立的作用域（其中一个指令使用了独立的作用域），另一种解决方法是指令不要用在一个元素上。</p>
</li>
<li><p>为方便后续扩展和迁移，框架底层模块应该要尽量独立，也就是说，底层模块之间尽量减少依赖。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一次把AngularJS应用到生产开发，发现很多需要注意的问题。&lt;/p&gt;
    
    </summary>
    
      <category term="AngularJS" scheme="http://heji.website/categories/AngularJS/"/>
    
    
      <category term="AngularJS" scheme="http://heji.website/tags/AngularJS/"/>
    
  </entry>
  
  <entry>
    <title>关于JavaScript原型与继承的理解</title>
    <link href="http://heji.website/2017/03/07/Javascript%E5%8E%9F%E5%9E%8B%E4%B8%8E%E7%BB%A7%E6%89%BF/"/>
    <id>http://heji.website/2017/03/07/Javascript原型与继承/</id>
    <published>2017-03-07T09:37:35.895Z</published>
    <updated>2017-03-11T09:44:22.255Z</updated>
    
    <content type="html"><![CDATA[<p>原型是JavaScript的难点之一，所以有必要把相关知识点记录下来。</p>
<a id="more"></a>
<h3 id="私有变量和函数"><a href="#私有变量和函数" class="headerlink" title="私有变量和函数"></a>私有变量和函数</h3><p>在函数内部定义的变量和函数，如果不对外提供接口，外部是无法访问到的，也就是该函数的私有的变量和函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Box</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> color = <span class="string">"blue"</span>;<span class="comment">//私有变量</span></div><div class="line">        <span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) //私有函数</span></div><div class="line">        &#123;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<p>这样在函数对象<code>Box</code>外部无法访问变量<code>color</code>和<code>fn</code>，他们就变成私有的了：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Box();</div><div class="line">    alert(obj.color);<span class="comment">//弹出 undefined</span></div><div class="line">    alert(obj.fn);<span class="comment">//同上</span></div></pre></td></tr></table></figure></p>
<h3 id="静态变量和函数"><a href="#静态变量和函数" class="headerlink" title="静态变量和函数"></a>静态变量和函数</h3><p>当定义一个函数后通过点号 “.”为其添加的属性和函数，通过对象本身仍然可以访问得到，但是其实例却访问不到，这样的变量和函数分别被称为<code>静态变量</code>和<code>静态函数</code>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Obj</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">    Obj.num = <span class="number">72</span>;<span class="comment">//静态变量</span></div><div class="line">    Obj.fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="comment">//静态函数</span></div><div class="line">    &#125;  </div><div class="line">    </div><div class="line">    alert(Obj.num);<span class="comment">//72</span></div><div class="line">    alert(<span class="keyword">typeof</span> Obj.fn)<span class="comment">//function</span></div><div class="line">    </div><div class="line">    <span class="keyword">var</span> t = <span class="keyword">new</span> Obj();</div><div class="line">    alert(t.name);<span class="comment">//undefined</span></div><div class="line">    alert(<span class="keyword">typeof</span> t.fn);<span class="comment">//undefined</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="实例变量和函数"><a href="#实例变量和函数" class="headerlink" title="实例变量和函数"></a>实例变量和函数</h3><p>在面向对象编程中除了一些库函数我们还是希望在对象定义的时候同时定义一些属性和方法，实例化后可以访问，js也能做到这样<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Box</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.a=[]; <span class="comment">//实例变量</span></div><div class="line">        <span class="keyword">this</span>.fn=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//实例方法</span></div><div class="line">            </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> Box.a); <span class="comment">//undefined</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> Box.fn); <span class="comment">//undefined</span></div><div class="line">    <span class="keyword">var</span> box=<span class="keyword">new</span> Box();</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> box.a); <span class="comment">//object</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> box.fn); <span class="comment">//function</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<p>为实例变量和方法添加新的方法和属性:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Box</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.a=[]; <span class="comment">//实例变量</span></div><div class="line">        <span class="keyword">this</span>.fn=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//实例方法</span></div><div class="line">            </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> box1=<span class="keyword">new</span> Box();</div><div class="line">    box1.a.push(<span class="number">1</span>);</div><div class="line">    box1.fn=&#123;&#125;;</div><div class="line">    <span class="built_in">console</span>.log(box1.a); <span class="comment">//[1]</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> box1.fn); <span class="comment">//object</span></div><div class="line"></div><div class="line">    <span class="keyword">var</span> box2=<span class="keyword">new</span> Box();</div><div class="line">    <span class="built_in">console</span>.log(box2.a); <span class="comment">//[]</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> box2.fn); <span class="comment">//function</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<p>在<code>box1</code>中修改了<code>a</code>和<code>fn</code>，而在<code>box2</code>中没有改变，由于数组和函数都是对象，是引用类型，这就说明<code>box1</code>中的属性和方法与<code>box2</code>中的属性与方法虽然同名但却不是一个引用，而是对<code>Box</code>对象定义的属性和方法的一个复制。<br>这个对属性来说没有什么问题，但是对于方法来说问题就很大了，因为方法都是在做完全一样的功能，但是却又两份复制，如果一个函数对象有上千和实例方法，那么它的每个实例都要保持一份上千个方法的复制，这显然是不科学的，这可肿么办呢，<code>prototype</code>应运而生。</p>
<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul>
<li>普通函数与构造函数<br>  <table><tr><th>函数类型</th><th>是否需要<code>new</code>调用</th><th>是否需要返回</th><th>是否建议使用<code>this</code>关键字</th><th>命名方式</th></tr><tr><th>普通函数</th><th>不需要<code>new</code>,直接调用</th><th>可以返回</th><th>不应该使用this，此时this表示window对象</th><th>驼峰式命名，首字母小写</th></tr><tr><th>构造函数</th><th>用<code>new</code>关键字实例化</th><th>不需要返回,默认返回<code>this</code>，当前实例对象</th><th>内部经常使用this,this指向<code>new</code>创建的实例</th><th>函数名建议首字母大写</th></tr></table>其实普通函数和构造函数本质上都是函数，只是用法不大一样。</li>
<li><p>prototype属性（指向原型对象）<br>  在<code>JavaScript</code>中,一共有两种类型的值,原始值和对象值。每个对象的构造函数都有一个内部属性<code>prototype</code> ,我们通常称之为原型。原型的值可以是一个对象,也可以是<code>null</code>。如果它的值是一个对象，则这个对象的构造函数也一定有自己的原型。这样就形成了一条线性的链，我们称之为<code>原型链</code>。<br>  使用原型的好处是可以让对象实例共享它所包含的属性和方法。也就是说，不必在构造函数中添加定义对象信息，而是可以直接将这些信息添加到原型中。这样就解决了构造函数中每个方法都会在每个实例中重新创建的不科学的问题。<br>  <strong>注意：只有函数才有<code>prototype</code>属性（原型），该属性指向一个对象，但对象实例有一个<code>__proto__</code>属性，该属性又指向了对象的构造函数的原型，所以<code>对象.__proto__===构造函数.prototype</code>是成立的</strong><br>  下面有一个例子：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="keyword">var</span> Browser = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">    Browser.prototype.run = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="string">"I'm Gecko,a kernel of firefox￼"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> Bro = <span class="keyword">new</span> Browser();</div><div class="line">    <span class="comment">//Bro对象本身没有run属性，所以，他就会去他的`__proto__`中去找，也就是`Browser.prototype`，最终执行了run方法</span></div><div class="line">    Bro.run();</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>  原型对象初始化的时候是空的，我们可以在里面自定义任何属性和方法，这些方法和属性都将被该构造函数所创建的对象继承。</p>
</li>
<li><p>constructor属性（指向构造函数）以及<br>  实例一创造出来就具有constructor属性（本身是没有的，继承自原型）。原型对象内部有一个指针（constructor属性）指向构造函数:Person.prototype.constructor = Person;<br>  所以它们的关系如下图所示：</p>
<p>  <img src="imgs/1489225362484_2.png" alt=""><br>  举个例子：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;<span class="comment">//设置对象属性</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">//给基类构造函数的prototype添加behavior方法</span></div><div class="line">    Animal.prototype.behavior = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="string">"this is a "</span>+<span class="keyword">this</span>.name);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> Dog = <span class="keyword">new</span> Animal(<span class="string">"dog"</span>);<span class="comment">//创建Dog对象</span></div><div class="line">    <span class="keyword">var</span> Cat = <span class="keyword">new</span> Animal(<span class="string">"cat"</span>);<span class="comment">//创建Cat对象</span></div><div class="line">    Dog.behavior();<span class="comment">//output "this is a dog"</span></div><div class="line">    Cat.behavior();<span class="comment">//output "this is a cat"</span></div><div class="line">    alert(Dog.behavior==Cat.behavior);<span class="comment">//output true;</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>当从一个对象那里调取属性或方法时，如果该对象自身不存在这样的属性或方法，就会去自己关联的<code>prototype</code>对象那里寻找(通过实例的<code>__proto__</code>属性)，如果<code>prototype</code>没有，就会去<code>prototype</code>关联的前辈<code>prototype</code>那里寻找，如果再没有则继续查找<code>Prototype.Prototype</code>引用的对象，依次类推，直到Prototype.….Prototype为<code>undefined</code>（<code>Object</code>的<code>Prototype</code>就是<code>undefined</code>）从而形成了所谓的“原型链”。</p>
<h3 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h3><p>在原型链的末端，就是<code>Object</code>构造函数<code>prototype</code>属性指向的那个原型对象。这个原型对象是所有对象的祖先，这个老祖宗实现了诸如<code>toString</code>等所有对象天生就该具有的方法。其他内置构造函数，如<code>Function</code>，<code>Boolean</code>，<code>String</code>，<code>Date</code>和<code>RegExp</code>等的<code>prototype</code>都是从这个老祖宗传承下来的，但他们各自又定义了自身的属性和方法，从而他们的子孙就表现出各自宗族的那些特征。<br>另外，实例还能覆盖从原型继承来的属性，如下例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;<span class="comment">//设置对象属性</span></div><div class="line">    &#125;;</div><div class="line">    <span class="comment">//设置原型的属性</span></div><div class="line">    Person.prototype.company = <span class="string">"Microsoft"</span>;</div><div class="line">     <span class="comment">//原型的方法</span></div><div class="line">    Person.prototype.SayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </div><div class="line">        alert(<span class="string">"Hello,I'm "</span>+ <span class="keyword">this</span>.name+ <span class="string">" of "</span> + <span class="keyword">this</span>.company);</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">//创建person对象</span></div><div class="line">    <span class="keyword">var</span> BillGates = <span class="keyword">new</span> Person(<span class="string">"BillGates"</span>);</div><div class="line">    <span class="comment">//继承了原型的内容，输出"Hello,I'm BillGates of Microsoft"</span></div><div class="line">    BillGates.SayHello();</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> Jobs = <span class="keyword">new</span> Person(<span class="string">"Jobs"</span>);</div><div class="line">    <span class="comment">//设置自己的company属性，掩盖了原型的company属性</span></div><div class="line">    Jobs.company = <span class="string">"Apple"</span>;</div><div class="line">    Jobs.SayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="string">"Hi,"</span>+<span class="keyword">this</span>.name + <span class="string">" like "</span> + <span class="keyword">this</span>.company);</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">//自己覆盖的属性和方法，输出"Hi,Jobs like Apple"</span></div><div class="line">    Jobs.SayHello();</div><div class="line">    <span class="comment">//Jobs的覆盖没有影响原型，BillGates还是照样输出</span></div><div class="line">    BillGates.SayHello();</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
<th>例子</th>
</tr>
</thead>
<tbody>
<tr>
<td>isPrototypeof</td>
<td>判断对象是不是实例对象的原型</td>
<td>原型对象.isPrototypeof(实例对象)</td>
</tr>
<tr>
<td>hasOwnProperty</td>
<td>监测实例对象是否含有指定属性，但不能检测到原型</td>
<td>“Test”.hasOwnProperty(“split”); //false<br>String.prototype.hasOwnProperty(“split”); //true</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原型是JavaScript的难点之一，所以有必要把相关知识点记录下来。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://heji.website/categories/JavaScript/"/>
    
    
      <category term="web前端" scheme="http://heji.website/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://heji.website/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>第六章、运动商店：订单和管理</title>
    <link href="http://heji.website/2017/03/06/%E7%AC%AC%E5%85%AD%E7%AB%A0%E3%80%81%E8%BF%90%E5%8A%A8%E5%95%86%E5%BA%97%EF%BC%9A%E8%AE%A2%E5%8D%95%E5%92%8C%E7%AE%A1%E7%90%86/"/>
    <id>http://heji.website/2017/03/06/第六章、运动商店：订单和管理/</id>
    <published>2017-03-06T06:52:34.439Z</published>
    <updated>2017-03-06T06:54:35.147Z</updated>
    
    <content type="html"><![CDATA[<p>在本章中，我会收集并验证运输详情以完成运动商店应用程序，并把订单存储在Deployd服务器上。我还会创建管理应用程序，让认证的用户看到订单并管理产品目录。</p>
<a id="more"></a>
<h2 id="准备示例程序"><a href="#准备示例程序" class="headerlink" title="准备示例程序"></a>准备示例程序</h2><p>我将继续在上一章的项目上构建，你可以从<code>https://github.com/heji1993/angular-sportsstore.git</code>上获取源码。<br>在上一章中，我在<code>app.html</code>添加了两个URL路由，它们是本章完成结账过程所需的：<br><img src="imgs/1486699645094_2.png" alt=""></p>
<h2 id="获取运输详情"><a href="#获取运输详情" class="headerlink" title="获取运输详情"></a>获取运输详情</h2><p>在购物车中为用户显示商品总览后，我想获取订单的运输详情，这带我来到了AngularJS与表单相关的特性面前。我创建<code>views/placeorder.html</code>文件捕获用户的运输详情。下面是该文件的内容：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>提交订单<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>请输入你的相关信息，我们会直接把你的商品邮寄给你<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"well"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">h3</span>&gt;</span>收件人<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">label</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-model</span>=<span class="string">"data.shipping.name"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">h3</span>&gt;</span>收货地址<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">label</span>&gt;</span>街道地址<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-model</span>=<span class="string">"data.shipping.street"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>完成订单<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>关于该视图，首先要注意的是我没有使用ng-controller指令指定控制器，这意味着视图将被顶级控制器<code>sportsStoreCtrl</code>支持。另外，在输入框元素上，我使用了ng-model指令进行数据绑定，与双花括号不同的是，ng-model是双向数据绑定，视图上模型的改变会更新到作用域，而双花括号是单向绑定，通常用于展示。当data对象没有shipping属性时，AngularJS会动态创建这个属性。</p>
<h3 id="添加表单验证"><a href="#添加表单验证" class="headerlink" title="添加表单验证"></a>添加表单验证</h3><p>AngularJS支持表单验证，它能检查数值的适用性。<br>AngularJS表单校验基于元素上标准的HTML属性，比如type和required。表单验证自动执行，但仍需要一些工作来将验证的反馈呈现给用户，并在应用程序中整合整体的验证不通过的提示。</p>
<ul>
<li><p>验证的准备<br>  设置表单验证的第一步是在视图上添加form元素并在我的input元素上添加验证属性。下面是<code>views/placeorder.html</code>文件修改的内容：</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"shippingForm"</span> <span class="attr">novalidate</span>=<span class="string">""</span>&gt;</span></div><div class="line">    ...</div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-model</span>=<span class="string">"data.shipping.name"</span> <span class="attr">required</span>=<span class="string">"required"</span>/&gt;</span></div><div class="line">    ...</div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-model</span>=<span class="string">"data.shipping.street"</span> <span class="attr">required</span>=<span class="string">"required"</span>/&gt;</span></div><div class="line">    ...</div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p>  新增一个form元素有三个目的：开启表单验证；<code>novalidate</code>属性是H5的标准属性，表示禁用浏览器的默认校验，让表单校验统一由AngularJS执行；定义一个变量，用来报告表单的有效性，它通过name属性实现，我把它设置为shippingForm，在后面将会演示如何使用。</p>
</li>
<li><p>显示验证反馈<br>  一旦form元素和验证属性被放好，AngularJS就会开始验证用户所提供的数据，AngularJS提供两种验证结果的反馈形式：1.使用AngularJS赋予form元素的通过验证和未通过验证的类来定义CSS样式，当通过校验时，元素会有<code>ng-valid</code>类，当没有通过校验时，元素会有<code>ng-invalid</code>类。2.使用作用域变量的属性判断，比如，不满足 <code>required</code>时,<code>formName.inputName.$error</code>为<code>{required: true}</code>，更多验证请查看官方API。下面是<code>views/placeorder.html</code>文件部分修改的代码：</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">      ...</div><div class="line">      <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">      	<span class="selector-class">.ng-valid</span>&#123;</div><div class="line">      		<span class="attribute">border-color</span>: lightgreen;</div><div class="line">      	&#125;</div><div class="line">      	<span class="selector-class">.ng-invalid</span>&#123;</div><div class="line">      		<span class="attribute">border-color</span>: lightpink;</div><div class="line">      	&#125;</div><div class="line">      	<span class="selector-tag">span</span><span class="selector-class">.error</span>&#123;</div><div class="line">      		<span class="attribute">font-weight</span>: bold;</div><div class="line">      		<span class="attribute">color</span>: red;</div><div class="line">      	&#125;</div><div class="line">      <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">      ...</div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">label</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-model</span>=<span class="string">"data.shipping.name"</span> <span class="attr">required</span>=<span class="string">"required"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error"</span> <span class="attr">ng-show</span>=<span class="string">"shippingForm.name.$error.required"</span>&gt;</span>请输入姓名<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>收货地址<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">label</span>&gt;</span>街道地址<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"street"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-model</span>=<span class="string">"data.shipping.street"</span> <span class="attr">required</span>=<span class="string">"required"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error"</span> <span class="attr">ng-show</span>=<span class="string">"shippingForm.street.$error.required"</span>&gt;</span>请输入街道地址<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>连接按钮来验证<br>  当表单内一个或多个input元素未通过验证，<code>formName.$invalid</code>属性的值将会被AngularJS设为true，我们可以把它和ng-disabled指令联合来管理button元素的状态（校验未通过不允许点击提交），下面是<code>views/placeorder.html</code>文件部分修改的代码：</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">      ...</div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">ng-disabled</span>=<span class="string">"shippingForm.$invalid"</span>&gt;</span>完成订单<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">...</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="添加剩下的表单字段"><a href="#添加剩下的表单字段" class="headerlink" title="添加剩下的表单字段"></a>添加剩下的表单字段</h3><p>现在我将在表单中添加剩下的input元素，下面是<code>views/placeorder.html</code>文件的完整代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">	<span class="selector-class">.ng-valid</span>&#123;</div><div class="line">		<span class="attribute">border-color</span>: lightgreen;</div><div class="line">	&#125;</div><div class="line">	<span class="selector-class">.ng-invalid</span>&#123;</div><div class="line">		<span class="attribute">border-color</span>: lightpink;</div><div class="line">	&#125;</div><div class="line">	<span class="selector-tag">span</span><span class="selector-class">.error</span>&#123;</div><div class="line">		<span class="attribute">font-weight</span>: bold;</div><div class="line">		<span class="attribute">color</span>: red;</div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>提交订单<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>请输入你的相关信息，我们会直接把你的商品邮寄给你<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"shippingForm"</span> <span class="attr">novalidate</span>=<span class="string">""</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"well"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">h3</span>&gt;</span>收件人<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">label</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-model</span>=<span class="string">"data.shipping.name"</span> <span class="attr">required</span>=<span class="string">"required"</span>/&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error"</span> <span class="attr">ng-show</span>=<span class="string">"shippingForm.name.$error.required"</span>&gt;</span>请输入姓名<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">h3</span>&gt;</span>收货地址<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">label</span>&gt;</span>街道<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"street"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-model</span>=<span class="string">"data.shipping.street"</span> <span class="attr">required</span>=<span class="string">"required"</span>/&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error"</span> <span class="attr">ng-show</span>=<span class="string">"shippingForm.street.$error.required"</span>&gt;</span>请输入街道地址<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">label</span>&gt;</span>区<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"county"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-model</span>=<span class="string">"data.shipping.county"</span> <span class="attr">required</span>=<span class="string">"required"</span>/&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error"</span> <span class="attr">ng-show</span>=<span class="string">"shippingForm.county.$error.required"</span>&gt;</span>请输入所在区<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">label</span>&gt;</span>市<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"city"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-model</span>=<span class="string">"data.shipping.city"</span> <span class="attr">required</span>=<span class="string">"required"</span>/&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error"</span> <span class="attr">ng-show</span>=<span class="string">"shippingForm.city.$error.required"</span>&gt;</span>请输入所在市<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">label</span>&gt;</span>国家<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"country"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-model</span>=<span class="string">"data.shipping.country"</span> <span class="attr">required</span>=<span class="string">"required"</span>/&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error"</span> <span class="attr">ng-show</span>=<span class="string">"shippingForm.country.$error.required"</span>&gt;</span>请输入所在国家<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">label</span>&gt;</span>邮政编码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"zip"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-model</span>=<span class="string">"data.shipping.zip"</span> <span class="attr">required</span>=<span class="string">"required"</span>/&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error"</span> <span class="attr">ng-show</span>=<span class="string">"shippingForm.zip.$error.required"</span>&gt;</span>请输入所在市、区<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">h3</span>&gt;</span>可选<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkbox"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"giftwarp"</span> <span class="attr">ng-model</span>=<span class="string">"data.shipping.giftwrap"</span>/&gt;</span></div><div class="line">				是否礼盒包装</div><div class="line">			<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">ng-disabled</span>=<span class="string">"shippingForm.$invalid"</span>&gt;</span>完成订单<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="下单"><a href="#下单" class="headerlink" title="下单"></a>下单</h2><p>现在，我将扩展由Deployd服务器提供的数据库，使用Ajax请求发送订单数据到服务器，并最终显示感谢消息来完成这一过程。</p>
<h3 id="扩展Deployd服务"><a href="#扩展Deployd服务" class="headerlink" title="扩展Deployd服务"></a>扩展Deployd服务</h3><p>为管理订单，新增一个order集合，方式和之前创建product集合一样，下面是order必要的属性，与placeorder.html的表单字段对应。<br><img src="imgs/1487743819803_2.png" alt=""></p>
<h3 id="定义控制器行为"><a href="#定义控制器行为" class="headerlink" title="定义控制器行为"></a>定义控制器行为</h3><p>下一步是定义控制器行为，他将使用Ajax请求发送订单明细到Deployd服务器。我们可以使用不同的方法定义该功能，比如服务或新控制器。这种灵活性是使用AngularJS的标志之一。当谈到AngularJS应用程序的架构时，没有绝对的正确或错误，你会开发出属于自己的风格和偏好，积累到你的经验中。我将保持简单，向顶级控制器sportsStore控制器中添加行为，它目前已包含了产生Ajax请求加载产品数据的代码。下面是修改后的<code>controllers/sportsStore.js</code>文件的内容：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//module方法值传一个参数表示我们尝试找到sportsStore这个模块,必须先有sportsStore模块,否则会报错</span></div><div class="line">angular.module(<span class="string">"sportsStore"</span>)</div><div class="line">.constant(<span class="string">"dataUrl"</span>,<span class="string">"http://localhost:5500/products"</span>)</div><div class="line">.constant(<span class="string">"orderUrl"</span>,<span class="string">"http://localhost:5500/orders"</span>)</div><div class="line">.controller(<span class="string">"sportsStoreCtrl"</span>,[<span class="string">"$scope"</span>,<span class="string">"$http"</span>,<span class="string">"$location"</span>,<span class="string">"dataUrl"</span>,<span class="string">"orderUrl"</span>,<span class="string">"cartService"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope,$http,$location,dataUrl,orderUrl,cartService</span>)</span>&#123;</div><div class="line">	$scope.data = &#123;&#125;;</div><div class="line">	<span class="comment">//使用$http服务查询数据</span></div><div class="line">	$http.get(dataUrl)</div><div class="line">	.success(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</div><div class="line">		$scope.data.products = result;</div><div class="line">	&#125;)</div><div class="line">	.error(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</div><div class="line">		$scope.data.error = error;</div><div class="line">	&#125;);</div><div class="line">	<span class="comment">//发送订单</span></div><div class="line">	$scope.sendOrder = <span class="function"><span class="keyword">function</span>(<span class="params">shippingDetails</span>)</span>&#123;</div><div class="line">		<span class="comment">//创建运输详情对象的副本,以便修改不影响程序的其他部分</span></div><div class="line">		<span class="keyword">var</span> order = angular.copy(shippingDetails);</div><div class="line">		<span class="comment">//从购物车获取所有商品</span></div><div class="line">		order.products = cartService.getProducts();</div><div class="line">		<span class="comment">//发送请求提交订单（以post方法提交请求到Deployd服务器并发送数据即完成对象的创建）</span></div><div class="line">		$http.post(orderUrl,order)</div><div class="line">		.success(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">			$scope.data.orderId = data.id;</div><div class="line">			<span class="comment">//清空购物车</span></div><div class="line">			cartService.getProducts().length = <span class="number">0</span>;</div><div class="line">		&#125;)</div><div class="line">		.error(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</div><div class="line">			$scope.data.orderError = error;</div><div class="line">		&#125;)</div><div class="line">		.finally(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="comment">//最后导航到订单完成页面</span></div><div class="line">			$location.path(<span class="string">"/complete"</span>);</div><div class="line">		&#125;)</div><div class="line">	&#125;</div><div class="line">&#125;])</div></pre></td></tr></table></figure></p>
<h3 id="调用控制器行为"><a href="#调用控制器行为" class="headerlink" title="调用控制器行为"></a>调用控制器行为</h3><p>调用新控制器行为，我们需要在运输详情视图中为button元素添加ng-click指令调用行为即可。下面是<code>views/placeorder.html</code>页面部分修改的代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">ng-click</span>=<span class="string">"sendOrder(data.shipping);"</span> <span class="attr">ng-disabled</span>=<span class="string">"shippingForm.$invalid"</span>&gt;</span>完成订单<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="定义视图"><a href="#定义视图" class="headerlink" title="定义视图"></a>定义视图</h3><p>在Ajax请求被完成之后，我所指定的URL路径是<code>/complete</code>，URL路由配置会映射它到文件<code>/views/thankYou.html</code>。我创建了该文件，下面是<code>/views/thankYou.html</code>的内容：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-danger"</span> <span class="attr">ng-show</span>=<span class="string">"data.orderError"</span>&gt;</span></div><div class="line">	发生错误&#123;&#123;data.orderError.status&#125;&#125;.订单尚未完成<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/placeorder"</span> <span class="attr">class</span>=<span class="string">"alert-link"</span>&gt;</span>点击这里重试<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"well"</span> <span class="attr">ng-hide</span>=<span class="string">"data.orderError"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">h2</span>&gt;</span>已下单！<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">	感谢您使用我们的购物平台，您的订单编号是&#123;&#123;data.orderId&#125;&#125;，我们会尽快将商品派送到您手里。</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><ul>
<li>当浏览器载入app.html文件时，视图被显示和产品及分类元素被生成之间有一点延迟。在后面的章节，会讲解如何使用URL路由特性来组织AngularJS在Ajax请求完成之前显示视图。</li>
<li>为了显示导航和分页，我处理产品数据并筛出分类。在实际项目中，我会考虑在产品数据首次到达时只生成该信息一次，之后就复用它，在后续章节介绍如何使用承诺来构建行为链，那是适用于这种任务的理想方式。</li>
<li>最后我会介绍如何使用<code>$animate</code>服务在URL路径改变时显示简短的过渡动画。</li>
</ul>
<h2 id="管理产品分类"><a href="#管理产品分类" class="headerlink" title="管理产品分类"></a>管理产品分类</h2><h3 id="准备Deployd"><a href="#准备Deployd" class="headerlink" title="准备Deployd"></a>准备Deployd</h3><p>我们要对产品进行管理，需要有用户集合。普通用户和管理员还有权限之分。<br>点击新建一个<code>User Collection</code>，User集默认定义了id、username和password属性，全是我所需要的属性。创建集合之后，点击data创建一条数据：<code>{username:&quot;admin&quot;,password:&quot;secret&quot;}</code>。</p>
<ul>
<li><p>巩固集合<br>  Deployd最棒的特性之一是它定义了可用于实现服务端功能的简单JavaScript API（比如验证用户），当对集合进行操作时可以触发一系列的事件。在控制台点击products集合然后单击events，你将看到一系列代表不同集事件的选项卡,如下图：<br>  <img src="imgs/1488251043574_2.png" alt=""><br>  这些事件为所有集定义，你能做许多事情，其中就有使用JavaScript加强验证策略。在On Put和On Delete标签中输入以下JavaScript：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(!me || me.username!=<span class="string">"admin"</span>)&#123;</div><div class="line">    <span class="comment">//401表示被请求的页面要求身份验证</span></div><div class="line">    cancel(<span class="string">"没有权限"</span>,<span class="number">401</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  在Deployd的API中，me表示当前用户，而cancel函数终止指定消息和HTTP状态码的请求。这段代码允许验证后的admin用户访问，终止所有其他401状态码的请求。<br>  在orders集合中为ON GET、ON PUT和ON DELETE 事件重复这一过程，因为这些事件都需要验证用户身份，下面是需要添加验证控制的事件：<br>  <img src="imgs/1488252583879_3.png" alt=""></p>
</li>
</ul>
<h3 id="创建管理应用程序"><a href="#创建管理应用程序" class="headerlink" title="创建管理应用程序"></a>创建管理应用程序</h3><p>我将为管理任务创建单独的AngularJS应用程序。但我会把它相关代码整合到主应用程序中。我向<code>angular-sportsstore</code>项目根目录添加一个新文件<code>admin.html</code>，下面是它的内容：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">ng-app</span>=<span class="string">"sportsStoreAdmin"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"angular.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"ngmodules/angular-route.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"bootstrap.css"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"bootstrap-theme.css"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">			angular.module(<span class="string">"sportsStoreAdmin"</span>,[<span class="string">"ngRoute"</span>])</div><div class="line">			.config([<span class="string">"$routeProvider"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$routeProvider</span>)</span>&#123;</div><div class="line">				$routeProvider.when(<span class="string">"/login"</span>,&#123;</div><div class="line">					templateUrl : <span class="string">"views/adminLogin.html"</span></div><div class="line">				&#125;);</div><div class="line">				$routeProvider.when(<span class="string">"/main"</span>,&#123;</div><div class="line">					templateUrl : <span class="string">"views/adminMain.html"</span></div><div class="line">				&#125;);</div><div class="line">				$routeProvider.otherwise(&#123;</div><div class="line">					redirectTo : <span class="string">"/login"</span></div><div class="line">				&#125;);</div><div class="line">			&#125;])</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">ng-view</span>&gt;</span><span class="tag">&lt;/<span class="name">ng-view</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>该html文件引入一些必须的文件，以及定义sportsstoreAdmin模块并配置了路由。为了定义路由的otherwise方法，我使用了redirectTo，它改变URL路径到其他路由，这将是我可以验证用户。后面章节会详细讲述URL路由的配置项。</p>
<ul>
<li><p>添加占位符<br>  我将首先实现验证特性，但我需要为<code>/views/adminMain.html</code>视图文件创建一些占位内容，以让我有一些东西在验证成功后显示。下面是文件内容（临时的）：</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"well"</span>&gt;</span></div><div class="line">	这是主页面</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="实现验证"><a href="#实现验证" class="headerlink" title="实现验证"></a>实现验证</h3><p>Deployd验证用户使用标准HTTP请求，应用程序发送POST请求到/users/login（这是Deployd进行登录验证的URL），需要在请求提包含username和password。如果验证尝试成功了服务器就响应状态码200，在用户无法验证时状态码是401。为实现验证，我先定义产生Ajax调用的控制器并处理响应，下面是<code>controllers/adminControllers.js</code>文件的内容：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">"sportsStoreAdmin"</span>)</div><div class="line">.constant(<span class="string">"authUrl"</span>,<span class="string">"http://localhost:5500/users/login"</span>)</div><div class="line">.controller(<span class="string">"authCtrl"</span>,[<span class="string">"$scope"</span>,<span class="string">"$http"</span>,<span class="string">"$location"</span>,<span class="string">"authUrl"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope,$http,$location,authUrl</span>)</span>&#123;</div><div class="line">	$scope.authenticate = <span class="function"><span class="keyword">function</span>(<span class="params">username,password</span>)</span>&#123;</div><div class="line">		$http.post(authUrl,&#123;</div><div class="line">			username:username,</div><div class="line">			password:password</div><div class="line">		&#125;,&#123;</div><div class="line">			<span class="comment">//设置为true,会企业跨域请求的支持,允许Ajax请求使用cookie处理验证。后面会介绍</span></div><div class="line">			withCredentials : <span class="literal">true</span></div><div class="line">		&#125;).success(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">			$location.path(<span class="string">"/main"</span>);</div><div class="line">		&#125;).error(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</div><div class="line">			$scope.authenticationError = error;</div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line">&#125;])</div></pre></td></tr></table></figure>
<p>使用控制器，在<code>admin.html</code>页面引入<code>controllers/adminControllers.js</code>文件即可，注意确保它出现在模块定义的代码后面。</p>
<ul>
<li><p>定义验证视图<br>  下一步是创建允许用户输入用户名和密码的视图，调用authCtrl控制器所定义的行为<code>authenticate</code>，然后显示任何错误的详情。下面是<code>views/adminLogin.html</code>文件的内容：</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"well"</span> <span class="attr">ng-controller</span>=<span class="string">"authCtrl"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-info"</span> <span class="attr">ng-hide</span>=<span class="string">"authenticationError"</span>&gt;</span></div><div class="line">		请输入你的用户名和密码进行登录验证</div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-danger"</span> <span class="attr">ng-show</span>=<span class="string">"authenticationError"</span>&gt;</span></div><div class="line">		验证失败(&#123;&#123;authenticationError.status&#125;&#125;)。请重新尝试。</div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">novalidate</span>=<span class="string">"novalidate"</span> <span class="attr">name</span>=<span class="string">"authForm"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-model</span>=<span class="string">"username"</span> <span class="attr">required</span>=<span class="string">"required"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-model</span>=<span class="string">"password"</span> <span class="attr">required</span>=<span class="string">"required"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">ng-disabled</span>=<span class="string">"authForm.$invalid"</span> <span class="attr">ng-click</span>=<span class="string">"authenticate(username,password)"</span>&gt;</span></div><div class="line">				登录</div><div class="line">			<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="定义主视图和控制器"><a href="#定义主视图和控制器" class="headerlink" title="定义主视图和控制器"></a>定义主视图和控制器</h3><p>一旦用户验证通过，ng-view指令就显示adminMain.html视图，该视图将允许管理员管理产品分类的内容以及查看订单队列。<br>在开始之前，我先定义占位内容用于显示产品分类视图和订单列表视图。首先，我创建<code>views/adminProducts.html</code>，下面是文件内容：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"well"</span>&gt;</span></div><div class="line">	这是产品视图</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>类似地，我创建了<code>views/adminOrders.html</code>文件，并定义了相似的占位内容，下面是文件内容：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"well"</span>&gt;</span></div><div class="line">	这是订单视图</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>由于在主视图<code>views/adminMain.html</code>需要切换产品视图和订单视图，但遗憾的是<code>ng-view</code>指令不能嵌套使用，所以，我将使用<code>ng-include</code>指令来处理它，作为不太优雅（但功能完善）的代替品。现在，我在<code>controllers/adminControllers.js</code>文件中定义新的控制器，下面是部分修改的内容：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">.controller(<span class="string">"mainCtrl"</span>,[<span class="string">"$scope"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</div><div class="line">	$scope.screens = [<span class="string">"Products"</span>,<span class="string">"Orders"</span>];</div><div class="line">	$scope.current = $scope.screens[<span class="number">0</span>];</div><div class="line">	<span class="comment">//设置视图</span></div><div class="line">	$scope.setScreen = <span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</div><div class="line">		$scope.current = $scope.screens[index];</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//获取视图</span></div><div class="line">	$scope.getScreen = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> $scope.current == <span class="string">"Products"</span> ?</div><div class="line">				<span class="string">"views/adminProducts.html"</span> : <span class="string">"views/adminOrders.html"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;]);</div></pre></td></tr></table></figure>
<p>下面是修改后的<code>views/adminMain.html</code>文件：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-default row"</span> <span class="attr">ng-controller</span>=<span class="string">"mainCtrl"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-3 panel-body"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--ng-class:如果是一个对象。那么如果某个键所对应的的值是true则该键将会作为一个类名--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">span</span> <span class="attr">ng-repeat</span>=<span class="string">"item in screens"</span> </span></div><div class="line">			<span class="attr">class</span>=<span class="string">"btn btn-block btn-default"</span></div><div class="line">			<span class="attr">ng-class</span>=<span class="string">"&#123;'btn-primary':item == current&#125;"</span></div><div class="line">			<span class="attr">ng-click</span>=<span class="string">"setScreen($index);"</span>&gt;</div><div class="line">			&#123;&#123;item&#125;&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-8 panel-body"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-include</span>=<span class="string">"getScreen()"</span>&gt;</span></div><div class="line">			</div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="实现订单特性"><a href="#实现订单特性" class="headerlink" title="实现订单特性"></a>实现订单特性</h3><p>我现在开始订单列表，它处理起来是最简单的，因为我仅仅是要显示只读列表，在实际中可能会更复杂。我想<code>controllers/adminControllers.js</code>添加订单控制器，下面是部分修改的代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">.controller(<span class="string">"ordersCtrl"</span>,[<span class="string">"$scope"</span>,<span class="string">"$http"</span>,<span class="string">"ordersUrl"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope,$http,ordersUrl</span>)</span>&#123;</div><div class="line">	$http.get(ordersUrl,&#123;withCredentials:<span class="literal">true</span>&#125;)</div><div class="line">		.success(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">			$scope.orders = data;</div><div class="line">		&#125;)</div><div class="line">		.error(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</div><div class="line">			$scope.error = error;</div><div class="line">		&#125;);</div><div class="line">	$scope.selectedOrder;</div><div class="line">	<span class="comment">//选择订单</span></div><div class="line">	$scope.selectOrder = <span class="function"><span class="keyword">function</span>(<span class="params">order</span>)</span>&#123;</div><div class="line">		$scope.selectedOrder = order;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//计算总价</span></div><div class="line">	$scope.calcTotal = <span class="function"><span class="keyword">function</span>(<span class="params">order</span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> total = <span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; order.products.length ; i++)&#123;</div><div class="line">			total += order.products[i].count * order.products[i].price;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> total;</div><div class="line">	&#125;</div><div class="line">&#125;]);</div></pre></td></tr></table></figure>
<p>有了ordersCtrl控制器，我修改<code>views/adminOrders.html</code>页面的内容并使用控制器，下面是修改后的文件内容：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"ordersCtrl"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-striped table-bordered"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">th</span>&gt;</span>所在城市<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">th</span>&gt;</span>订单总价<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tr</span> <span class="attr">ng-repeat</span>=<span class="string">"order in orders"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;order.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;order.city&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;calcTotal(order) | currency&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">ng-click</span>=<span class="string">"selectOrder(order);"</span> <span class="attr">class</span>=<span class="string">"btn btn-xs btn-primary"</span>&gt;</span></div><div class="line">					订单详情</div><div class="line">				<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!--显示选择的订单详情--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-show</span>=<span class="string">"selectedOrder"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">h3</span>&gt;</span>订单详情<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-striped table-bordered"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>商品名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>商品数量<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>商品单价<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">tr</span> <span class="attr">ng-repeat</span>=<span class="string">"product in selectedOrder.products"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;product.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;product.count&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;product.price | currency&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>视图由两个table组成。第一个table显示订单摘要，第二个table只在订单被选中时可见，它显示订单的详情。</p>
<h3 id="实现产品特性"><a href="#实现产品特性" class="headerlink" title="实现产品特性"></a>实现产品特性</h3><p>为实现产品特性，管理员需要对产品进行增删改查。在Deployd控制面板，选择products集合并点击API，会看到RESTful API的更多细节，我会在后续章节详细介绍RESTful API。你可以使用<code>$http</code>服务来做RESTful API，这样做会暴露整组执行贯穿应用程序的操作的URL。更优雅的做法是使用可选模块<code>ngResource</code>中的<code>$resource</code>服务，它有漂亮的方式处理发送到服务器的URL的定义。</p>
<ul>
<li><p>定义RESTful控制器<br>  我要开始通过AngularJS的<code>$resource</code>服务来定义控制器以提供访问权限给Deployd的RESTful API。我在controllers文件夹中创建了新文件<code>adminProductController.js</code>并用它定义控制器，下面是文件内容：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">"sportsStoreAdmin"</span>)</div><div class="line">.constant(<span class="string">"productUrl"</span>,<span class="string">"http://localhost:5500/products/"</span>)</div><div class="line">.config(<span class="function"><span class="keyword">function</span>(<span class="params">$httpProvider</span>)</span>&#123;</div><div class="line">	$httpProvider.defaults.withCredentials = <span class="literal">true</span>;</div><div class="line">&#125;)</div><div class="line">.controller(<span class="string">"productCtrl"</span>,[<span class="string">"$scope"</span>,<span class="string">"$resource"</span>,<span class="string">"productUrl"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope,$resource,productUrl</span>)</span>&#123;</div><div class="line">	$scope.productResource = $resource(productUrl+<span class="string">":id"</span>,&#123;id:<span class="string">"@id"</span>&#125;);</div><div class="line">	<span class="comment">//查询列表</span></div><div class="line">	$scope.listProducts = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		$scope.products = $scope.productResource.query();</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//删除指定产品</span></div><div class="line">	$scope.deleteProduct = <span class="function"><span class="keyword">function</span>(<span class="params">product</span>)</span>&#123;</div><div class="line">		product.$<span class="keyword">delete</span>().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			$scope.products.splice($scope.products.indexOf(product),<span class="number">1</span>);</div><div class="line">		&#125;)</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//创建产品</span></div><div class="line">	$scope.createProduct = <span class="function"><span class="keyword">function</span>(<span class="params">product</span>)</span>&#123;</div><div class="line">		<span class="keyword">new</span> $scope.productResource(product).$save().then(<span class="function"><span class="keyword">function</span>(<span class="params">newProduct</span>)</span>&#123;</div><div class="line">			$scope.products.push(newProduct);</div><div class="line">			$scope.editedProduct = <span class="literal">null</span>;</div><div class="line">		&#125;)</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//更新指定产品</span></div><div class="line">	$scope.updateProduct = <span class="function"><span class="keyword">function</span>(<span class="params">product</span>)</span>&#123;</div><div class="line">		product.$save();</div><div class="line">		$scope.editedProduct = <span class="literal">null</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//编辑指定产品</span></div><div class="line">	$scope.startEdit = <span class="function"><span class="keyword">function</span>(<span class="params">product</span>)</span>&#123;</div><div class="line">		$scope.editedProduct = product;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//取消编辑</span></div><div class="line">	$scope.cancelEdit = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		$scope.editedProduct = <span class="literal">null</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//默认查询列表数据</span></div><div class="line">	$scope.listProducts();</div><div class="line">&#125;]);</div></pre></td></tr></table></figure>
<p>  这里不深入讨论该清单代码（后面详细讲解），只介绍部分重点代码。<br>  首先，<code>$resource</code>服务是建立在<code>$http</code>服务所提供的特性的基础上的。这需要我启用withCredentials选项，我没有权限访问由<code>$http</code>服务产生的请求，但我可以使用模块上的config方法改变所有Ajax请求的默认设置。<br>  本例中最重要的一部分是下面这句代码：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$scope.productResource = $resource(productUrl+<span class="string">":id"</span>,&#123;id:<span class="string">"@id"</span>&#125;);</div></pre></td></tr></table></figure>
<p>  传入<code>$resource</code>的第一个参数用来定义将用于产生查询的URL格式。”:id”部分与第二个参数的映射对象一致，告诉AngularJS如果数据对象中有id属性，那它应该被添加到用于Ajax请求的URL中。用于访问RESTful的API的URL 和HTTP方法是由这两个参数推断出的。<br>  访问对象是由<code>$resource</code>服务的结果，有query、get、delete、remove和save方法。调用这些方法触发执行相应操作的Ajax请求。</p>
</li>
<li><p>定义视图<br>  现在，我将视图<code>adminProducts.html</code>的占位内容替换为以下内容：</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">	<span class="selector-id">#productTable</span>&#123;<span class="attribute">width</span>: auto;&#125;</div><div class="line">	<span class="selector-id">#productTable</span> <span class="selector-tag">td</span>&#123;<span class="attribute">max-width</span>: <span class="number">150px</span>;<span class="attribute">text-overflow</span>: ellipsis;<span class="attribute">overflow</span>: hidden;<span class="attribute">white-space</span>: nowrap;&#125;</div><div class="line">	<span class="selector-id">#productTable</span> <span class="selector-tag">td</span> <span class="selector-tag">input</span>&#123;<span class="attribute">max-width</span>: <span class="number">125px</span>;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"productCtrl"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-striped table-bordered"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">th</span>&gt;</span>产品名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">th</span>&gt;</span>产品描述<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">th</span>&gt;</span>产品目录<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">th</span>&gt;</span>产品价格<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tr</span> <span class="attr">ng-repeat</span>=<span class="string">"item in products"</span> <span class="attr">ng-hide</span>=<span class="string">"item.id == editedProduct.id"</span> &gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"description"</span>&gt;</span>&#123;&#123;item.description&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.category&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.price | currency&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">ng-click</span>=<span class="string">"startEdit(item);"</span> <span class="attr">class</span>=<span class="string">"btn btn-xs btn-primary"</span>&gt;</span></div><div class="line">					编辑</div><div class="line">				<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">ng-click</span>=<span class="string">"deleteProduct(item);"</span> <span class="attr">class</span>=<span class="string">"btn btn-xs btn-danger"</span>&gt;</span></div><div class="line">					删除</div><div class="line">				<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tr</span> <span class="attr">ng-class</span>=<span class="string">"&#123;danger:editedProduct&#125;"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"editedProduct.name"</span> <span class="attr">required</span>=<span class="string">"required"</span> /&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"editedProduct.description"</span> <span class="attr">required</span>=<span class="string">"required"</span> /&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"editedProduct.category"</span> <span class="attr">required</span>=<span class="string">"required"</span> /&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"editedProduct.price"</span> <span class="attr">required</span>=<span class="string">"required"</span> /&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">ng-hide</span>=<span class="string">"editedProduct.id"</span> <span class="attr">ng-click</span>=<span class="string">"createProduct(editedProduct);"</span> <span class="attr">class</span>=<span class="string">"btn btn-xs btn-primary"</span>&gt;</span></div><div class="line">					创建</div><div class="line">				<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">ng-show</span>=<span class="string">"editedProduct.id"</span> <span class="attr">ng-click</span>=<span class="string">"updateProduct(editedProduct);"</span> <span class="attr">class</span>=<span class="string">"btn btn-xs btn-primary"</span>&gt;</span></div><div class="line">					保存</div><div class="line">				<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">ng-show</span>=<span class="string">"editedProduct"</span> <span class="attr">ng-click</span>=<span class="string">"cancelEdit(editedProduct);"</span> <span class="attr">class</span>=<span class="string">"btn btn-xs btn-danger"</span>&gt;</span></div><div class="line">					取消</div><div class="line">				<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>添加HTML文件的引用<br>  剩下的就是在admin.html文件中添加<code>script</code>元素来引入新模块和新控制器并更新主应用程序模块，依赖于<code>ngResource</code>，下面是admin.html文件修改后的内容：</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">ng-app</span>=<span class="string">"sportsStoreAdmin"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"angular.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"ngmodules/angular-route.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"ngmodules/angular-resource.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"bootstrap.css"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"bootstrap-theme.css"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">			angular.module(<span class="string">"sportsStoreAdmin"</span>,[<span class="string">"ngRoute"</span>,<span class="string">"ngResource"</span>])</div><div class="line">			.config([<span class="string">"$routeProvider"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$routeProvider</span>)</span>&#123;</div><div class="line">				$routeProvider.when(<span class="string">"/login"</span>,&#123;</div><div class="line">					templateUrl : <span class="string">"views/adminLogin.html"</span></div><div class="line">				&#125;);</div><div class="line">				$routeProvider.when(<span class="string">"/main"</span>,&#123;</div><div class="line">					templateUrl : <span class="string">"views/adminMain.html"</span></div><div class="line">				&#125;);</div><div class="line">				$routeProvider.otherwise(&#123;</div><div class="line">					redirectTo : <span class="string">"/login"</span></div><div class="line">				&#125;);</div><div class="line">			&#125;])</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"controllers/adminControllers.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"controllers/adminProductController.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">ng-view</span>&gt;</span><span class="tag">&lt;/<span class="name">ng-view</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>  现在，一个简单但完整的运动商店应用程序已经完成。你可以从<code>https://github.com/heji1993/angular-sportsstore.git</code>下载完整代码。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在本章中，我会收集并验证运输详情以完成运动商店应用程序，并把订单存储在Deployd服务器上。我还会创建管理应用程序，让认证的用户看到订单并管理产品目录。&lt;/p&gt;
    
    </summary>
    
      <category term="AngularJS" scheme="http://heji.website/categories/AngularJS/"/>
    
    
      <category term="AngularJS" scheme="http://heji.website/tags/AngularJS/"/>
    
  </entry>
  
  <entry>
    <title>第五章、运动商店：导航和结账</title>
    <link href="http://heji.website/2017/03/06/%E7%AC%AC%E4%BA%94%E7%AB%A0%E3%80%81%E8%BF%90%E5%8A%A8%E5%95%86%E5%BA%97%EF%BC%9A%E5%AF%BC%E8%88%AA%E5%92%8C%E7%BB%93%E8%B4%A6/"/>
    <id>http://heji.website/2017/03/06/第五章、运动商店：导航和结账/</id>
    <published>2017-03-06T06:39:25.214Z</published>
    <updated>2017-03-06T06:44:44.431Z</updated>
    
    <content type="html"><![CDATA[<p>在本章中，我将通过添加对真实数据的支持，实现购物车并开始订单结账的过程，继续运动商店应用程序的开发。</p>
<a id="more"></a>
<h2 id="使用真实数据-请先启动Deployd"><a href="#使用真实数据-请先启动Deployd" class="headerlink" title="使用真实数据(请先启动Deployd )"></a>使用真实数据(请先启动Deployd )</h2><h3 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h3><p> AngularJS通过服务<code>$http</code>提供对产生Ajax请求的支持，后续章节讲述服务的工作细节以及<code>$http</code>本身。下面是修改后的<code>controllers/sportsStore.js</code>文件。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">//module方法值传一个参数表示我们尝试找到sportsStore这个模块,必须先有sportsStore模块,否则会报错</span></div><div class="line">angular.module(<span class="string">"sportsStore"</span>)</div><div class="line">.constant(<span class="string">"dataUrl"</span>,<span class="string">"http://localhost:5550/products"</span>)</div><div class="line">.controller(<span class="string">"sportsStoreCtrl"</span>,[<span class="string">"$scope"</span>,<span class="string">"$http"</span>,<span class="string">"dataUrl"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope,$http,dataUrl</span>)</span>&#123;</div><div class="line">	$scope.data = &#123;&#125;;</div><div class="line">	<span class="comment">//使用$http服务查询数据</span></div><div class="line">	$http.get(dataUrl)</div><div class="line">	.success(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</div><div class="line">		$scope.data.products = result;</div><div class="line">	&#125;)</div><div class="line">	.error(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</div><div class="line">		$scope.data.error = error;</div><div class="line">	&#125;)</div><div class="line">&#125;])</div></pre></td></tr></table></figure>
<h3 id="处理错误"><a href="#处理错误" class="headerlink" title="处理错误"></a>处理错误</h3><p>当有错误时，应该在页面显示错误信息，为此，需要对<code>app.html</code>页面进行修改，下面是修改的部分代码：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">    &lt;header class="navbar navbar-inverse"&gt;</div><div class="line">		&lt;a href="#" class="navbar-brand"&gt;运动商店&lt;/a&gt;</div><div class="line">	&lt;/header&gt;</div><div class="line">	&lt;!--有错误时显示--&gt;</div><div class="line">	&#123;&#123;data.error.status&#125;&#125;</div><div class="line">	&lt;section class="alert alert-danger" ng-show="data.error"&gt;</div><div class="line">		Error (&#123;&#123;data.error.status&#125;&#125;).The product data was not loaded.</div><div class="line">		&lt;a href="/app.html" class="alert-link"&gt;Click here to try again&lt;/a&gt;</div><div class="line">	&lt;/section&gt;</div><div class="line">	&lt;!--没有错误时显示--&gt;</div><div class="line">	&lt;section class="panel panel-default row" ng-controller="productListCtrl" ng-hide="data.error"&gt;</div><div class="line">...</div></pre></td></tr></table></figure>
<h2 id="创建局部视图"><a href="#创建局部视图" class="headerlink" title="创建局部视图"></a>创建局部视图</h2><p>在<code>app.html</code>文件中的HTML错综复杂，随着应用程序功能的增加，情况会变得更加糟糕，幸运的是，我们可以把<code>app.html</code>拆分成多个独立的文件，然后使用AngularJS提供的<code>ng-include</code>指令在运行时引入这些文件。为了这个目的，我创建了<code>views/productList.html</code>文件，下面是该文件的内容：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"panel panel-default row"</span> <span class="attr">ng-controller</span>=<span class="string">"productListCtrl"</span> <span class="attr">ng-hide</span>=<span class="string">"data.error"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"col-xs-3"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">ng-click</span>=<span class="string">"selectCategory()"</span> <span class="attr">class</span>=<span class="string">"btn btn-block btn-default"</span> </span></div><div class="line">			<span class="attr">ng-class</span>=<span class="string">"getCategoryClass()"</span>&gt;Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--先对商品按目录进行排序,然后再返回去重后的目录--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">ng-repeat</span>=<span class="string">"item in data.products | orderBy:'category' | unique:'category'"</span></span></div><div class="line">			<span class="attr">ng-click</span>=<span class="string">"selectCategory(item)"</span> <span class="attr">class</span>=<span class="string">"btn btn-block btn-default btn-lg"</span> </div><div class="line">			<span class="attr">ng-class</span>=<span class="string">"getCategoryClass(item)"</span>&gt;&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">nav</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-8"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--遍历添加商品--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"well"</span> <span class="attr">ng-repeat</span>=<span class="string">"item in data.products | filter:categoryFilterFn | range:selectedPage:pageSize"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">h3</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></div><div class="line">				<span class="comment">&lt;!--使用金额过滤器，将数值转换为金额--&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"pull-right label label-primary"</span>&gt;</span></div><div class="line">					&#123;&#123;item.price | currency&#125;&#125;</div><div class="line">				<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"lead"</span>&gt;</span>&#123;&#123;item.description &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pull-right btn-group"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">ng-repeat</span>=<span class="string">"page in data.products | filter:categoryFilterFn | pageCount:pageSize"</span></span></div><div class="line">				<span class="attr">ng-click</span>=<span class="string">"selectPage($index + 1)"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">ng-class</span>=<span class="string">"getPageClass($index + 1)"</span>&gt;</div><div class="line">				&#123;&#123;$index + 1&#125;&#125;</div><div class="line">			<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>下面是<code>app.html</code>文件的内容：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">ng-app</span>=<span class="string">"sportsStore"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>SportsStore<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"angular.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"bootstrap.css"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"bootstrap-theme.css"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">			<span class="comment">//依赖customFilter模块</span></div><div class="line">			angular.module(<span class="string">"sportsStore"</span>,[<span class="string">"customFilter"</span>]);</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--引入顶级控制器--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"controllers/sportsStore.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--引入自定义过滤器--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"filters/customFilters.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--引入产品列表控制器--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"controllers/productListController.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!--使用控制器--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-controller</span>=<span class="string">"sportsStoreCtrl"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"navbar navbar-inverse"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span>&gt;</span>运动商店<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">header</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--有错误时显示--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"alert alert-danger"</span> <span class="attr">ng-show</span>=<span class="string">"data.error"</span>&gt;</span></div><div class="line">			Error (&#123;&#123;data.error.status&#125;&#125;).The product data was not loaded.</div><div class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/app.html"</span> <span class="attr">class</span>=<span class="string">"alert-link"</span>&gt;</span>Click here to try again<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">ng-include</span> <span class="attr">src</span>=<span class="string">"'views/productList.html'"</span>&gt;</span><span class="tag">&lt;/<span class="name">ng-include</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>注意：当AngularJS遇到ng-include指令时，它会产生Ajax请求，载入src属性所指定的文件，并插入其内容以替换该元素。在使用ng-include指令时，我将文件名写成单引号的字面量。如果我不这么做，那指令会在作用域属性上寻找文件名</strong></p>
<h2 id="创建购物车"><a href="#创建购物车" class="headerlink" title="创建购物车"></a>创建购物车</h2><p>用户能看到我的有效产品，但我没有购物车就没法出售任何东西。在本段中，我将构建购物车功能，下图是它的基本流程：<br><img src="imgs/1486461273494_2.png" alt=""><br>实现购物车特性需要若干组改动，包括创建自定义的AngularJS组件。</p>
<h3 id="定义购物车模块和服务"><a href="#定义购物车模块和服务" class="headerlink" title="定义购物车模块和服务"></a>定义购物车模块和服务</h3><p>通常，我们习惯把控制器放在<code>controllers</code>目录，过滤器放在<code>filters</code>目录下，视图放在<code>views</code>目录下等。我们也可以根据具体情况，把实现某一功能的全部代码写成一个组件，为此，我定义了<code>components</code>文件夹专门存放自定义的组件。在本例中，我将创建购物车模块。我首先创建<code>components/cart</code>目录，并向其添加新的javascript文件<code>cart.js</code>，下面是<code>cart.js</code>文件的内容：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">"cart"</span>,[])</div><div class="line">.factory(<span class="string">"cartService"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> cartData = [];</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		<span class="comment">//添加产品</span></div><div class="line">		addProduct : <span class="function"><span class="keyword">function</span>(<span class="params">id,name,price</span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> addToExistingItem = <span class="literal">false</span>;</div><div class="line">			<span class="comment">//如果已经存在相同id的产品,只增加其数量</span></div><div class="line">			<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; cartData.length ; i++)&#123;</div><div class="line">				<span class="keyword">if</span>(cartData[i].id == id)&#123;</div><div class="line">					cartData[i].count ++;</div><div class="line">					addToExistingItem = <span class="literal">true</span>;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span>(!addToExistingItem)&#123;</div><div class="line">				cartData.push(&#123;</div><div class="line">					count:<span class="number">1</span>,id:id,price:price,name:name</div><div class="line">				&#125;);</div><div class="line">			&#125;</div><div class="line">		&#125;,</div><div class="line">		<span class="comment">//移除产品</span></div><div class="line">		removeProduct : <span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>&#123;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; cartData.length ; i++)&#123;</div><div class="line">				<span class="keyword">if</span>(cartData[i].id == id)&#123;</div><div class="line">					cartData.splice(i,<span class="number">1</span>);</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;,</div><div class="line">		<span class="comment">//获取所有产品</span></div><div class="line">		getProducts : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">return</span> cartData;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>我先在新模块<code>cart</code>自定义了<code>cartService</code>服务，创建服务有不同的方法，比如<code>service</code>、<code>factory</code>和<code>provider</code>，后面讲讲解它们的区别。创建服务第一个参数是服务名，第二个参数是工厂函数，在服务被注入应用于应用程序时，工厂函数只被调用一次(第一次注入时调用)。在本例中，我的cart服务工厂函数返回对象，对象有三个方法，下面是<code>cartService</code>服务所定义的方法：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>addProduct(id,name,price)</td>
<td>添加指定的产品到购物车，或者如果购物车以及包含该产品，就增加产品的数量</td>
</tr>
<tr>
<td>removeProduct(id)</td>
<td>删除指定ID的产品</td>
</tr>
<tr>
<td>getProducts()</td>
<td>返回购物车中所有商品</td>
</tr>
</tbody>
</table>
<h3 id="创建购物车部件"><a href="#创建购物车部件" class="headerlink" title="创建购物车部件"></a>创建购物车部件</h3><p>我下一步要创建囊括购物车内容的部件，提供给用户以开始结账流程，我将创建自定义指令来做。指令是自包含的，复用功能单元是AngularJS开发的核心。下面是我在<code>components/cart/cart.js</code>文件添加的内容：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="comment">//自定义cartSummary指令,依赖于cartService服务</span></div><div class="line">.directive(<span class="string">"cartSummary"</span>,[<span class="string">"cartService"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">cartService</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		restrict : <span class="string">"E"</span>,</div><div class="line">		templateUrl : <span class="string">"components/cart/cartSummary.html"</span>,</div><div class="line">		controller : [<span class="string">"$scope"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> cartData = cartService.getProducts();</div><div class="line">			<span class="comment">//计算购物车商品总价</span></div><div class="line">			$scope.total = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="keyword">var</span> total = <span class="number">0</span>;</div><div class="line">				<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; cartData.length ; i++)&#123;</div><div class="line">					total += (cartData[i].count * cartData[i].price);</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">return</span> total;</div><div class="line">			&#125;</div><div class="line">			<span class="comment">//计算购物车商品总数</span></div><div class="line">			$scope.itemCount = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="keyword">var</span> total = <span class="number">0</span>;</div><div class="line">				<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; cartData.length ; i++)&#123;</div><div class="line">					total += cartData[i].count;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">return</span> total;</div><div class="line">			&#125;</div><div class="line">		&#125;]</div><div class="line">	&#125;</div><div class="line">&#125;]);</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>指令由AngularJS模块上的 directive方法创建，第一个参数是指令名（驼峰式命名），第二个参数是返回指令释义对象的工厂函数。指令释义对象定义属性告诉AngularJS你的指令做什么和如何做。我在定义cartSummary指令时指定了三个属性，下面是三个属性的说明（后续章节讲解并演示整套属性）</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>restrict</td>
<td>指定指令如果应用，E值表示指令只能作为元素使用，A值表示指令只能作为属性使用，EA表示指令可作为元素或属性使用</td>
</tr>
<tr>
<td>templateUrl</td>
<td>指定将被插入指令的元素内容的局部视图</td>
</tr>
<tr>
<td>controller</td>
<td>指定向局部视图提供数据和行为的控制器</td>
</tr>
</tbody>
</table>
<p>简单地说，我的指令释义定义了控制器，告诉AngularJS使用<code>components/cart/cartSummary.html</code>视图，还有约束指令，让其可以仅作为元素而被使用。<br>另外，因为我使用了<code>cartService</code>服务，需要注入服务。我又在指令的控制器定义了两个行为<code>total</code>和<code>itemCount</code>，这让我可以直接在局部视图内使用这些行为。下面是<code>components/cart/cartSummary.html</code>文件的内容：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;style type="text/css"&gt;</div><div class="line">	.navbar-right&#123;</div><div class="line">		float: right !important;</div><div class="line">		margin-right: 5px; </div><div class="line">	&#125;</div><div class="line">	.navbar-text&#123;</div><div class="line">		margin-right: 10px;</div><div class="line">	&#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;div class="navbar-right"&gt;</div><div class="line">	&lt;div class="navbar-text"&gt;</div><div class="line">		&lt;b&gt;Your cart:&lt;/b&gt;</div><div class="line">		&#123;&#123;itemCount()&#125;&#125; item(s),</div><div class="line">		&#123;&#123;total() | currency&#125;&#125;</div><div class="line">	&lt;/div&gt;</div><div class="line">	&lt;!--按钮功能后面实现--&gt;</div><div class="line">	&lt;a href="#" class="btn btn-default navbar-btn"&gt;Checkout&lt;/a&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>下面在<code>app.html</code>应用模块：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="comment">//依赖customFilter模块</span></div><div class="line">	angular.module(<span class="string">"sportsStore"</span>,[<span class="string">"customFilter"</span>,<span class="string">"cart"</span>]);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--引入顶级控制器--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"controllers/sportsStore.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--引入自定义过滤器--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"filters/customFilters.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--引入产品列表控制器--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"controllers/productListController.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--引入购物车模块--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"components/cart/cart.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">...</div><div class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"navbar navbar-inverse"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span>&gt;</span>运动商店<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">cart-summary</span>&gt;</span><span class="tag">&lt;/<span class="name">cart-summary</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></div><div class="line">...</div></pre></td></tr></table></figure></p>
<h3 id="添加产品选择按钮"><a href="#添加产品选择按钮" class="headerlink" title="添加产品选择按钮"></a>添加产品选择按钮</h3><p>我下一步是在产品详情添加按钮，让用户可以添加产品到购物车，下面是我对<code>controllers/productListController.js</code>文件所做的修改：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="comment">//控制器注入cartService模块</span></div><div class="line">.controller(<span class="string">"productListCtrl"</span>,[<span class="string">"$scope"</span>,<span class="string">"$filter"</span>,<span class="string">"productListActiveClass"</span>,<span class="string">"productListPageCount"</span>,<span class="string">"cartService"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope,$filter,productListActiveClass,productListPageCount,cartService</span>)</span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="comment">//往购物车添加商品</span></div><div class="line">	$scope.addProductToCart = <span class="function"><span class="keyword">function</span>(<span class="params">product</span>)</span>&#123;</div><div class="line">		cartService.addProduct(product.id,product.name,product.price);</div><div class="line">	&#125;</div><div class="line">&#125;]);</div></pre></td></tr></table></figure></p>
<p>我声明了对<code>cartService</code>的依赖，并定义了行为<code>addProductToCart</code>用于往购物车添加商品。<br>然后，往局部视图<code>views/productList.html</code>添加按钮调用<code>addProductToCart</code>行为：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="comment">&lt;!--遍历添加商品--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"well"</span> <span class="attr">ng-repeat</span>=<span class="string">"item in data.products | filter:categoryFilterFn | range:selectedPage:pageSize"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">h3</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--使用金额过滤器，将数值转换为金额--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"pull-right label label-primary"</span>&gt;</span></div><div class="line">			&#123;&#123;item.price | currency&#125;&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!--产品选择按钮--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-success pull-right"</span> <span class="attr">ng-click</span>=<span class="string">"addProductToCart(item)"</span>&gt;</span>Add to cart<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"lead"</span>&gt;</span>&#123;&#123;item.description &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>现在，你可以往购物车添加商品并自动计算购物车商品的数量和总价。</p>
<h2 id="添加URL导航"><a href="#添加URL导航" class="headerlink" title="添加URL导航"></a>添加URL导航</h2><p>在添加结账功能的支持之前，我要加强运动商店应用程序的基础设施，添加URL路由的支持。我会在后续章节详细介绍路由，简单地说，路由可以基于当前的URL自动地显示不同的局部视图。这使得它更易于建立更大的应用程序。<br>为实现路由功能，我先创建结账页面的局部视图，因为还没开始开阿发结账流程，所以局部视图只包含简单的占位符。下面是<code>views/checkoutSunmary.html</code>页面的内容：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"lead"</span>&gt;</span></div><div class="line">	This is the checkout summary view</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/products"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>返回<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="定义和使用URL路由"><a href="#定义和使用URL路由" class="headerlink" title="定义和使用URL路由"></a>定义和使用URL路由</h3><p>现在，我需要分别映射<code>/product</code>和<code>/checkout</code>到<code>productList.html</code>页面和<code>checkoutSummary.html</code>页面，其他的URL都默认映射到<code>productList.html</code>页面，下面是<code>app.html</code>文件的改动:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="comment">//依赖customFilter模块、cart模块和ngRoute模块</span></div><div class="line">	angular.module(<span class="string">"sportsStore"</span>,[<span class="string">"customFilter"</span>,<span class="string">"cart"</span>,<span class="string">"ngRoute"</span>])</div><div class="line">	<span class="comment">//配置路由</span></div><div class="line">	.config([<span class="string">"$routeProvider"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$routeProvider</span>)</span>&#123;</div><div class="line">		$routeProvider.when(<span class="string">"/checkout"</span>,&#123;</div><div class="line">			templateUrl:<span class="string">"views/checkoutSunmary.html"</span></div><div class="line">		&#125;)</div><div class="line">		.when(<span class="string">"/pruducts"</span>,&#123;</div><div class="line">			templateUrl:<span class="string">"views/productList.html"</span></div><div class="line">		&#125;)</div><div class="line">		.otherwise(&#123;</div><div class="line">			templateUrl:<span class="string">"views/productList.html"</span></div><div class="line">		&#125;);</div><div class="line">	&#125;]);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--引入顶级控制器--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"controllers/sportsStore.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--引入自定义过滤器--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"filters/customFilters.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--引入产品列表控制器--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"controllers/productListController.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--引入购物车模块--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"components/cart/cart.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--引入路由模块--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"ngmodules/angular-route.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">...</div><div class="line"><span class="comment">&lt;!--有错误时显示--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"alert alert-danger"</span> <span class="attr">ng-show</span>=<span class="string">"data.error"</span>&gt;</span></div><div class="line">	出现错误 (&#123;&#123;data.error.status&#125;&#125;).商品的数据不能加载.</div><div class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/app.html"</span> <span class="attr">class</span>=<span class="string">"alert-link"</span>&gt;</span>点击这里再次尝试<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ng-view</span>&gt;</span><span class="tag">&lt;/<span class="name">ng-view</span>&gt;</span></div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>在<code>cartSummary.html</code>页面点击结账按钮需要跳转到结账页面，为此，需要对<code>components/cart/cartSummary.html</code>进行跳转：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="comment">&lt;!--按钮功能后面实现--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/checkout"</span> <span class="attr">class</span>=<span class="string">"btn btn-default navbar-btn"</span>&gt;</span>back<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">...</div></pre></td></tr></table></figure></p>
<h2 id="开始结账流程"><a href="#开始结账流程" class="headerlink" title="开始结账流程"></a>开始结账流程</h2><p>现在，我将转向结账流程。我的第一个任务是定义新的控制器<code>cartSummaryCtrl</code>，我把它放在<code>controllers/checkoutController.js</code>文件。因为cartSummary指令需要使用计算总价和商品数量的行为，<code>cartSummaryCtrl</code>也需要使用计算总价行为，为此，我修改<code>components/cart/cart.js</code>文件，把这些行为定义在<code>cartService</code>内，下面是修改后的<code>components/cart/cart.js</code>文件：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">"cart"</span>,[])</div><div class="line">.factory(<span class="string">"cartService"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> cartData = [];</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		<span class="comment">//添加产品</span></div><div class="line">		addProduct : <span class="function"><span class="keyword">function</span>(<span class="params">id,name,price</span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> addToExistingItem = <span class="literal">false</span>;</div><div class="line">			<span class="comment">//如果已经存在相同id的产品,只增加其数量</span></div><div class="line">			<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; cartData.length ; i++)&#123;</div><div class="line">				<span class="keyword">if</span>(cartData[i].id == id)&#123;</div><div class="line">					cartData[i].count ++;</div><div class="line">					addToExistingItem = <span class="literal">true</span>;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span>(!addToExistingItem)&#123;</div><div class="line">				cartData.push(&#123;</div><div class="line">					count:<span class="number">1</span>,id:id,price:price,name:name</div><div class="line">				&#125;);</div><div class="line">			&#125;</div><div class="line">		&#125;,</div><div class="line">		<span class="comment">//移除产品</span></div><div class="line">		removeProduct : <span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>&#123;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; cartData.length ; i++)&#123;</div><div class="line">				<span class="keyword">if</span>(cartData[i].id == id)&#123;</div><div class="line">					cartData.slice(i,<span class="number">1</span>);</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;,</div><div class="line">		<span class="comment">//获取所有产品</span></div><div class="line">		getProducts : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">return</span> cartData;</div><div class="line">		&#125;,</div><div class="line">		<span class="comment">//计算购物车商品总价</span></div><div class="line">		total : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> total = <span class="number">0</span>;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; cartData.length ; i++)&#123;</div><div class="line">				total += (cartData[i].count * cartData[i].price);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> total;</div><div class="line">		&#125;,</div><div class="line">		<span class="comment">//计算购物车商品总数</span></div><div class="line">		itemCount : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> total = <span class="number">0</span>;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; cartData.length ; i++)&#123;</div><div class="line">				total += cartData[i].count;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> total;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;)</div><div class="line"><span class="comment">//自定义cartSummary指令,依赖于cartService服务</span></div><div class="line">.directive(<span class="string">"cartSummary"</span>,[<span class="string">"cartService"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">cartService</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		restrict : <span class="string">"E"</span>,</div><div class="line">		templateUrl : <span class="string">"components/cart/cartSummary.html"</span>,</div><div class="line">		controller : [<span class="string">"$scope"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> cartData = cartService.getProducts();</div><div class="line">			<span class="comment">//计算购物车商品总价</span></div><div class="line">			$scope.total = cartService.total;</div><div class="line">			<span class="comment">//计算购物车商品总数</span></div><div class="line">			$scope.itemCount = cartService.itemCount;</div><div class="line">		&#125;]</div><div class="line">	&#125;</div><div class="line">&#125;]);</div></pre></td></tr></table></figure></p>
<p>下面是<code>controllers/checkoutController.js</code>文件的内容：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">"sportsStore"</span>)</div><div class="line">.controller(<span class="string">"cartSummaryCtrl"</span>,[<span class="string">"$scope"</span>,<span class="string">"cartService"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope,cartService</span>)</span>&#123;</div><div class="line">	<span class="comment">//获取购物车所有商品</span></div><div class="line">	$scope.cartData = cartService.getProducts();</div><div class="line">	<span class="comment">//计算商品总价</span></div><div class="line">	$scope.total = cartService.total;</div><div class="line">	<span class="comment">//移除商品</span></div><div class="line">	$scope.remove = cartService.removeProduct;</div><div class="line">&#125;]);</div></pre></td></tr></table></figure></p>
<p>为应用控制器，实现结账流程，我需要对<code>views/checkoutSunmary.html</code>文件进行修改，下面是修改后的内容：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我的购物车<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"cartSummaryCtrl"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-warning"</span> <span class="attr">ng-show</span>=<span class="string">"cartData.length == 0"</span>&gt;</span></div><div class="line">		你的购物车没有商品，点击<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/products"</span> <span class="attr">class</span>=<span class="string">"alert-link"</span>&gt;</span>这里<span class="tag">&lt;/<span class="name">a</span>&gt;</span>返回购物。</div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-hide</span>=<span class="string">"cartData.length == 0"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">thead</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span>数量<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">th</span>&gt;</span>商品名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">"text-right"</span>&gt;</span>商品单价<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">"text-right"</span>&gt;</span>商品总价<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">thead</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">tbody</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span> <span class="attr">ng-repeat</span>=<span class="string">"item in cartData"</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span>&#123;&#123;item.count&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"text-left"</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"text-right"</span>&gt;</span>&#123;&#123;item.price | currency&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"text-right"</span>&gt;</span>&#123;&#123;(item.price * item.count) | currency&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-click</span>=<span class="string">"remove(item.id)"</span> <span class="attr">class</span>=<span class="string">"btn btn-sm btn-warning"</span>&gt;</span>移除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"4"</span> <span class="attr">class</span>=<span class="string">"text-right"</span>&gt;</span>总计：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"text-left"</span>&gt;</span></div><div class="line">						&#123;&#123;total() | currency&#125;&#125;</div><div class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/products"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>继续购物<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/placeorder"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>支付<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span>	</div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>接着，我需要在<code>app.html</code>引入控制器并添加支付路由、感谢页面路由，这两个页面我在接下来的章节会补充，下面是<code>app.html</code>修改的内容：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="comment">//依赖customFilter模块、cart模块和ngRoute模块</span></div><div class="line">	angular.module(<span class="string">"sportsStore"</span>,[<span class="string">"customFilter"</span>,<span class="string">"cart"</span>,<span class="string">"ngRoute"</span>])</div><div class="line">	<span class="comment">//配置路由</span></div><div class="line">	.config([<span class="string">"$routeProvider"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$routeProvider</span>)</span>&#123;</div><div class="line">		$routeProvider.when(<span class="string">"/checkout"</span>,&#123;</div><div class="line">			templateUrl:<span class="string">"views/checkoutSunmary.html"</span></div><div class="line">		&#125;)</div><div class="line">		.when(<span class="string">"/placeorder"</span>,&#123;</div><div class="line">			templateUrl:<span class="string">"views/placeorder.html"</span></div><div class="line">		&#125;)</div><div class="line">		.when(<span class="string">"/complete"</span>,&#123;</div><div class="line">			templateUrl:<span class="string">"views/thankYou.html"</span></div><div class="line">		&#125;)</div><div class="line">		.when(<span class="string">"/pruducts"</span>,&#123;</div><div class="line">			templateUrl:<span class="string">"views/productList.html"</span></div><div class="line">		&#125;)</div><div class="line">		.otherwise(&#123;</div><div class="line">			templateUrl:<span class="string">"views/productList.html"</span></div><div class="line">		&#125;);</div><div class="line">	&#125;]);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--引入顶级控制器--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"controllers/sportsStore.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--引入自定义过滤器--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"filters/customFilters.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--引入产品列表控制器--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"controllers/productListController.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--引入购物车模块--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"components/cart/cart.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--引入路由模块--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"ngmodules/angular-route.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--引入结账控制器--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"controllers/checkoutController.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">...</div></pre></td></tr></table></figure></p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>在本章中，我继续了运动商店应用程序的开发，从Deployd服务器获取产品数据，添加局部视图的支持，以及实现自定义指令，我还设置了URL路由并添加允许用户下单的功能。在下一章，我将完成运动商店应用程序并添加管理系统的支持。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在本章中，我将通过添加对真实数据的支持，实现购物车并开始订单结账的过程，继续运动商店应用程序的开发。&lt;/p&gt;
    
    </summary>
    
      <category term="AngularJS" scheme="http://heji.website/categories/AngularJS/"/>
    
    
      <category term="AngularJS" scheme="http://heji.website/tags/AngularJS/"/>
    
  </entry>
  
  <entry>
    <title>CSS3制作消息提示框</title>
    <link href="http://heji.website/2017/02/22/CSS3%E5%88%B6%E4%BD%9C%E6%B6%88%E6%81%AF%E6%8F%90%E7%A4%BA%E6%A1%86/"/>
    <id>http://heji.website/2017/02/22/CSS3制作消息提示框/</id>
    <published>2017-02-22T02:54:41.758Z</published>
    <updated>2017-02-22T03:00:27.841Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍使用CSS3制作实用消息提示框。</p>
<p>三角提示框，就是下面所示：<br><img src="imgs/1487729518342_2.png" alt=""><br>我们来研究下如何用CSS实现。<br>假定有一个盒子(div)，给定宽高分别为100像素，再给定边框50像素，那么它看起来会是下面这个样子(为了更直观，给了边框四种不同的颜色)：<br><img src="imgs/1487729572015_3.png" alt=""><br><strong>注意：box-sizing默认为content-box，即在宽度和高度之外绘制元素的内边距和边框</strong><br>接下来，把盒子的高度设为0：<br><img src="imgs/1487729733577_4.png" alt=""><br>再把宽度也设为0：<br><img src="imgs/1487729746624_5.png" alt=""><br>这样雏形就已经出来了，由于IE6的bug(高度为0的div会有一定默认的高度，我的电脑上测量结果为19像素)，需要做一些小调整，给div加一个overflow:hidden，IE6就能正确解析了。<br>接下来的工作就是去掉其余的三个边框。以向上箭头为例，假如我想让箭头朝上，那么就需要将左、上、右三条边框的颜色给去掉。一个常规的方法是将这三条边框的颜色设为透明，即transparent属性。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*设置三个值时，第一个值是上边框颜色，第二个值是右左边框颜色，第三个值是下边框颜色*/</span></div><div class="line"><span class="selector-tag">border-color</span><span class="selector-pseudo">:transparent</span> <span class="selector-tag">transparent</span> <span class="selector-id">#056F61</span></div></pre></td></tr></table></figure></p>
<p>设置以后可以看到如下效果：<br><img src="imgs/1487729865921_6.png" alt=""><br>这样CSS制作的三角形就完成了。到这里看起来工作好像差不多可以结束的样子，还需要测试一下浏览器的兼容性，经过测试，主流浏览器都支持，但是打开IE6，结果悲催了，居然是这个样子：<br><img src="imgs/1487729887192_7.png" alt=""><br>排查一下哪个地方出了问题，才发现原来IE6不支持transparent属性，之后再研究了一下，发现如果将其余三条边的属性由solid改为dotted或者dashed就可以了(原理请自行谷歌)：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*border-style:solid*/</span></div><div class="line"><span class="selector-tag">border-style</span><span class="selector-pseudo">:dotted</span> <span class="selector-tag">dotted</span> <span class="selector-tag">solid</span>;</div><div class="line"><span class="selector-tag">border-width</span><span class="selector-pseudo">:50px</span>;</div><div class="line"><span class="selector-tag">border-color</span><span class="selector-pseudo">:transparent</span> <span class="selector-tag">transparent</span> <span class="selector-id">#056f61</span>;</div></pre></td></tr></table></figure></p>
<p>下面附上完整代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">			<span class="selector-class">.tips</span>&#123;</div><div class="line">				<span class="attribute">position</span>: relative;</div><div class="line">				<span class="attribute">background-color</span>: <span class="number">#245</span>;</div><div class="line">				<span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">				<span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">				<span class="attribute">display</span>: inline-block;</div><div class="line">				<span class="attribute">border-radius</span>: <span class="number">10px</span>;</div><div class="line">				<span class="attribute">margin-top</span>: <span class="number">100px</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="selector-class">.tips</span><span class="selector-pseudo">:after</span>&#123;</div><div class="line">				<span class="attribute">position</span>: absolute;</div><div class="line">				<span class="attribute">border-width</span>: <span class="number">20px</span>;</div><div class="line">				<span class="attribute">border-color</span>: transparent transparent <span class="number">#245</span>;</div><div class="line">				<span class="attribute">bottom</span>: <span class="number">100px</span>;</div><div class="line">				<span class="attribute">right</span>: <span class="number">30px</span>;</div><div class="line">				<span class="attribute">content</span>: <span class="string">""</span>;</div><div class="line">				<span class="attribute">height</span>: <span class="number">0</span>;</div><div class="line">				<span class="attribute">width</span>: <span class="number">0</span>;</div><div class="line">				<span class="attribute">border-style</span>:dotted dotted solid;</div><div class="line">			&#125; </div><div class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"tips"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>效果如下所示：<br><img src="imgs/1487732263707_8.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍使用CSS3制作实用消息提示框。&lt;/p&gt;
&lt;p&gt;三角提示框，就是下面所示：&lt;br&gt;&lt;img src=&quot;imgs/1487729518342_2.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;我们来研究下如何用CSS实现。&lt;br&gt;假定有一个盒子(div)，给定宽高分别为100像
    
    </summary>
    
      <category term="CSS" scheme="http://heji.website/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://heji.website/tags/CSS/"/>
    
      <category term="CSS3" scheme="http://heji.website/tags/CSS3/"/>
    
      <category term="web前端" scheme="http://heji.website/tags/web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>第四章、真正的应用程序：运动商店</title>
    <link href="http://heji.website/2017/02/06/%E7%AC%AC%E5%9B%9B%E7%AB%A0%E3%80%81%E7%9C%9F%E6%AD%A3%E7%9A%84%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%EF%BC%9A%E8%BF%90%E5%8A%A8%E5%95%86%E5%BA%97/"/>
    <id>http://heji.website/2017/02/06/第四章、真正的应用程序：运动商店/</id>
    <published>2017-02-06T00:38:46.523Z</published>
    <updated>2017-02-06T00:58:44.502Z</updated>
    
    <content type="html"><![CDATA[<p>本章开始使用AngularJS开发一个真正的应用程序：运动商店，本章完成产品的展示、分页、分类导航功能，数据使用虚拟数据。</p>
<a id="more"></a>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h3><p>第一步是创建新的Deployd应用程序，你将需要创建目录来存储被生成的文件，我将目录命名为deployd。<br><strong>创建Deployd应用程序之前，你需要先安装Deployd和MongoDB</strong><br>Deployd安装见第一章。<br>MongoDB安装如下：</p>
<ol>
<li>从官网下载mongoDB.msi，双击安装，添加bin路径到系统环境变量</li>
<li><p>配置mongo服务</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongod.exe --bind_ip 127.0.0.1 --logpath <span class="string">"D:\MongoDB\data\dbConf\mongodb.log"</span> --logappend --dbpath <span class="string">"D:\MongoDB\data\db"</span> --port 5500 --serviceName <span class="string">"sportsstore"</span> --serviceDisplayName <span class="string">"sportsstore"</span> --install</div></pre></td></tr></table></figure>
<p> –logpath 以及 –dbpath  的路径可以自己配置，在运行命令之前先创建这些文件和文件夹</p>
</li>
</ol>
<p>切换到deployd目录，输入一下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dpd create  sportsstore</div></pre></td></tr></table></figure></p>
<p>启动新的服务器，输入以下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#-p 指定服务器端口，-P指定数据库端口号</span></div><div class="line">dpd -p 5550 -P 5500 sportsstore\app.dpd</div></pre></td></tr></table></figure></p>
<p>输入命令<code>dashboard</code>，将会打开dashboard资源配置网页。</p>
<ul>
<li><p>创建数据结构<br>  新建一个Collection命名为<code>/products</code>,添加如下属性：<br>  <table><tr><td>名称</td><td>类型</td><td>是否必须</td></tr><tr><td>name</td><td>string</td><td>是</td></tr><tr><td>description</td><td>string</td><td>是</td></tr><tr><td>category</td><td>string</td><td>是</td></tr><tr><td>price</td><td>string</td><td>是</td></tr></table>当你完成属性的添加，控制面板应该同下图一样。<br>  <img src="imgs/1485181604797_4.png" alt=""><br>  <strong>注意：Deployd增加了id属性，在数据库中这将被用于独一无二的识别对象。deployd会自动将唯一赋给id属性，并且我将依靠这些值在后续章节实现管理功能</strong></p>
</li>
<li><p>添加数据<br>  <img src="imgs/1485181646189_5.png" alt=""></p>
</li>
<li><p>测试数据服务<br>  测试Deployd被正确地配置并工作着，打开浏览器窗口并转到以下URL：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost:5550/products</div></pre></td></tr></table></figure>
<p>  如果顺利，添加的数据将会以JSON格式返回。</p>
</li>
</ul>
<h3 id="准备应用程序"><a href="#准备应用程序" class="headerlink" title="准备应用程序"></a>准备应用程序</h3><ul>
<li>创建目录结构<br>  你可以以你喜欢的任何方法组织构成AngularJS应用程序的文件。以angular-sportsstore为项目根目录，下面是我使用的目录结构：<br>   <img src="imgs/1485261919184_2.png" alt=""></li>
<li><p>构建基本大纲<br> 顶级HTML文件app.html包含结构标签以及引入我将使用的JavaScript库和CSS库，下面是app.html的代码：</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>SportsStore<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"angular.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"bootstrap.css"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"bootstrap-theme.css"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">			angular.module(<span class="string">"sportsStore"</span>,[]);</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"navbar navbar-inverse"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span>&gt;</span>SPORTS STORE<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">header</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"panel panel-default row"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"col-xs-3"</span>&gt;</span></div><div class="line">				Categories go here</div><div class="line">			<span class="tag">&lt;/<span class="name">nav</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-9"</span>&gt;</span></div><div class="line">				Products go here</div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="显示（伪造的）产品数据"><a href="#显示（伪造的）产品数据" class="headerlink" title="显示（伪造的）产品数据"></a>显示（伪造的）产品数据</h2><p>我将开始添加对显示产品数据的支持。我想一次只专注一个功能区域，所以我会定义伪造的初始本地数据。然后在下一章替换成Deployd服务器来的数据。</p>
<h3 id="创建控制器"><a href="#创建控制器" class="headerlink" title="创建控制器"></a>创建控制器</h3><p>我要创建的控制器将被用于整个应用程序（类似“顶级控制器”），顶级控制器单独一个文件，命名为<code>controllers/sportsStore.js</code>。下面是代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//module方法值传一个参数表示我们尝试找到sportsStore这个模块</span></div><div class="line">angular.module(<span class="string">"sportsStore"</span>)</div><div class="line">.controller(<span class="string">"sportsStoreCtrl"</span>,[<span class="string">"$scope"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</div><div class="line">	$scope.data = &#123;</div><div class="line">		products : [</div><div class="line">			&#123;name:<span class="string">"product1"</span>,description:<span class="string">"A product"</span>,category:<span class="string">"category1"</span>,price:<span class="number">100</span>&#125;,</div><div class="line">			&#123;name:<span class="string">"product2"</span>,description:<span class="string">"A product"</span>,category:<span class="string">"category1"</span>,price:<span class="number">110</span>&#125;,</div><div class="line">			&#123;name:<span class="string">"product3"</span>,description:<span class="string">"A product"</span>,category:<span class="string">"category2"</span>,price:<span class="number">210</span>&#125;,</div><div class="line">			&#123;name:<span class="string">"product4"</span>,description:<span class="string">"A product"</span>,category:<span class="string">"category3"</span>,price:<span class="number">199</span>&#125;</div><div class="line">		]</div><div class="line">	&#125;</div><div class="line">&#125;])</div></pre></td></tr></table></figure></p>
<h3 id="显示产品详情"><a href="#显示产品详情" class="headerlink" title="显示产品详情"></a>显示产品详情</h3><p>为了显示产品详情，需要向html文件添加一些HTML标签。AngularJS让显示数据很容易。下面是修改后的<code>app.html</code>文件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">ng-app</span>=<span class="string">"sportsStore"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>SportsStore<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"angular.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"bootstrap.css"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"bootstrap-theme.css"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">			angular.module(<span class="string">"sportsStore"</span>,[]);</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--引入顶级控制器--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"controllers/sportsStore.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!--使用控制器--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-controller</span>=<span class="string">"sportsStoreCtrl"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"navbar navbar-inverse"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span>&gt;</span>运动商店<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">header</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"panel panel-default row"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"col-xs-3"</span>&gt;</span></div><div class="line">				Categories go here</div><div class="line">			<span class="tag">&lt;/<span class="name">nav</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-8"</span>&gt;</span></div><div class="line">				<span class="comment">&lt;!--遍历添加商品--&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"well"</span> <span class="attr">ng-repeat</span>=<span class="string">"item in data.products"</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">h3</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></div><div class="line">						<span class="comment">&lt;!--使用金额过滤器，将数值转换为金额--&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"pull-right label label-primary"</span>&gt;</span></div><div class="line">							&#123;&#123;item.price | currency&#125;&#125;</div><div class="line">						<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"lead"</span>&gt;</span>&#123;&#123;item.description &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="显示分类列表"><a href="#显示分类列表" class="headerlink" title="显示分类列表"></a>显示分类列表</h3><ul>
<li><p>创建分类去重过滤器<br>  分类列表不能重复，这意味着我们要对产品的<code>category</code>属性值进行去重。使用AngularJS的自定义过滤器能很方便实现。<br>  现在我创建一个<code>customFilters</code>模块，该模块包含项目所有自定义的过滤器。下面是<code>filters/customFilters.js</code>文件的代码：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">"customFilter"</span>,[])</div><div class="line">.filter(<span class="string">"unique"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">data,propertyName</span>)</span>&#123;</div><div class="line">		<span class="comment">//只对数组每个对象的属性过滤,返回对象属性值的集合</span></div><div class="line">		<span class="keyword">if</span>(angular.isArray(data) &amp;&amp; angular.isString(propertyName))&#123;</div><div class="line">			<span class="keyword">var</span> results = [];</div><div class="line">			<span class="keyword">var</span> keys = &#123;&#125;;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; data.length ; i++)&#123;</div><div class="line">				<span class="keyword">var</span> val = data[i][propertyName];</div><div class="line">				<span class="keyword">if</span>(angular.isUndefined(keys[val]))&#123;</div><div class="line">					keys[val] = <span class="literal">true</span>;</div><div class="line">					results.push(val);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> result;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			<span class="keyword">return</span> data;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>生成分类导航链接<br>  生成可供用户点击的分类导航链接需要用到上一段创建的unique过滤器，还有一些可用的AngularJS内置功能。下面是<code>app.html</code>文件修改的部分代码：</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">		<span class="comment">//依赖customFilter模块</span></div><div class="line">		angular.module(<span class="string">"sportsStore"</span>,[<span class="string">"customFilter"</span>]);</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--引入顶级控制器--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"controllers/sportsStore.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--引入自定义过滤器--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"filters/customFilters.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">...</div><div class="line">    <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"col-xs-3"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">ng-click</span>=<span class="string">"selectCategory()"</span> <span class="attr">class</span>=<span class="string">"btn btn-block btn-default"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--先对商品按目录进行排序,然后再返回去重后的目录--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">ng-repeat</span>=<span class="string">"item in data.products | orderBy:'category' | unique:'category'"</span></span></div><div class="line">			<span class="attr">ng-click</span>=<span class="string">"selectCategory(item)"</span> <span class="attr">class</span>=<span class="string">"btn btn-block btn-default btn-lg"</span>&gt;&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">nav</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>选择分类<br>  使用<code>ng-click</code>指令响应元素的点击事件，在本例中，点击导航菜单时触发<code>selectCategory</code>行为，为此，我需要在控制器定义该行为。我不想在顶级<code>sportsStore.js</code>控制器上添加该行为，因为这个控制器是定义应用程序通用行为和数据，作为替代，我会创建新控制器，它仅被用于产品列表和分类视图。下面是<code>controllers/productListController.js</code>文件的内容：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">"sportsStore"</span>)</div><div class="line">.controller(<span class="string">"productListCtrl"</span>,[<span class="string">"$scope"</span>,<span class="string">"$filter"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope,$filter</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> selectedCategory = <span class="literal">null</span>;</div><div class="line">	$scope.selectCategory = <span class="function"><span class="keyword">function</span>(<span class="params">newCategory</span>)</span>&#123;</div><div class="line">		selectedCategory = newCategory;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//当没有选中产品分类(显示全部)或者产品所在分类被选中时返回true(显示选择的分类)</span></div><div class="line">	$scope.categoryFilterFn = <span class="function"><span class="keyword">function</span>(<span class="params">product</span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> selectedCategory == <span class="literal">null</span> || product.category == selectedCategory;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;])</div></pre></td></tr></table></figure>
<p>  在页面中应用控制器,<code>app.html</code>修改的部分代码如下：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">   ...</div><div class="line">   &lt;!--引入自定义过滤器--&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"filters/customFilters.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;!--引入产品列表控制器--&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"controllers/productListController.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">   ...</div><div class="line">   &lt;!--使用控制器--&gt;</div><div class="line">   &lt;section class="panel panel-default row" ng-controller="productListCtrl"&gt;</div><div class="line">   ...</div><div class="line">   &lt;!--遍历添加商品,filter过滤器只返回结果为true的数据--&gt;</div><div class="line">&lt;div class="well" ng-repeat="item in data.products | filter:categoryFilterFn"&gt;</div><div class="line">   ...</div></pre></td></tr></table></figure>
</li>
<li><p>高亮选择的分类<br>  对被选分类按钮使用Bootstrap的btn-primary CSS类以实现高亮显示。下面是修改后的<code>productListController.js</code>文件</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">"sportsStore"</span>)</div><div class="line"><span class="comment">//定义激活添加的类名</span></div><div class="line">.constant(<span class="string">"productListActiveClass"</span>,<span class="string">"btn-primary"</span>)</div><div class="line">.controller(<span class="string">"productListCtrl"</span>,[<span class="string">"$scope"</span>,<span class="string">"$filter"</span>,<span class="string">"productListActiveClass"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope,$filter,productListActiveClass</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> selectedCategory = <span class="literal">null</span>;</div><div class="line">	$scope.selectCategory = <span class="function"><span class="keyword">function</span>(<span class="params">newCategory</span>)</span>&#123;</div><div class="line">		selectedCategory = newCategory;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//当没有选中产品分类(显示全部)或者产品所在分类被选中时返回true(显示选择的分类)</span></div><div class="line">	$scope.categoryFilterFn = <span class="function"><span class="keyword">function</span>(<span class="params">product</span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> selectedCategory == <span class="literal">null</span> || product.category == selectedCategory;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//若当前类别被选中,添加样式</span></div><div class="line">	$scope.getCategoryClass = <span class="function"><span class="keyword">function</span>(<span class="params">category</span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> selectedCategory == category ? productListActiveClass : <span class="string">""</span>;</div><div class="line">	&#125;</div><div class="line">&#125;])</div></pre></td></tr></table></figure>
<p>  下面是<code>app.html</code>修改的代码：<br>  <img src="imgs/1486198602123_2.png" alt=""></p>
</li>
<li><p>添加分页</p>
<ol>
<li><p>更新控制器<br> 我更新了<code>productListCtrl</code>控制器来支持分页，下面是更新后的<code>controllers/productListController.js</code>文件</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">"sportsStore"</span>)</div><div class="line"><span class="comment">//定义激活添加的类名</span></div><div class="line">.constant(<span class="string">"productListActiveClass"</span>,<span class="string">"btn-primary"</span>)</div><div class="line"><span class="comment">//分页大小</span></div><div class="line">.constant(<span class="string">"productListPageCount"</span>,<span class="number">3</span>)</div><div class="line">.controller(<span class="string">"productListCtrl"</span>,[<span class="string">"$scope"</span>,<span class="string">"$filter"</span>,<span class="string">"productListActiveClass"</span>,<span class="string">"productListPageCount"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope,$filter,productListActiveClass,productListPageCount</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> selectedCategory = <span class="literal">null</span>;</div><div class="line">	$scope.selectedPage = <span class="number">1</span>;</div><div class="line">	$scope.pageSize = productListPageCount;</div><div class="line">	</div><div class="line">	$scope.selectCategory = <span class="function"><span class="keyword">function</span>(<span class="params">newCategory</span>)</span>&#123;</div><div class="line">		selectedCategory = newCategory;</div><div class="line">		<span class="comment">//选择新的分类时默认显示第一页</span></div><div class="line">		$scope.selectedPage = <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//当没有选中产品分类(显示全部)或者产品所在分类被选中时返回true(显示选择的分类)</span></div><div class="line">	$scope.categoryFilterFn = <span class="function"><span class="keyword">function</span>(<span class="params">product</span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> selectedCategory == <span class="literal">null</span> || product.category == selectedCategory;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//若当前类别被选中,添加样式</span></div><div class="line">	$scope.getCategoryClass = <span class="function"><span class="keyword">function</span>(<span class="params">category</span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> selectedCategory == category ? productListActiveClass : <span class="string">""</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//选择分页</span></div><div class="line">	$scope.selectPage = <span class="function"><span class="keyword">function</span>(<span class="params">newPage</span>)</span>&#123;</div><div class="line">		$scope.selectedPage = newPage;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//选中页的样式</span></div><div class="line">	$scope.getPageClass = <span class="function"><span class="keyword">function</span>(<span class="params">page</span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> $scope.selectedPage == page ? productListActiveClass : <span class="string">""</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;])</div></pre></td></tr></table></figure>
</li>
<li><p>实现过滤器<br> 我创建了两个新过滤器支持分页，我将二者添加到customFilter.js文件。下面是修改后的<code>filters/customFilters.js</code>文件的代码：</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">"customFilter"</span>,[])</div><div class="line">.filter(<span class="string">"unique"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">data,propertyName</span>)</span>&#123;</div><div class="line">    	<span class="comment">//只对数组每个对象的属性过滤,返回对象属性值的集合</span></div><div class="line">		<span class="keyword">if</span>(angular.isArray(data) &amp;&amp; angular.isString(propertyName))&#123;</div><div class="line">			<span class="keyword">var</span> results = [];</div><div class="line">			<span class="keyword">var</span> keys = &#123;&#125;;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; data.length ; i++)&#123;</div><div class="line">				<span class="keyword">var</span> val = data[i][propertyName];</div><div class="line">				<span class="keyword">if</span>(angular.isUndefined(keys[val]))&#123;</div><div class="line">					keys[val] = <span class="literal">true</span>;</div><div class="line">					results.push(val);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> results;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			<span class="keyword">return</span> data;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;)</div><div class="line">.filter(<span class="string">"range"</span>,[<span class="string">"$filter"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$filter</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">data,page,size</span>)</span>&#123;</div><div class="line">		<span class="keyword">if</span>(angular.isArray(data) &amp;&amp; angular.isNumber(page) &amp;&amp; angular.isNumber(size))&#123;</div><div class="line">			<span class="keyword">var</span> start_index = ( page - <span class="number">1</span> ) * size;</div><div class="line">			<span class="keyword">if</span>(data.length &lt; start_index)&#123;</div><div class="line">				<span class="keyword">return</span> [];</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				<span class="comment">//返回当前页的数据</span></div><div class="line">				<span class="keyword">return</span> $filter(<span class="string">"limitTo"</span>)(data.splice(start_index),size);</div><div class="line">			&#125;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			<span class="keyword">return</span> data;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;])</div><div class="line">.filter(<span class="string">"pageCount"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">data,size</span>)</span>&#123;</div><div class="line">		<span class="keyword">if</span>(angular.isArray(data))&#123;</div><div class="line">			<span class="keyword">var</span> result = [];</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="built_in">Math</span>.ceil(data.length/size) ; i++)&#123;</div><div class="line">				result.push(i);</div><div class="line">			&#125;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			<span class="keyword">return</span> data;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>更新视图<br> 实现分页的最后一步就是更新视图。下面是修改后的<code>app.html</code>页面：</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html ng-app="sportsStore"&gt;</div><div class="line">	&lt;head&gt;</div><div class="line">		&lt;meta charset="UTF-8"&gt;</div><div class="line">		&lt;title&gt;SportsStore&lt;/title&gt;</div><div class="line">		&lt;script src="angular.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;</div><div class="line">		&lt;link rel="stylesheet" type="text/css" href="bootstrap.css"/&gt;</div><div class="line">		&lt;link rel="stylesheet" type="text/css" href="bootstrap-theme.css"/&gt;</div><div class="line">		&lt;script type="text/javascript"&gt;</div><div class="line">			//依赖customFilter模块</div><div class="line">			angular.module("sportsStore",["customFilter"]);</div><div class="line">		&lt;/script&gt;</div><div class="line">		&lt;!--引入顶级控制器--&gt;</div><div class="line">		&lt;script src="controllers/sportsStore.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;</div><div class="line">		&lt;!--引入自定义过滤器--&gt;</div><div class="line">		&lt;script src="filters/customFilters.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;</div><div class="line">		&lt;!--引入产品列表控制器--&gt;</div><div class="line">		&lt;script src="controllers/productListController.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;</div><div class="line">	&lt;/head&gt;</div><div class="line">	&lt;!--使用控制器--&gt;</div><div class="line">	&lt;body ng-controller="sportsStoreCtrl"&gt;</div><div class="line">		&lt;header class="navbar navbar-inverse"&gt;</div><div class="line">			&lt;a href="#" class="navbar-brand"&gt;运动商店&lt;/a&gt;</div><div class="line">		&lt;/header&gt;</div><div class="line">		&lt;section class="panel panel-default row" ng-controller="productListCtrl"&gt;</div><div class="line">			&lt;nav class="col-xs-3"&gt;</div><div class="line">				&lt;a ng-click="selectCategory()" class="btn btn-block btn-default" </div><div class="line">					ng-class="getCategoryClass()"&gt;Home&lt;/a&gt;</div><div class="line">				&lt;!--先对商品按目录进行排序,然后再返回去重后的目录--&gt;</div><div class="line">				&lt;a ng-repeat="item in data.products | orderBy:'category' | unique:'category'"</div><div class="line">					ng-click="selectCategory(item)" class="btn btn-block btn-default btn-lg" </div><div class="line">					ng-class="getCategoryClass(item)"&gt;&#123;&#123;item&#125;&#125;&lt;/a&gt;</div><div class="line">			&lt;/nav&gt;</div><div class="line">			&lt;div class="col-xs-8"&gt;</div><div class="line">				&lt;!--遍历添加商品--&gt;</div><div class="line">				&lt;div class="well" ng-repeat="item in data.products | filter:categoryFilterFn | range:selectedPage:pageSize"&gt;</div><div class="line">					&lt;h3&gt;</div><div class="line">						&lt;strong&gt;&#123;&#123;item.name&#125;&#125;&lt;/strong&gt;</div><div class="line">						&lt;!--使用金额过滤器，将数值转换为金额--&gt;</div><div class="line">						&lt;span class="pull-right label label-primary"&gt;</div><div class="line">							&#123;&#123;item.price | currency&#125;&#125;</div><div class="line">						&lt;/span&gt;</div><div class="line">					&lt;/h3&gt;</div><div class="line">					&lt;span class="lead"&gt;&#123;&#123;item.description &#125;&#125;&lt;/span&gt;</div><div class="line">				&lt;/div&gt;</div><div class="line">				&lt;div class="pull-right btn-group"&gt;</div><div class="line">					&lt;a ng-repeat="page in data.products | filter:categoryFilterFn | pageCount:pageSize"</div><div class="line">						ng-click="selectPage($index + 1)" class="btn btn-default" ng-class="getPageClass($index + 1)"&gt;</div><div class="line">						&#123;&#123;$index + 1&#125;&#125;</div><div class="line">					&lt;/a&gt;</div><div class="line">				&lt;/div&gt;</div><div class="line">			&lt;/div&gt;</div><div class="line">		&lt;/section&gt;</div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本章开始使用AngularJS开发一个真正的应用程序：运动商店，本章完成产品的展示、分页、分类导航功能，数据使用虚拟数据。&lt;/p&gt;
    
    </summary>
    
      <category term="AngularJS" scheme="http://heji.website/categories/AngularJS/"/>
    
    
      <category term="AngularJS" scheme="http://heji.website/tags/AngularJS/"/>
    
  </entry>
  
  <entry>
    <title>第三章、结合背景理解AngularJS</title>
    <link href="http://heji.website/2017/02/06/%E7%AC%AC%E4%B8%89%E7%AB%A0%E3%80%81%E7%BB%93%E5%90%88%E8%83%8C%E6%99%AF%E7%90%86%E8%A7%A3AngularJS/"/>
    <id>http://heji.website/2017/02/06/第三章、结合背景理解AngularJS/</id>
    <published>2017-02-06T00:33:37.717Z</published>
    <updated>2017-02-06T01:03:19.204Z</updated>
    
    <content type="html"><![CDATA[<p>并不是所有的应用程序都适合使用AngularJS开发，本章主要介绍AngularJS的适用场景。</p>
<a id="more"></a>
<p>AngularJS不是能够解决任何问题的万能利器，所以了解何时应该使用AngularJS以及何时应该寻找替代品是非常重要的。AngularJS将那些曾经仅对服务器端开发者可用的功能完整地搬到了浏览器端。这意味着使用了AngularJS的HTML文档每次被加载时，AngularJS会有很多事要做——需要编译HTML元素，需要计算数据绑定，需要执行指令等。这些工作都需要时间去执行，所需时长取决于HTML文档及其相关联的JavaScript代码的复杂度，而且关键是浏览器的质量和设备的处理能力。<br>因此，Angular应用优化的目标应该是尽可能地降低这些设置的执行频率，并在其执行时尽可能多地向用户发送应用的更多内容。这意味着需要你仔细考虑所搭建的Web应用程序的类型。广义上讲，存在两种类型的Web应用程序：回合式和单页面。</p>
<h2 id="回合式和单页面应用程序"><a href="#回合式和单页面应用程序" class="headerlink" title="回合式和单页面应用程序"></a>回合式和单页面应用程序</h2><h3 id="回合式模型"><a href="#回合式模型" class="headerlink" title="回合式模型"></a>回合式模型</h3><p>浏览器向服务器请求一个初始的HTML文档。用户交互（例如单击链接或者提交表单）会使得浏览器发送请求并接受一个全新的HTML文档。在这类程序中，浏览器本质上是一个HTML内容的解析引擎，所有的应用程序逻辑和数据都保留在服务器上。<br>回合式应用存在一些严重的不足之处：用户在下一个HTML文档被请求并加载之前必须等待，需要大型服务器端基础设施来处理所有请求，需要很多带宽。</p>
<h3 id="单页面应用"><a href="#单页面应用" class="headerlink" title="单页面应用"></a>单页面应用</h3><p>单页面应用另辟蹊径，一个初始的HTML文档被发送给服务器，但是用户交互所产生的Ajax请求只会请求较小的HTML片段，初始的HTML文档不会被再次加载或者替换，在Ajax请求被异步执行时用户还可以继续与已有的HTML进行交互。(AngularJS的路由加载模块就是明显的例子，页面的切换只是部分HTML代码的变换，页面还是原来的页面)<br>AngularJS以单页面应用程序和复杂的回合式应用程序见长。对于较简单的项目，一般来说jQuery或者类似的替代者会是更好的选择，尽管没什么能阻止你在所有的项目中使用AngularJS。<br><img src="imgs/1484218583460_6.png" alt=""><br>AngularJS与jQuery在Web应用开发上走的是不同的路，jQuery完全是通过显式操作浏览器中的DOM来创建应用。AngularJS采用的方法则是将浏览器吸收为应用开发的基础。</p>
<h2 id="理解MVC模式"><a href="#理解MVC模式" class="headerlink" title="理解MVC模式"></a>理解MVC模式</h2><p>使用MVC模式的关键前提是实现关注点分离，即应用程序中的数据模型与业务和展示逻辑解耦。主要的三个构件是模型、控制器和视图。<br><img src="imgs/1484219382996_8.png" alt="服务器端的MVC"><br>AngularJS是在浏览器中工作的，导致对MVC的形式产生一些影响。<br><img src="imgs/1484219499877_9.png" alt="浏览器端的MVC"></p>
<ul>
<li><p>理解模型<br>  模型（MVC中的M）包含了用户赖以工作的数据。有两种广义上的模型：视图模型，只表示从控制器传往视图的数据；领域模型：包含了业务领域的数据，以及用于创建、存储、和操纵这些数据的各种操作、转换和规则，统称逻辑模型。<br>  模型应该：</p>
<pre><code>* 包含领域数据
* 包含创建、管理和修改领域数据的逻辑
* 提供整洁的API，能够暴露模型数据及之上的操作。
</code></pre><p>  模型不应该：</p>
<pre><code>* 暴露模型数据是如何获取或管理的细节
* 包含根据用户交互对模型进行转换的逻辑（这是控制器的职责）
* 包含将数据显示给用户的逻辑
</code></pre></li>
<li><p>理解控制器<br>  在一个AngularJS应用中，控制器就像结缔组织一样，作为数据模型和视图之间的渠道。控制器会向作用域中添加业务领域逻辑（称为行为），而作用域是模型的子集。<br>  控制器应该：</p>
<pre><code>* 包含初始化作用域所需的逻辑
* 包含视图所需的用于表示作用域中的数据的逻辑行为。
* 包含根据用户交互来更新作用域的逻辑行为
</code></pre><p>  控制器不应当：</p>
<pre><code>* 包含操作DOM的逻辑（那是视图的职责）
* 包含管理数据持久化的逻辑（那是模型的职责）
* 在作用域之外操作数据
</code></pre></li>
<li><p>理解视图数据<br>  领域模型并不是AngularJS应用程序中的唯一数据。控制器可以创建视图数据，以简化视图的定义。视图数据不会被持久化。而且要么是通过综合领域模型数据的几部分而成的，要么是存在于对用户交互的响应中。</p>
</li>
<li><p>理解视图<br>  AngularJS视图是通过HTML元素来定义的，而这些元素是通过数据或者指令来进行增强或者生成的。正是AngularJS指令使得视图变得如此灵活。<br>  视图应当：</p>
<pre><code>* 包含将数据呈现给用户所需的逻辑和标记。
</code></pre><p>  视图不应当：</p>
<pre><code>* 包含复杂逻辑（这最好放到控制器中去）
* 包含创建、存储或者操作领域模型的逻辑
</code></pre></li>
</ul>
<h2 id="理解RESTful服务"><a href="#理解RESTful服务" class="headerlink" title="理解RESTful服务"></a>理解RESTful服务</h2><p>一般情况下，我们并不希望客户端代码直接访问数据存储——这样会在客户端和数据存储之间产生紧耦合，使得单元测试复杂化，也使得在不修改客户端代码的情况下对数据存储的修改变得困难。<br>通过服务器端作为中介来访问数据存储，可以消除紧耦合。客户端的逻辑负责从服务器端存取数据，而无需知道数据在后台是如何存储或访问的细节。<br>有许多种在客户端和服务端之间传递数据的方法。最常见的一种是使用Ajax请求来调用服务器端代码，让服务器发送JSON并使用HTML表单来修改数据。这种方法可以很好地工作，也是RESTful Web服务的基础，利用了HTTP请求的天然特性对数据进行CRUD操作。<br>在一个RESTful服务中，被请求的操作通过HTTP方法和URL的组合进行表示。对于RESTful的Web服务没有标准的URL规范，但是一般想法是让URL是不言自明的，这样能够让URL引用的变得更加明显。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://myserver.mydomain.com/people/bob</div></pre></td></tr></table></figure></p>
<p>在本例中，明显地看出有一个people的数据集合，引用的具体对象是bob。<br>URL可以识别出我想操作的数据对象，HTTP方法则指定了我想执行的操作。如下表所示：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>GET</td>
<td>获取URL指定的数据对象</td>
</tr>
<tr>
<td>PUT</td>
<td>更新URL指定的数据对象</td>
</tr>
<tr>
<td>POST</td>
<td>创建一个新的对象，通常使用表单数据值作为数据域</td>
</tr>
<tr>
<td>DELETE</td>
<td>删除URL所指定的数据对象</td>
</tr>
</tbody>
</table>
<h2 id="Angular应用的几条规则"><a href="#Angular应用的几条规则" class="headerlink" title="Angular应用的几条规则"></a>Angular应用的几条规则</h2><ul>
<li>视图逻辑应该仅为显示准备数据，并且永远不应该修改模型</li>
<li>控制器永远不应该直接创建、更新或删除模型中的数据</li>
<li>客户端永远都不应该直接访问数据存储。</li>
<li>不要尝试在Angular应用使用jQuery操作DOM，技术的选型应该在最初的时候考虑清楚，否则后患无穷。如果实在需要使用jQuery，建议使用AngularJS封装的jqLite，后面会讲解。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;并不是所有的应用程序都适合使用AngularJS开发，本章主要介绍AngularJS的适用场景。&lt;/p&gt;
    
    </summary>
    
      <category term="AngularJS" scheme="http://heji.website/categories/AngularJS/"/>
    
    
      <category term="AngularJS" scheme="http://heji.website/tags/AngularJS/"/>
    
  </entry>
  
  <entry>
    <title>第二章、第一个AngularJS应用</title>
    <link href="http://heji.website/2017/01/10/%E7%AC%AC%E4%BA%8C%E7%AB%A0%E3%80%81%E7%AC%AC%E4%B8%80%E4%B8%AAAngularJS%E5%BA%94%E7%94%A8/"/>
    <id>http://heji.website/2017/01/10/第二章、第一个AngularJS应用/</id>
    <published>2017-01-10T08:37:58.418Z</published>
    <updated>2017-01-10T09:00:07.249Z</updated>
    
    <content type="html"><![CDATA[<p>本章使用AngularJS特性打造出一个简单的Web应用程序。</p>
<a id="more"></a>
<h2 id="准备项目"><a href="#准备项目" class="headerlink" title="准备项目"></a>准备项目</h2><p><strong>注意：除非特殊说明,否则都是以angularjs目录作为项目根目录</strong><br>在assets目录下新建一个<code>todo.html</code>的HTML文件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>待办事项<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"../lib/bootstrap-3.3.0/dist/css/bootstrap.css"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"../lib/bootstrap-3.3.0/dist/css/bootstrap-theme.css"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page-header"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">h1</span>&gt;</span>To DO List<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control"</span> /&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-btn"</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-striped"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">thead</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">th</span>&gt;</span>描述<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">th</span>&gt;</span>是否完成<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">thead</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tbody</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">td</span>&gt;</span>买花<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">td</span>&gt;</span>否<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">td</span>&gt;</span>买鞋子<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">td</span>&gt;</span>否<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">td</span>&gt;</span>工作总结<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">td</span>&gt;</span>是<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">td</span>&gt;</span>打电话给家里<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">td</span>&gt;</span>否<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在浏览器上访问<code>http://localhost:3000/angularjs/assets/todo.html</code>查看效果，目前没有应用AngularJS。</p>
<h2 id="使用AngularJS"><a href="#使用AngularJS" class="headerlink" title="使用AngularJS"></a>使用AngularJS</h2><h3 id="将AngularJS应用到HTML文件"><a href="#将AngularJS应用到HTML文件" class="headerlink" title="将AngularJS应用到HTML文件"></a>将AngularJS应用到HTML文件</h3><ol>
<li>引入AngularJS文件</li>
<li>创建一个AngularJS模块</li>
<li>对元素应用模块</li>
</ol>
<p>AngularJS应用由一个或多个模块组成，模块是由调用angular.module方法而创建的，该方法接收两个参数，第一个参数是模块名称，第二个参数是依赖的其他模块，当没有依赖其他模块时，传一个空数组。完成模块的定义后，对html或其他元素使用<code>ng-app</code>指令来使用模块，该指令告诉浏览器，指令内的所有元素被AngularJS编译和处理，通常当只使用AngularJS时，在html元素添加<code>ng-app</code>指令，当需要与其他技术混合时，可以在文档的其他元素添加<code>ng-app</code>指令缩小AngularJS应用的边界。</p>
<ul>
<li>创建数据模型<br>  AngularJS支持MVC模式，推荐视图与数据模型、逻辑分离，在该例我们使用JavaScript创建数据模型。</li>
<li>创建控制器<br>  控制器是由angular.module所返回的Module对象上的controller方法创建的。controller方法接收两个参数，第一个是控制器的名称第二个是将会被调用的函数，用于定义控制器功能。惯例一般是对控制器命名为<name>Ctrl，真正的应用程序一般会生成多个控制器，但是本例中仅需要一个，名字取为ToDoCtrl。<br>  控制器函数接收一个<code>$scope</code>的参数，<code>$</code>表示AngularJS提供的内置特性，<code>$scope</code>对象常用于对控制器范围的视图提供数据和功能。控制器定义好之后，在元素上使用<code>ng-controller</code>为元素指定控制器。</name></li>
<li><p>创建视图</p>
<ul>
<li>插入模型值<br>  使用<code></code>绑定数据模型，在该例中，todo即表示model对象，Expression可以是任何有效的JavaScript语句。需要注意的是，你应该仅使用表达式来执行一些简单操作，而不要执行复杂逻辑或对模型进行操作，这应该是控制器该做的事。</li>
<li>使用指令<br>  在清单中，使用了另一个AngularJS内置指令<code>ng-repeat</code>。该指令用于告诉AngularJS从一个集合中的各个对象生成所应用到的元素及其内容。该指令的格式为<code>&lt;name&gt; in &lt;collection&gt;</code></li>
</ul>
</li>
<li><p>最终代码<br>  最终代码如下：</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">ng-app</span>=<span class="string">"todoApp"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>待办事项<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"../lib/bootstrap-3.3.0/dist/css/bootstrap.css"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"../lib/bootstrap-3.3.0/dist/css/bootstrap-theme.css"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-controller</span>=<span class="string">"todoCtrl"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page-header"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;todo.user&#125;&#125;'s To DO List<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label label-default"</span>&gt;</span>&#123;&#123;todo.items.length&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control"</span> /&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-btn"</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-striped"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">thead</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">th</span>&gt;</span>描述<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">th</span>&gt;</span>是否完成<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">thead</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tbody</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">tr</span> <span class="attr">ng-repeat</span>=<span class="string">"item in todo.items"</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.action&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.done ? "是" : "否"&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../lib/angular-1.2.5/angular.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">			<span class="keyword">var</span> todoApp = angular.module(<span class="string">'todoApp'</span>,[]);</div><div class="line">			<span class="comment">//定义数据模型</span></div><div class="line">			<span class="keyword">var</span> model = &#123;</div><div class="line">				user:<span class="string">"HeJi"</span>,</div><div class="line">				items:[</div><div class="line">					&#123;action:<span class="string">"买花"</span>,done:<span class="literal">false</span>&#125;,</div><div class="line">					&#123;action:<span class="string">"买鞋子"</span>,done:<span class="literal">false</span>&#125;,</div><div class="line">					&#123;action:<span class="string">"工作总结"</span>,done:<span class="literal">true</span>&#125;,</div><div class="line">					&#123;action:<span class="string">"打电话给家里"</span>,done:<span class="literal">false</span>&#125;</div><div class="line">				]</div><div class="line">			&#125;</div><div class="line">			<span class="comment">//定义控制器</span></div><div class="line">			todoApp.controller(<span class="string">'todoCtrl'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</div><div class="line">				$scope.todo = model;</div><div class="line">			&#125;)</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="基本功能之外"><a href="#基本功能之外" class="headerlink" title="基本功能之外"></a>基本功能之外</h2><ul>
<li><p>使用双向数据绑定<br>  上一节使用的绑定被称为单向绑定，其值是从模型中取得的。另外，AngularJS还支持双向数据绑定，模型用于生成元素，元素的变化也能引起模型中的相应变化。为了演示双向数据绑定，我添加一个复选框以便修改数据的done属性。</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">   //...表示还有其他内容,后面都是这样标记</div><div class="line">   ...</div><div class="line">   <span class="tag">&lt;<span class="name">tr</span> <span class="attr">ng-repeat</span>=<span class="string">"item in todo.items"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.action&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">ng-model</span>=<span class="string">"item.done"</span> /&gt;</span></div><div class="line">		&#123;&#123;item.done ? "是" : "否"&#125;&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">   ...</div></pre></td></tr></table></figure>
</li>
<li><p>创建和使用控制器行为<br>  控制器在作用域上定义行为。行为是对模型中的数据进行操作的函数，用于实现应用程序中的业务逻辑。为了演示一个简单的行为，我们修改header以显示未完成的待办事项数目。</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">   ...</div><div class="line">   <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label label-default"</span> <span class="attr">ng-hide</span>=<span class="string">"incompleteCount()==0"</span>&gt;</span>&#123;&#123;incompleteCount()&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">   ...</div><div class="line">   //定义控制器</div><div class="line">todoApp.controller('todoCtrl',function($scope)&#123;</div><div class="line">	$scope.todo = model;</div><div class="line">	//计算未完成待办事项数目</div><div class="line">	$scope.incompleteCount = function()&#123;</div><div class="line">		var count = 0;</div><div class="line">		angular.forEach($scope.todo.items,function(item)&#123;</div><div class="line">			if(!item.done)&#123;</div><div class="line">				count++;</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">		return count;</div><div class="line">	&#125;</div><div class="line">&#125;)</div><div class="line">   ...</div></pre></td></tr></table></figure>
<p>  行为是通过在<code>$scope</code>对象上添加函数而定义的。向<code>$scope</code>对象添加的函数所赋予的属性名称，被作为行为名，例如，本例中，<code>incompleteCount</code>就是行为名。另外，我使用了<code>ng-hide指令</code>，当赋值表达式的计算结果为true时，<code>ng-hide</code><br>  指令会隐藏元素及其子元素。</p>
</li>
<li><p>使用依赖于其他行为的行为<br>  因为行为是通过使用JavaScript函数而创建的，所以同一控制器中一个行为可以在其他行为的基础上创建。例如，我创建一个行为，可以根据待办事项列表中的未完成事项数来选择CSS类。</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">   ...</div><div class="line">   <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label label-default"</span> <span class="attr">ng-class</span>=<span class="string">"warningLevel()"</span> <span class="attr">ng-hide</span>=<span class="string">"incompleteCount()==0"</span>&gt;</span>&#123;&#123;incompleteCount()&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">   ...</div><div class="line">   //根据未完成事项数选择提醒类</div><div class="line">$scope.warningLevel = function()&#123;</div><div class="line">	return $scope.incompleteCount() <span class="tag">&lt; <span class="attr">3</span> ? "<span class="attr">label-success</span>" <span class="attr">:</span> "<span class="attr">label-warning</span>";</span></div><div class="line">&#125;</div><div class="line">   <span class="attr">...</span></div></pre></td></tr></table></figure>
</li>
<li><p>响应用户交互<br>  你已经见到了行为和指令是如何结合在一起创建应用特性的，最强大的组合之一便是将指令和行为用于响应用户交互。<br>例如，我修改todo.html的内容，让用户能够创建新的待办事项。</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">   ...</div><div class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-model</span>=<span class="string">"actionText"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-btn"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">ng-click</span>=<span class="string">"addNewItem(actionText)"</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">   ...</div><div class="line">   //添加待办事项</div><div class="line">$scope.addNewItem = function(actionText)&#123;</div><div class="line">	$scope.todo.items.push(&#123;action:actionText,done:false&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  这里需要说明的是，我给输入框绑定了一个没有挂靠在<code>$scope</code>对象的属性，AngularJS会动态地帮我们创建这个属性，然后在点击添加按钮的时候，再把这个属性传递到行为中。</p>
</li>
<li><p>对模型数据过滤和排序<br>  在todo.html文件中增加过滤器功能</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">   ...</div><div class="line">   <span class="comment">&lt;!--只遍历don属性为false的数据,根据action属性排序--&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">tr</span> <span class="attr">ng-repeat</span>=<span class="string">"item in todo.items | filter:&#123;done:false&#125; | orderBy:'action'"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.action&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">ng-model</span>=<span class="string">"item.done"</span> /&gt;</span></div><div class="line">		&#123;&#123;item.done ? "是" : "否"&#125;&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">   ...</div></pre></td></tr></table></figure>
<p>  AngularJS还支持自定义过滤器：</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">   ...</div><div class="line">   <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-striped"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">thead</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">th</span>&gt;</span>描述<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">th</span>&gt;</span>是否完成<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">thead</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">tbody</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tr</span> <span class="attr">ng-repeat</span>=<span class="string">"item in todo.items | checkedItems:showComplete | orderBy:'action'"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.action&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">ng-model</span>=<span class="string">"item.done"</span> /&gt;</span></div><div class="line">				&#123;&#123;item.done ? "是" : "否"&#125;&#125;</div><div class="line">			<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkbox-inline"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">ng-model</span>=<span class="string">"showComplete"</span> /&gt;</span>显示所有</div><div class="line">	<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">   ...</div><div class="line">   //自定义过滤器</div><div class="line">todoApp.filter('checkedItems',function()&#123;</div><div class="line">	return function(items,showComplete)&#123;</div><div class="line">		var resultArr = [];</div><div class="line">		angular.forEach(items,function(item)&#123;</div><div class="line">			if(item.done == false || showComplete)&#123;</div><div class="line">				resultArr.push(item);</div><div class="line">			&#125;</div><div class="line">		&#125;)</div><div class="line">		return resultArr;</div><div class="line">	&#125;</div><div class="line">&#125;)</div><div class="line">   ...</div></pre></td></tr></table></figure>
<p>  AngularJS模块对象的filter方法用于创建一个过滤器工厂，该工厂会返回一个函数用于过滤一组数据对象。目前暂时不要在意工厂这部分的细节，只需知道使用filter方法需要传入一个函数，该函数中需要一个能够返回过滤后数据的函数就够了。<br>  实际执行过滤功能的函数有两个参数，第一个参数items由AngularJS提供，表示过滤的集合，第二个参数自己传进来，过滤器参数之间使用<code>:</code>分隔。</p>
</li>
<li><p>通过Ajax获取数据<br>  我要做的最后一项修改是通过一个Ajax请求获取JSON形式的数据作为数据模型。<br>  AngularJS的模型对象有一个run方法，该方法仅在AngularJS执行完初始化设置后运行一次，常用于一次性的任务。故我们可以把Ajax请求放在run函数中，在run函数中可以依赖注入内置对象<code>$http</code>，该对象提供了对底层Ajax请求的访问功能。</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">   ...</div><div class="line">   //定义数据模型</div><div class="line">var model = &#123;</div><div class="line">	"user":"HeJi"</div><div class="line">&#125;;</div><div class="line">todoApp.run(function($http)&#123;</div><div class="line">       //get方法返回一个promise对象，该对象表示将在未来完成的工作</div><div class="line">    $http.get("todo.json").success(function(datas)&#123;</div><div class="line">		model.items = datas;</div><div class="line">	&#125;)</div><div class="line">&#125;);</div><div class="line">   ...</div></pre></td></tr></table></figure>
</li>
<li><p>最终代码如下：<br>  todo.html：</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">ng-app</span>=<span class="string">"todoApp"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>待办事项<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"../lib/bootstrap-3.3.0/dist/css/bootstrap.css"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"../lib/bootstrap-3.3.0/dist/css/bootstrap-theme.css"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-controller</span>=<span class="string">"todoCtrl"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page-header"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;todo.user&#125;&#125;'s To DO List<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label label-default"</span> <span class="attr">ng-class</span>=<span class="string">"warningLevel()"</span> <span class="attr">ng-hide</span>=<span class="string">"incompleteCount()==0"</span>&gt;</span>&#123;&#123;incompleteCount()&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-model</span>=<span class="string">"actionText"</span>/&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-btn"</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">ng-click</span>=<span class="string">"addNewItem(actionText)"</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-striped"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">thead</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">th</span>&gt;</span>描述<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">th</span>&gt;</span>是否完成<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">thead</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tbody</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">tr</span> <span class="attr">ng-repeat</span>=<span class="string">"item in todo.items | checkedItems:showComplete | orderBy:'action'"</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.action&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">							<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">ng-model</span>=<span class="string">"item.done"</span> /&gt;</span></div><div class="line">							&#123;&#123;item.done ? "是" : "否"&#125;&#125;</div><div class="line">						<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkbox-inline"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">ng-model</span>=<span class="string">"showComplete"</span> /&gt;</span>显示所有</div><div class="line">				<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../lib/angular-1.2.5/angular.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">			<span class="keyword">var</span> todoApp = angular.module(<span class="string">'todoApp'</span>,[]);</div><div class="line">			<span class="comment">//定义数据模型</span></div><div class="line">			<span class="keyword">var</span> model = &#123;</div><div class="line">				<span class="string">"user"</span>:<span class="string">"HeJi"</span></div><div class="line">			&#125;;</div><div class="line">			todoApp.run(<span class="function"><span class="keyword">function</span>(<span class="params">$http</span>)</span>&#123;</div><div class="line">				$http.get(<span class="string">"todo.json"</span>).success(<span class="function"><span class="keyword">function</span>(<span class="params">datas</span>)</span>&#123;</div><div class="line">					model.items = datas;</div><div class="line">				&#125;)</div><div class="line">			&#125;)</div><div class="line">			<span class="comment">//定义控制器</span></div><div class="line">			todoApp.controller(<span class="string">'todoCtrl'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</div><div class="line">				$scope.todo = model;</div><div class="line">				<span class="comment">//计算未完成待办事项数目</span></div><div class="line">				$scope.incompleteCount = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">					<span class="keyword">var</span> count = <span class="number">0</span>;</div><div class="line">					angular.forEach($scope.todo.items,<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">						<span class="keyword">if</span>(!item.done)&#123;</div><div class="line">							count++;</div><div class="line">						&#125;</div><div class="line">					&#125;);</div><div class="line">					<span class="keyword">return</span> count;</div><div class="line">				&#125;</div><div class="line">				<span class="comment">//根据未完成事项数选择提醒类</span></div><div class="line">				$scope.warningLevel = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">					<span class="keyword">return</span> $scope.incompleteCount() &lt; <span class="number">3</span> ? <span class="string">"label-success"</span> : <span class="string">"label-warning"</span>;</div><div class="line">				&#125;</div><div class="line">				<span class="comment">//添加待办事项</span></div><div class="line">				$scope.addNewItem = <span class="function"><span class="keyword">function</span>(<span class="params">actionText</span>)</span>&#123;</div><div class="line">					$scope.todo.items.push(&#123;action:actionText,done:<span class="literal">false</span>&#125;);</div><div class="line">				&#125;</div><div class="line">			&#125;);</div><div class="line">			<span class="comment">//自定义过滤器</span></div><div class="line">			todoApp.filter(<span class="string">'checkedItems'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">items,showComplete</span>)</span>&#123;</div><div class="line">					<span class="keyword">var</span> resultArr = [];</div><div class="line">					angular.forEach(items,<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">						<span class="keyword">if</span>(item.done == <span class="literal">false</span> || showComplete)&#123;</div><div class="line">							resultArr.push(item);</div><div class="line">						&#125;</div><div class="line">					&#125;)</div><div class="line">					<span class="keyword">return</span> resultArr;</div><div class="line">				&#125;</div><div class="line">			&#125;)</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>  todo.json：</p>
  <figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">	&#123;<span class="attr">"action"</span>:<span class="string">"买花"</span>,<span class="attr">"done"</span>:<span class="literal">false</span>&#125;,</div><div class="line">	&#123;<span class="attr">"action"</span>:<span class="string">"打电话给家里"</span>,<span class="attr">"done"</span>:<span class="literal">false</span>&#125;,</div><div class="line">	&#123;<span class="attr">"action"</span>:<span class="string">"买鞋子"</span>,<span class="attr">"done"</span>:<span class="literal">false</span>&#125;,</div><div class="line">	&#123;<span class="attr">"action"</span>:<span class="string">"工作总结"</span>,<span class="attr">"done"</span>:<span class="literal">true</span>&#125;</div><div class="line">]</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本章使用AngularJS特性打造出一个简单的Web应用程序。&lt;/p&gt;
    
    </summary>
    
      <category term="AngularJS" scheme="http://heji.website/categories/AngularJS/"/>
    
    
      <category term="AngularJS" scheme="http://heji.website/tags/AngularJS/"/>
    
  </entry>
  
  <entry>
    <title>第一章、搭建开发环境</title>
    <link href="http://heji.website/2017/01/10/%E7%AC%AC%E4%B8%80%E7%AB%A0%E3%80%81%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>http://heji.website/2017/01/10/第一章、搭建开发环境/</id>
    <published>2017-01-10T08:25:35.487Z</published>
    <updated>2017-01-10T08:49:16.466Z</updated>
    
    <content type="html"><![CDATA[<p>本章主要是学习AngularJS的准备工作，介绍了如何搭建一个简单的AngularJS开发环境。</p>
<a id="more"></a>
<ul>
<li>选择web浏览器<br>  本教程使用Google Chrome浏览器。</li>
<li>选择代码编辑器<br>  可以选择任意代码编辑器，本教程使用HBuilder</li>
<li>安装Node.js<br>  安装之后使用<code>node --version</code>测试是否安装成功。</li>
<li>创建项目目录<br>  在任意位置创建<code>angularjs</code>目录，作为项目运行的根目录。运行<code>npm init</code>填写基本信息初始化项目</li>
<li><p>安装web服务器<br>  一个简单的Web服务器足以用于开发，我使用Node内置的<code>http</code>模块、<code>fs</code>模块以及安装的<code>url</code>模块、<code>path</code>模块建了一个静态文件服务器:<br>  1.安装必须模块</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev url path</div></pre></td></tr></table></figure>
<p>  执行命令之后，<code>package.json</code>文件如下：</p>
  <figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"angularjs"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="attr">"description"</span>: <span class="string">"learn angular"</span>,</div><div class="line">  <span class="attr">"main"</span>: <span class="string">"./server/server.js"</span>,</div><div class="line">  <span class="attr">"scripts"</span>: &#123;</div><div class="line">    <span class="attr">"startServer"</span>: <span class="string">"node server/server.js"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"keywords"</span>: [</div><div class="line">    <span class="string">"angular"</span></div><div class="line">  ],</div><div class="line">  <span class="attr">"author"</span>: <span class="string">"heji"</span>,</div><div class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</div><div class="line">  <span class="attr">"devDependencies"</span>: &#123;</div><div class="line">    <span class="attr">"path"</span>: <span class="string">"^0.12.7"</span>,</div><div class="line">    <span class="attr">"url"</span>: <span class="string">"^0.11.0"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  2.在<code>angular</code>目录下建立一个server目录，作为定义服务器的目录，<code>server.js</code>是定义服务器的核心脚本，<code>mime.js</code>用于设置响应类型，<code>config.js</code>用于配置哪些文件使用缓存，缓存时间长短。<br>  <code>config.js</code>文件：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">exports.Expires = &#123;</div><div class="line">    fileMatch: <span class="regexp">/^(gif|png|jpg|js|css)$/ig</span>,</div><div class="line">    maxAge: <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">365</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>  <code>mime.js</code>文件：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">exports.types = &#123;</div><div class="line">    <span class="string">"css"</span>: <span class="string">"text/css"</span>,</div><div class="line">    <span class="string">"gif"</span>: <span class="string">"image/gif"</span>,</div><div class="line">    <span class="string">"html"</span>: <span class="string">"text/html"</span>,</div><div class="line">    <span class="string">"ico"</span>: <span class="string">"image/x-icon"</span>,</div><div class="line">    <span class="string">"jpeg"</span>: <span class="string">"image/jpeg"</span>,</div><div class="line">    <span class="string">"jpg"</span>: <span class="string">"image/jpeg"</span>,</div><div class="line">    <span class="string">"js"</span>: <span class="string">"text/javascript"</span>,</div><div class="line">    <span class="string">"json"</span>: <span class="string">"application/json"</span>,</div><div class="line">    <span class="string">"pdf"</span>: <span class="string">"application/pdf"</span>,</div><div class="line">    <span class="string">"png"</span>: <span class="string">"image/png"</span>,</div><div class="line">    <span class="string">"svg"</span>: <span class="string">"image/svg+xml"</span>,</div><div class="line">    <span class="string">"swf"</span>: <span class="string">"application/x-shockwave-flash"</span>,</div><div class="line">    <span class="string">"tiff"</span>: <span class="string">"image/tiff"</span>,</div><div class="line">    <span class="string">"txt"</span>: <span class="string">"text/plain"</span>,</div><div class="line">    <span class="string">"wav"</span>: <span class="string">"audio/x-wav"</span>,</div><div class="line">    <span class="string">"wma"</span>: <span class="string">"audio/x-ms-wma"</span>,</div><div class="line">    <span class="string">"wmv"</span>: <span class="string">"video/x-ms-wmv"</span>,</div><div class="line">    <span class="string">"xml"</span>: <span class="string">"text/xml"</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>  <code>server.js</code>文件：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">"url"</span>);</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</div><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</div><div class="line"><span class="keyword">var</span> mime = <span class="built_in">require</span>(<span class="string">"./mime"</span>).types;</div><div class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">"./config"</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> pathname = url.parse(request.url).pathname;</div><div class="line">    <span class="comment">//path.resolve('../')返回根目录的上级目录,因为URL已包含根目录</span></div><div class="line">    <span class="keyword">var</span> realPath = path.resolve(<span class="string">'../'</span>)+pathname;</div><div class="line">    fs.exists(realPath, <span class="function"><span class="keyword">function</span> (<span class="params">exists</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!exists) &#123;</div><div class="line">			<span class="comment">//如果路径不存在,返回404</span></div><div class="line">            response.writeHead(<span class="number">404</span>, &#123;</div><div class="line">                <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span></div><div class="line">            &#125;);</div><div class="line">            response.write(<span class="string">"This request URL "</span> + pathname + <span class="string">" was not found on this server."</span>);</div><div class="line">            response.end();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            fs.readFile(realPath, <span class="string">"binary"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, file</span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (err) &#123;</div><div class="line">					<span class="comment">//如果读取文件失败统一返回500</span></div><div class="line">                    response.writeHead(<span class="number">500</span>, &#123;</div><div class="line">                        <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span></div><div class="line">                    &#125;);</div><div class="line">                    response.end(err);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">					<span class="comment">//设置最后修改时间</span></div><div class="line">					fs.stat(realPath, <span class="function"><span class="keyword">function</span> (<span class="params">err, stat</span>) </span>&#123;</div><div class="line">						<span class="keyword">var</span> lastModified = stat.mtime.toUTCString();</div><div class="line">						response.setHeader(<span class="string">"Last-Modified"</span>, lastModified);</div><div class="line">						<span class="keyword">if</span> (request.headers[<span class="string">"If-Modified-Since"</span>] &amp;&amp; lastModified == request.headers[<span class="string">"If-Modified-Since"</span>]) &#123;</div><div class="line">							<span class="comment">//没有修改直接返回</span></div><div class="line">							response.writeHead(<span class="number">304</span>, <span class="string">"Not Modified"</span>);</div><div class="line">							response.end();</div><div class="line">						&#125;<span class="keyword">else</span>&#123;</div><div class="line">							<span class="comment">//根据后缀名设置正确的MIME类型</span></div><div class="line">							<span class="keyword">var</span> ext = path.extname(realPath);</div><div class="line">							ext = ext ? ext.slice(<span class="number">1</span>) : <span class="string">'unknown'</span>;</div><div class="line">							<span class="comment">//判断请求的资源是否需要缓存(在config.js文件中配置)</span></div><div class="line">							<span class="keyword">if</span> (ext.match(config.Expires.fileMatch)) &#123;</div><div class="line">								<span class="keyword">var</span> expires = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">								expires.setTime(expires.getTime() + config.Expires.maxAge * <span class="number">1000</span>);</div><div class="line">								<span class="comment">//设置响应头</span></div><div class="line">								response.setHeader(<span class="string">"Expires"</span>, expires.toUTCString());</div><div class="line">								response.setHeader(<span class="string">"Cache-Control"</span>, <span class="string">"max-age="</span> + config.Expires.maxAge);</div><div class="line">							&#125;</div><div class="line">							<span class="keyword">var</span> contentType = mime[ext] || <span class="string">"text/plain"</span>;</div><div class="line">							response.writeHead(<span class="number">200</span>, &#123;</div><div class="line">								<span class="string">'Content-Type'</span>: contentType</div><div class="line">							&#125;);</div><div class="line">							<span class="comment">//向浏览器输入资源</span></div><div class="line">							response.write(file, <span class="string">"binary"</span>);</div><div class="line">							response.end();</div><div class="line">						&#125;</div><div class="line">					&#125;);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">server.listen(<span class="number">3000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'server is running at 3000 port!'</span>)</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>  3.在<code>angularjs</code>目录下新建<code>assets</code>目录，作为资源目录</p>
</li>
<li><p>安装测试系统<br>  AngularJS最重要的特性之一是对单元测试的支持。在本教程，使用karma test runner 和Jasmine框架。任意目录运行<code>npm install -g karma</code>命令即完成karma的安装，后面将继续介绍如果使用。</p>
</li>
<li><p>获取AngularJS<br>  在<code>https://angularjs.org/</code>网站获取AngularJS，本教程使用的是1.2.5版本。另外，AngularJS还提供了一些附加文件，用于扩展AngularJS核心库的功能，后面章节将使用部分这些文件<br>  <img src="1484010814337_2.png" alt=""></p>
</li>
<li><p>获取Bootstrap<br>  直接到bootstrap中文网下载Bootstrap。这里只是用bootstrap的样式，本教程不会使用bootstrap的Javascript文件的特性。</p>
</li>
<li><p>获取Deployd<br>  Deployd是一款出色的可跨平台的Web API引擎。它建立在Node.js和MongoDB的基础上，以JSON形式（类JSON）存储数据，并且支持使用JavaScript书写服务器端脚本。对于一些测试用的Web应用而言，Deployd可以非常快速的构建服务器端的REST API。使用以下命令安装Deployd：</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g deployd</div></pre></td></tr></table></figure>
</li>
<li><p>执行一个简单的测试<br>  在<code>assets</code>目录新建一个test.html文件：</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">ng-app</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>First Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"../lib/bootstrap-3.3.0/dist/css/bootstrap.css"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"../lib/bootstrap-3.3.0/dist/css/bootstrap-theme.css"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>&#123;&#123;"Angular"&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-success"</span>&gt;</span>Bootstrap<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../lib/angular-1.2.5/angular.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>  启动服务器,访问<code>http://localhost:3000/angularjs/assets/test.html</code>即可查看效果</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本章主要是学习AngularJS的准备工作，介绍了如何搭建一个简单的AngularJS开发环境。&lt;/p&gt;
    
    </summary>
    
      <category term="AngularJS" scheme="http://heji.website/categories/AngularJS/"/>
    
    
      <category term="AngularJS" scheme="http://heji.website/tags/AngularJS/"/>
    
  </entry>
  
  <entry>
    <title>HTML5-Web存储</title>
    <link href="http://heji.website/2017/01/06/HTML5-Web%E5%AD%98%E5%82%A8/"/>
    <id>http://heji.website/2017/01/06/HTML5-Web存储/</id>
    <published>2017-01-06T06:20:02.820Z</published>
    <updated>2017-01-06T06:21:55.667Z</updated>
    
    <content type="html"><![CDATA[<p>Web存储允许我们在浏览器里保存简单的键/值数据。Web存储与cookie很相似。</p>
<a id="more"></a>
<h3 id="使用本地存储"><a href="#使用本地存储" class="headerlink" title="使用本地存储"></a>使用本地存储</h3><p>我们可以通过全局属性localStorage访问本地存储功能。这个属性返回一个Storage对象。Storage对象被用来保存键/值形式的<strong>字符串对</strong><br><img src="index_files/507ff266-d24f-43fd-9691-000f50d1a5ae.jpg" alt=""><br>Storage对象可用来存储键/值对，其中键和值都是字符串。键必须是唯一的，这就意味着如果我们用Storage对象里已经存在的键调用setItem方法，就会更新它的值。</p>
<ul>
<li>监听存储事件<br>  某个文档对本地存储进行修改时会触发storage事件，我们可以监听其他同源文档上的这个事件来确保我们能跟上最新的变化。<br>  与storage事件同时指派的对象是一个StorageEvent对象。<br>  <img src="index_files/cbde7dfe-831d-4684-a2cb-f2841faed675.jpg" alt=""><br>  <img src="index_files/90269775-bbaa-4d19-9d46-0204761ea6cc.jpg" alt=""><br>  storage事件是通过window对象触发的</li>
</ul>
<h3 id="使用会话存储"><a href="#使用会话存储" class="headerlink" title="使用会话存储"></a>使用会话存储</h3><p>会话存储的工作方式和本地存储基本一致，不同之处在于数据是在各个浏览上下文私有的，会在文档被关闭时移除。我们可以使用全局变量sessionStorage访问会话存储，它返回一个Storage对象。</p>
<h3 id="Cookie、localStorage和sessionStorage对比"><a href="#Cookie、localStorage和sessionStorage对比" class="headerlink" title="Cookie、localStorage和sessionStorage对比"></a>Cookie、localStorage和sessionStorage对比</h3><p><table><tr><td>特性</td><td>Cookie</td><td>localStorage</td><td>sessionStorage</td></tr><tr><td>数据的生命期</td><td>一般由服务器生成，可设置失效时间。如果在浏览器端生成Cookie，默认是关闭浏览器后失效</td><td>除非被清除，否则永久保存</td><td>仅在当前会话下有效，关闭页面或浏览器后被清除</td></tr><tr><td>存放数据大小</td><td>4K左右</td><td colspan="2">一般为5MB</td></tr><tr><td>与服务器端通信</td><td>每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题</td><td colspan="2">仅在客户端（即浏览器）中保存，不参与和服务器的通信</td></tr><tr><td>易用性</td><td>需要程序员自己封装，源生的Cookie接口不友好</td><td colspan="2">源生接口可以接受，亦可再次封装来对Object和Array有更好的支持</td></tr></table><br><strong>注意：像记住密码等功能，一般在服务器端把用户信息加密存储在cookie，因为cookie的主要用途就是与服务器端的通信</strong></p>
<h3 id="本地存储的综合示例"><a href="#本地存储的综合示例" class="headerlink" title="本地存储的综合示例"></a>本地存储的综合示例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">            <span class="selector-tag">body</span> &gt; *&#123;</div><div class="line">                <span class="attribute">float</span>: left;</div><div class="line">                <span class="attribute">margin</span>: <span class="number">4px</span> <span class="number">6px</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="selector-tag">table</span>&#123;</div><div class="line">                <span class="attribute">border-collapse</span>: collapse;</div><div class="line">            &#125;</div><div class="line">            <span class="selector-tag">table</span> <span class="selector-tag">td</span>&#123;</div><div class="line">                <span class="attribute">padding</span>: <span class="number">6px</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="selector-tag">p</span>&#123;</div><div class="line">                <span class="attribute">margin</span>: <span class="number">4px</span> <span class="number">0</span>;</div><div class="line">                <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"key"</span>&gt;</span>键：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"key"</span>/&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"value"</span>&gt;</span>值：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"value"</span>/&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"btns"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"add"</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"clear"</span>&gt;</span>清除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"msg"</span>&gt;</span>There are <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"count"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> items!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">            displayData();</div><div class="line">            <span class="built_in">document</span>.getElementById(<span class="string">"btns"</span>).addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> id = e.target.getAttribute(<span class="string">"id"</span>);</div><div class="line">                <span class="keyword">switch</span>(id)&#123;</div><div class="line">                    <span class="keyword">case</span> <span class="string">"add"</span>:</div><div class="line">                        <span class="keyword">var</span> key = <span class="built_in">document</span>.getElementById(<span class="string">"key"</span>).value;</div><div class="line">                        <span class="keyword">var</span> val = <span class="built_in">document</span>.getElementById(<span class="string">"value"</span>).value;</div><div class="line">                        localStorage.setItem(key,val);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> <span class="string">"clear"</span>:</div><div class="line">                        localStorage.clear();</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                displayData();</div><div class="line">            &#125;);</div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">displayData</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> tableElem = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"table"</span>)[<span class="number">0</span>];</div><div class="line">                tableElem.innerHTML = <span class="string">""</span>;</div><div class="line">                <span class="keyword">var</span> itemCount = localStorage.length;</div><div class="line">                <span class="built_in">document</span>.getElementById(<span class="string">"count"</span>).innerHTML = itemCount;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; itemCount ; i++)&#123;</div><div class="line">                    <span class="keyword">var</span> key = localStorage.key(i);</div><div class="line">                    tableElem.innerHTML+=<span class="string">"&lt;tr&gt;&lt;td&gt;"</span>+key+<span class="string">"&lt;/td&gt;&lt;td&gt;"</span>+localStorage.getItem(key)+<span class="string">"&lt;/td&gt;&lt;/tr&gt;"</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Web存储允许我们在浏览器里保存简单的键/值数据。Web存储与cookie很相似。&lt;/p&gt;
    
    </summary>
    
      <category term="HTML5" scheme="http://heji.website/categories/HTML5/"/>
    
    
      <category term="web前端" scheme="http://heji.website/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="HTML5" scheme="http://heji.website/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>HTML5-使用拖放</title>
    <link href="http://heji.website/2017/01/06/HTML5-%E4%BD%BF%E7%94%A8%E6%8B%96%E6%94%BE/"/>
    <id>http://heji.website/2017/01/06/HTML5-使用拖放/</id>
    <published>2017-01-06T06:18:06.333Z</published>
    <updated>2017-01-06T06:19:37.931Z</updated>
    
    <content type="html"><![CDATA[<p>HTML5添加了对拖放的支持。</p>
<a id="more"></a>
<h3 id="实现简单拖放"><a href="#实现简单拖放" class="headerlink" title="实现简单拖放"></a>实现简单拖放</h3><ul>
<li><p>设置拖放<br>  我们通过draggable属性告诉浏览器文档里的哪些元素可以被拖动。这个属性有三个允许的值：</p>
  <table><tr><td>值</td><td>说明</td></tr><tr><td>true</td><td>此元素能被拖动</td></tr><tr><td>false</td><td>此元素不能被拖动</td></tr><tr><td>auto</td><td>浏览器自主决定某个元素是否能被拖动</td></tr></table>
</li>
<li><p>处理拖动事件<br>  我们通过一系列事件来利用拖放功能。这些事件有的针对被拖动元素，有的针对可能的释放区<br>  <table><tr><td>事件名称</td><td>说明</td></tr><tr><td>dragstart</td><td>在元素开始被拖动时触发</td></tr><tr><td>drag</td><td>在元素被拖动时触发</td></tr><tr><td>dragend</td><td>在拖动操作完成时触发</td></tr></table><br>  下面是简单例子：<br>  <img src="index_files/9a360800-e7bb-4017-8bee-d59d2aea4406.jpg" alt=""></p>
</li>
<li><p>创建释放区<br>  要让某个元素成为释放区，我们需要处理dragenter和dragover事件。它们是针对释放区的其中两个事件。</p>
  <table><tr><td>事件名称</td><td>说明</td></tr><tr><td>dragenter</td><td>当被拖动元素进入释放区所占据的屏幕空间时触发</td></tr><tr><td>dragover</td><td>当被拖动元素在释放区移动时触发</td></tr><tr><td>dragleave</td><td>当被拖动元素没有放下就离开释放区时触发</td></tr><tr><td>drop</td><td>当被拖动元素在释放区放下时触发</td></tr></table>
</li>
<li><p>处理释放事件（简单拖放例子）</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">    <span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>RunJS<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">            <span class="selector-tag">body</span> &gt; *&#123;</div><div class="line">                <span class="attribute">float</span>:left;</div><div class="line">            &#125;</div><div class="line">            <span class="selector-tag">body</span> &gt; <span class="selector-tag">img</span>&#123;</div><div class="line">                <span class="attribute">margin</span>:<span class="number">4px</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="selector-tag">img</span>&#123;</div><div class="line">                <span class="attribute">height</span>:<span class="number">200px</span>;</div><div class="line">                <span class="attribute">width</span>:<span class="number">280px</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="selector-tag">img</span><span class="selector-class">.dragged</span>&#123;</div><div class="line">                <span class="attribute">border</span>:<span class="number">2px</span> solid lightgrey;</div><div class="line">            &#125;</div><div class="line">            <span class="selector-id">#target</span>&#123;</div><div class="line">                <span class="attribute">height</span>:<span class="number">200px</span>;</div><div class="line">                <span class="attribute">width</span>:<span class="number">280px</span>;</div><div class="line">                <span class="attribute">line-height</span>:<span class="number">200px</span>;</div><div class="line">                <span class="attribute">text-align</span>:center;</div><div class="line">                <span class="attribute">border</span>:<span class="number">2px</span> solid <span class="number">#ccc</span>;</div><div class="line">                <span class="attribute">padding</span>:<span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">draggable</span>=<span class="string">"true"</span> <span class="attr">src</span>=<span class="string">"http://sandbox.runjs.cn/uploads/rs/241/haz4fri9/tomato.jpg"</span> <span class="attr">id</span>=<span class="string">"tomato"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">draggable</span>=<span class="string">"true"</span> <span class="attr">src</span>=<span class="string">"http://sandbox.runjs.cn/uploads/rs/241/haz4fri9/orange.jpg"</span> <span class="attr">id</span>=<span class="string">"orange"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">draggable</span>=<span class="string">"true"</span> <span class="attr">src</span>=<span class="string">"http://sandbox.runjs.cn/uploads/rs/241/haz4fri9/strawberry.jpg"</span> <span class="attr">id</span>=<span class="string">"strawberry"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"target"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"msg"</span>&gt;</span></div><div class="line">                Drop here!</div><div class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">            <span class="keyword">var</span> body = <span class="built_in">document</span>.body;</div><div class="line">            <span class="keyword">var</span> target = <span class="built_in">document</span>.getElementById(<span class="string">"target"</span>);</div><div class="line">            <span class="keyword">var</span> msg = <span class="built_in">document</span>.getElementById(<span class="string">"msg"</span>);</div><div class="line">            <span class="comment">//接收被拖放元素的ID</span></div><div class="line">            <span class="keyword">var</span> draggedId;</div><div class="line">            <span class="comment">//处理拖放事件</span></div><div class="line">            target.ondragcenter = handleDrag;</div><div class="line">            target.ondragover = handleDrag;</div><div class="line">            <span class="comment">//在进入释放区和在释放区移动、释放时要阻止事件的默认行为，否则会发生意料之外的结果</span></div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">handleDrag</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">                e.preventDefault();</div><div class="line">            &#125;</div><div class="line">            target.ondrop = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> newElem = <span class="built_in">document</span>.getElementById(draggedId).cloneNode(<span class="literal">false</span>);</div><div class="line">                target.innerHTML = <span class="string">""</span>;</div><div class="line">                target.appendChild(newElem);</div><div class="line">                e.preventDefault();</div><div class="line">            &#125;</div><div class="line">            body.ondragstart = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">                draggedId = e.target.id;</div><div class="line">                e.target.classList.add(<span class="string">"dragged"</span>);</div><div class="line">            &#125;</div><div class="line">            body.ondragend = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> elems = <span class="built_in">document</span>.querySelectorAll(<span class="string">".dragged"</span>);</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; elems.length ; i++ )&#123;</div><div class="line">                    elems[i].classList.remove(<span class="string">"dragged"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>  效果请查看：<a href="http://runjs.cn/detail/3oiwealn" target="_blank" rel="external">简单拖放</a></p>
</li>
</ul>
<h3 id="使用DataTransfer对象"><a href="#使用DataTransfer对象" class="headerlink" title="使用DataTransfer对象"></a>使用DataTransfer对象</h3><p>与拖放操作所触发的事件同时派发的对象是DragEvent，它派生于MouseEvent，并增加了额外的属性：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
<th>返回</th>
</tr>
</thead>
<tbody>
<tr>
<td>dataTransfer</td>
<td>返回用于传输数据到释放区的对象</td>
<td>DataTransfer</td>
</tr>
</tbody>
</table>
<p>我们可以用DataTransfer对象从被拖动元素传输任意数据到释放区元素上。DataTransfer定义的属性和方法如下表：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
<th>返回</th>
</tr>
</thead>
<tbody>
<tr>
<td>types</td>
<td>返回数据的格式</td>
<td>字符串数组</td>
</tr>
<tr>
<td>getData（format）</td>
<td>返回指定格式的数据</td>
<td>字符串</td>
</tr>
<tr>
<td>setData(format，data)</td>
<td>设置指定格式的数据</td>
<td>void</td>
</tr>
<tr>
<td>clearData(format)</td>
<td>移除指定格式的数据</td>
<td>void</td>
</tr>
<tr>
<td>files</td>
<td>返回已被拖动文件的列表</td>
<td>FileList</td>
</tr>
</tbody>
</table>
<ul>
<li><p>使用DataTransfer对象从被拖动元素传输数据到释放区<br>  <img src="index_files/49ecc187-0389-4dba-8cd3-30e578ec8841.jpg" alt=""><br>  setData方法第一个参数和getData方法的参数指定数据的格式，它只支持两个值：Text和Url。setData方法第二个参数是我们要传输的数据。使用这种方式最大的好处是支持跨不同类型的浏览器，因为拖放功能是集成在操作系统里的。例如我们可以在Chrome浏览器的文档里拖动一个元素，然后再Firefox浏览器的文档里释放它。</p>
</li>
<li><p>拖放文件<br>  上一节介绍了DataTransfer对象有一个files属性返回拖放的File对象的集合。File API是HTML5新增的功能，File对象定义的属性如下<br>  <table><tr><td>名称</td><td>说明</td><td>返回</td></tr><tr><td>name</td><td>获取文件名</td><td>字符串</td></tr><tr><td>type</td><td>获取文件类型，以MIME类型表示</td><td>字符串</td></tr><tr><td>size</td><td>获取文件大小（以字节计算）</td><td>字符串</td></tr></table><br>  下面是拖放文件的例子：</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">    <span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">            <span class="selector-id">#target</span>&#123;</div><div class="line">                <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">                <span class="attribute">line-height</span>: <span class="number">200px</span>;</div><div class="line">                <span class="attribute">text-align</span>: center;</div><div class="line">                <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e5e5e5</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="selector-tag">p</span>&#123;</div><div class="line">                <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">                <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="selector-id">#fileDetail</span>&#123;</div><div class="line">                <span class="attribute">border-collapse</span>: collapse;</div><div class="line">            &#125;</div><div class="line">            <span class="selector-id">#fileDetail</span> <span class="selector-tag">th</span>,<span class="selector-id">#fileDetail</span> <span class="selector-tag">td</span>&#123;</div><div class="line">                <span class="attribute">padding</span>: <span class="number">4px</span>;</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"target"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"msg"</span>&gt;</span>Drop here!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">"fileDetail"</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">            <span class="keyword">var</span> target = <span class="built_in">document</span>.getElementById(<span class="string">"target"</span>);</div><div class="line">            target.ondragenter = handleDrag;</div><div class="line">            target.ondragover = handleDrag;</div><div class="line">            target.ondrop = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">                <span class="built_in">document</span>.getElementById(<span class="string">"msg"</span>).innerHTML = <span class="string">"File dropped"</span>;</div><div class="line">                <span class="comment">//文件</span></div><div class="line">                <span class="keyword">var</span> fileList = e.dataTransfer.files;</div><div class="line">                <span class="keyword">if</span>(fileList.length &gt; <span class="number">0</span>)&#123;</div><div class="line">                    <span class="keyword">var</span> fileDetail = <span class="built_in">document</span>.getElementById(<span class="string">"fileDetail"</span>);</div><div class="line">                    fileDetail.innerHTML = <span class="string">"&lt;tr&gt;&lt;th&gt;文件名称&lt;/th&gt;&lt;th&gt;文件类型&lt;/th&gt;&lt;th&gt;文件大小&lt;/th&gt;&lt;/tr&gt;"</span>;</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; fileList.length ; i++)&#123;</div><div class="line">                        fileDetail.innerHTML += <span class="string">"&lt;tr&gt;&lt;td&gt;"</span>+fileList[i].name+<span class="string">"&lt;/td&gt;&lt;td&gt;"</span>+fileList[i].type+<span class="string">"&lt;/td&gt;&lt;td&gt;"</span>+fileList[i].size+<span class="string">"&lt;/td&gt;&lt;/tr&gt;"</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                e.preventDefault();</div><div class="line">            &#125;</div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">handleDrag</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">                e.preventDefault();</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>  需要注意的是，我们借助DataTransfer对象以及HTML5的FormData对象就能实现拖拽上传文件了：<br>  <img src="index_files/0c8983c5-8f21-4fcd-938c-6bbbd7e7f2c0.jpg" alt=""></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HTML5添加了对拖放的支持。&lt;/p&gt;
    
    </summary>
    
      <category term="HTML5" scheme="http://heji.website/categories/HTML5/"/>
    
    
      <category term="web前端" scheme="http://heji.website/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="HTML5" scheme="http://heji.website/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>HTML5-地理定位</title>
    <link href="http://heji.website/2017/01/06/HTML5-%E5%9C%B0%E7%90%86%E5%AE%9A%E4%BD%8D/"/>
    <id>http://heji.website/2017/01/06/HTML5-地理定位/</id>
    <published>2017-01-06T06:16:28.828Z</published>
    <updated>2017-01-06T06:17:43.828Z</updated>
    
    <content type="html"><![CDATA[<p>地理定位API不是HTML5规范的一部分，但经常被归组到HTML5相关的新功能中。</p>
<a id="more"></a>
<h3 id="地理定位"><a href="#地理定位" class="headerlink" title="地理定位"></a>地理定位</h3><ul>
<li>使用地理定位<br>  我们通过全局属性navigator.geolocation访问地理定位功能，它返回一个Geolocation对象，下面是这个对象的方法：  <table><tr><td>getCurrentPosition(callback,errorCallback,options)</td><td>获取当前位置</td><td>void</td></tr><tr><td>watchPosition(callback,errorCallback,options)</td><td>开始监控当前位置</td><td>数值</td></tr><tr><td>clearWatch(id)</td><td>停止监控当前位置</td><td>void</td></tr></table></li>
<li>获取当前位置的getCurrentPosition方法<br>  getCurrentPosition方法获取当前位置，方法接受三个参数，第一个是成功之后的回调函数，该函数获得一个表示当前位置的Position对象；第二个参数是定位错误的回调函数，此函数会获得一个PositionError对象；第三个参数是表示地理定位选项的对象。</li>
<li>Position对象<br>  Position对象只有两个属性：coords属性返回一个Coordinates对象，包含当前位置的坐标；timestamp属性返回获取坐标信息的时间戳，下面是Coordinates对象的相关属性：  <table><tr><td>名称</td><td>说明</td><td>返回</td></tr><tr><td>latitude</td><td>返回由十进制表示的纬度</td><td>数值</td></tr><tr><td>longitude</td><td>返回由十进制表示的经度</td><td>数值</td></tr><tr><td>altitude</td><td>返回用米表示的海拔高度</td><td>数值</td></tr><tr><td>accuracy</td><td>返回用米表示的坐标精度</td><td>数值</td></tr><tr><td>altitudeAccuracy</td><td>返回用米表示的海拔精度</td><td>数值</td></tr><tr><td>heading</td><td>返回用度表示的前进方向</td><td>数值</td></tr><tr><td>speed</td><td>返回用米/秒表示的行进速度</td><td>数值</td></tr></table></li>
<li>PositionError对象<br>  PositionError对象只有两个属性：code属性返回代表错误类型的代码；message返回描述错误的字符串。<br>  <img src="index_files/299dee61-9d17-4060-97eb-4c2f39a52ae1.jpg" alt=""></li>
<li>指定地理定位选项<br>  <img src="index_files/2909d3e9-5724-4d45-a476-5329b8ba18a1.jpg" alt=""></li>
<li><p>地理定位综合例子：</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">    <span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">            <span class="selector-tag">table</span>&#123;</div><div class="line">                <span class="attribute">border-collapse</span>: collapse;</div><div class="line">            &#125;</div><div class="line">            <span class="selector-tag">table</span> <span class="selector-tag">td</span>&#123;</div><div class="line">                <span class="attribute">padding</span>: <span class="number">4px</span>;</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Longitude<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">"longitude"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Latitude<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">"latitude"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Altitude<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">"altitude"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Accuracy<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">"accuracy"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Altitude Accuracy<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">"altitudeAccuracy"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Heading<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">"heading"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Speed<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">"speed"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Time Stamp<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">"timestamp"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Error Code<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">"errorcode"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Error Message<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">"errormessage"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">            <span class="keyword">var</span> options = &#123;</div><div class="line">                enableHighAccuracy:<span class="literal">false</span>,</div><div class="line">                timeout:<span class="number">2000</span>,</div><div class="line">                maximumAge:<span class="number">30000</span></div><div class="line">            &#125;</div><div class="line">            navigator.geolocation.getCurrentPosition(displayPosition,handleError,options);</div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">displayPosition</span>(<span class="params">pos</span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> properties = [<span class="string">"longitude"</span>,<span class="string">"latitude"</span>,<span class="string">"altitude"</span>,<span class="string">"accuracy"</span>,<span class="string">"altitudeAccuracy"</span>,<span class="string">"heading"</span>,<span class="string">"speed"</span>];</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; properties.length ; i++)&#123;</div><div class="line">                    <span class="keyword">var</span> value = pos.coords[properties[i]];</div><div class="line">                    <span class="built_in">document</span>.getElementById(properties[i]).innerHTML = value;</div><div class="line">                &#125;</div><div class="line">                <span class="built_in">document</span>.getElementById(<span class="string">"timestamp"</span>).innerHTML = pos.timestamp;</div><div class="line">            &#125;</div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">handleError</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">                <span class="built_in">document</span>.getElementById(<span class="string">"errorcode"</span>).innerHTML = e.code;</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>监控位置<br>  可以用<code>watchPosition</code>方法不断获得关于位置的更新。这个方法所需的参数和<code>getCurrentPosition</code>方法相同，工作方式也一样。它们的区别在于：随着位置发生改变，回调函数会被反复地调用。<br>  如果想要停止监控，可以把<code>navigator.geolocation.watchPosition</code>方法返回的ID值传给<code>clearWatch</code>方法。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;地理定位API不是HTML5规范的一部分，但经常被归组到HTML5相关的新功能中。&lt;/p&gt;
    
    </summary>
    
      <category term="HTML5" scheme="http://heji.website/categories/HTML5/"/>
    
    
      <category term="web前端" scheme="http://heji.website/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="HTML5" scheme="http://heji.website/tags/HTML5/"/>
    
  </entry>
  
</feed>
