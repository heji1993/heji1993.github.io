<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>何机的技术博客</title>
  <subtitle>No pains,no gains</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://heji.website/"/>
  <updated>2017-03-06T06:54:35.147Z</updated>
  <id>http://heji.website/</id>
  
  <author>
    <name>何机</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>第六章、运动商店：订单和管理</title>
    <link href="http://heji.website/2017/03/06/%E7%AC%AC%E5%85%AD%E7%AB%A0%E3%80%81%E8%BF%90%E5%8A%A8%E5%95%86%E5%BA%97%EF%BC%9A%E8%AE%A2%E5%8D%95%E5%92%8C%E7%AE%A1%E7%90%86/"/>
    <id>http://heji.website/2017/03/06/第六章、运动商店：订单和管理/</id>
    <published>2017-03-06T06:52:34.439Z</published>
    <updated>2017-03-06T06:54:35.147Z</updated>
    
    <content type="html"><![CDATA[<p>在本章中，我会收集并验证运输详情以完成运动商店应用程序，并把订单存储在Deployd服务器上。我还会创建管理应用程序，让认证的用户看到订单并管理产品目录。</p>
<a id="more"></a>
<h2 id="准备示例程序"><a href="#准备示例程序" class="headerlink" title="准备示例程序"></a>准备示例程序</h2><p>我将继续在上一章的项目上构建，你可以从<code>https://github.com/heji1993/angular-sportsstore.git</code>上获取源码。<br>在上一章中，我在<code>app.html</code>添加了两个URL路由，它们是本章完成结账过程所需的：<br><img src="imgs/1486699645094_2.png" alt=""></p>
<h2 id="获取运输详情"><a href="#获取运输详情" class="headerlink" title="获取运输详情"></a>获取运输详情</h2><p>在购物车中为用户显示商品总览后，我想获取订单的运输详情，这带我来到了AngularJS与表单相关的特性面前。我创建<code>views/placeorder.html</code>文件捕获用户的运输详情。下面是该文件的内容：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>提交订单<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>请输入你的相关信息，我们会直接把你的商品邮寄给你<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"well"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">h3</span>&gt;</span>收件人<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">label</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-model</span>=<span class="string">"data.shipping.name"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">h3</span>&gt;</span>收货地址<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">label</span>&gt;</span>街道地址<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-model</span>=<span class="string">"data.shipping.street"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>完成订单<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>关于该视图，首先要注意的是我没有使用ng-controller指令指定控制器，这意味着视图将被顶级控制器<code>sportsStoreCtrl</code>支持。另外，在输入框元素上，我使用了ng-model指令进行数据绑定，与双花括号不同的是，ng-model是双向数据绑定，视图上模型的改变会更新到作用域，而双花括号是单向绑定，通常用于展示。当data对象没有shipping属性时，AngularJS会动态创建这个属性。</p>
<h3 id="添加表单验证"><a href="#添加表单验证" class="headerlink" title="添加表单验证"></a>添加表单验证</h3><p>AngularJS支持表单验证，它能检查数值的适用性。<br>AngularJS表单校验基于元素上标准的HTML属性，比如type和required。表单验证自动执行，但仍需要一些工作来将验证的反馈呈现给用户，并在应用程序中整合整体的验证不通过的提示。</p>
<ul>
<li><p>验证的准备<br>  设置表单验证的第一步是在视图上添加form元素并在我的input元素上添加验证属性。下面是<code>views/placeorder.html</code>文件修改的内容：</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"shippingForm"</span> <span class="attr">novalidate</span>=<span class="string">""</span>&gt;</span></div><div class="line">    ...</div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-model</span>=<span class="string">"data.shipping.name"</span> <span class="attr">required</span>=<span class="string">"required"</span>/&gt;</span></div><div class="line">    ...</div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-model</span>=<span class="string">"data.shipping.street"</span> <span class="attr">required</span>=<span class="string">"required"</span>/&gt;</span></div><div class="line">    ...</div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p>  新增一个form元素有三个目的：开启表单验证；<code>novalidate</code>属性是H5的标准属性，表示禁用浏览器的默认校验，让表单校验统一由AngularJS执行；定义一个变量，用来报告表单的有效性，它通过name属性实现，我把它设置为shippingForm，在后面将会演示如何使用。</p>
</li>
<li><p>显示验证反馈<br>  一旦form元素和验证属性被放好，AngularJS就会开始验证用户所提供的数据，AngularJS提供两种验证结果的反馈形式：1.使用AngularJS赋予form元素的通过验证和未通过验证的类来定义CSS样式，当通过校验时，元素会有<code>ng-valid</code>类，当没有通过校验时，元素会有<code>ng-invalid</code>类。2.使用作用域变量的属性判断，比如，不满足 <code>required</code>时,<code>formName.inputName.$error</code>为<code>{required: true}</code>，更多验证请查看官方API。下面是<code>views/placeorder.html</code>文件部分修改的代码：</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">      ...</div><div class="line">      <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">      	.ng-valid&#123;</div><div class="line">      		border-color: lightgreen;</div><div class="line">      	&#125;</div><div class="line">      	.ng-invalid&#123;</div><div class="line">      		border-color: lightpink;</div><div class="line">      	&#125;</div><div class="line">      	span.error&#123;</div><div class="line">      		font-weight: bold;</div><div class="line">      		color: red;</div><div class="line">      	&#125;</div><div class="line">      <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">      ...</div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">label</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-model</span>=<span class="string">"data.shipping.name"</span> <span class="attr">required</span>=<span class="string">"required"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error"</span> <span class="attr">ng-show</span>=<span class="string">"shippingForm.name.$error.required"</span>&gt;</span>请输入姓名<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>收货地址<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">label</span>&gt;</span>街道地址<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"street"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-model</span>=<span class="string">"data.shipping.street"</span> <span class="attr">required</span>=<span class="string">"required"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error"</span> <span class="attr">ng-show</span>=<span class="string">"shippingForm.street.$error.required"</span>&gt;</span>请输入街道地址<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>连接按钮来验证<br>  当表单内一个或多个input元素未通过验证，<code>formName.$invalid</code>属性的值将会被AngularJS设为true，我们可以把它和ng-disabled指令联合来管理button元素的状态（校验未通过不允许点击提交），下面是<code>views/placeorder.html</code>文件部分修改的代码：</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">      ...</div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">ng-disabled</span>=<span class="string">"shippingForm.$invalid"</span>&gt;</span>完成订单<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">...</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="添加剩下的表单字段"><a href="#添加剩下的表单字段" class="headerlink" title="添加剩下的表单字段"></a>添加剩下的表单字段</h3><p>现在我将在表单中添加剩下的input元素，下面是<code>views/placeorder.html</code>文件的完整代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">	.ng-valid&#123;</div><div class="line">		border-color: lightgreen;</div><div class="line">	&#125;</div><div class="line">	.ng-invalid&#123;</div><div class="line">		border-color: lightpink;</div><div class="line">	&#125;</div><div class="line">	span.error&#123;</div><div class="line">		font-weight: bold;</div><div class="line">		color: red;</div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>提交订单<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>请输入你的相关信息，我们会直接把你的商品邮寄给你<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"shippingForm"</span> <span class="attr">novalidate</span>=<span class="string">""</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"well"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">h3</span>&gt;</span>收件人<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">label</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-model</span>=<span class="string">"data.shipping.name"</span> <span class="attr">required</span>=<span class="string">"required"</span>/&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error"</span> <span class="attr">ng-show</span>=<span class="string">"shippingForm.name.$error.required"</span>&gt;</span>请输入姓名<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">h3</span>&gt;</span>收货地址<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">label</span>&gt;</span>街道<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"street"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-model</span>=<span class="string">"data.shipping.street"</span> <span class="attr">required</span>=<span class="string">"required"</span>/&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error"</span> <span class="attr">ng-show</span>=<span class="string">"shippingForm.street.$error.required"</span>&gt;</span>请输入街道地址<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">label</span>&gt;</span>区<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"county"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-model</span>=<span class="string">"data.shipping.county"</span> <span class="attr">required</span>=<span class="string">"required"</span>/&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error"</span> <span class="attr">ng-show</span>=<span class="string">"shippingForm.county.$error.required"</span>&gt;</span>请输入所在区<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">label</span>&gt;</span>市<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"city"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-model</span>=<span class="string">"data.shipping.city"</span> <span class="attr">required</span>=<span class="string">"required"</span>/&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error"</span> <span class="attr">ng-show</span>=<span class="string">"shippingForm.city.$error.required"</span>&gt;</span>请输入所在市<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">label</span>&gt;</span>国家<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"country"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-model</span>=<span class="string">"data.shipping.country"</span> <span class="attr">required</span>=<span class="string">"required"</span>/&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error"</span> <span class="attr">ng-show</span>=<span class="string">"shippingForm.country.$error.required"</span>&gt;</span>请输入所在国家<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">label</span>&gt;</span>邮政编码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"zip"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-model</span>=<span class="string">"data.shipping.zip"</span> <span class="attr">required</span>=<span class="string">"required"</span>/&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error"</span> <span class="attr">ng-show</span>=<span class="string">"shippingForm.zip.$error.required"</span>&gt;</span>请输入所在市、区<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">h3</span>&gt;</span>可选<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkbox"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"giftwarp"</span> <span class="attr">ng-model</span>=<span class="string">"data.shipping.giftwrap"</span>/&gt;</span></div><div class="line">				是否礼盒包装</div><div class="line">			<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">ng-disabled</span>=<span class="string">"shippingForm.$invalid"</span>&gt;</span>完成订单<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="下单"><a href="#下单" class="headerlink" title="下单"></a>下单</h2><p>现在，我将扩展由Deployd服务器提供的数据库，使用Ajax请求发送订单数据到服务器，并最终显示感谢消息来完成这一过程。</p>
<h3 id="扩展Deployd服务"><a href="#扩展Deployd服务" class="headerlink" title="扩展Deployd服务"></a>扩展Deployd服务</h3><p>为管理订单，新增一个order集合，方式和之前创建product集合一样，下面是order必要的属性，与placeorder.html的表单字段对应。<br><img src="imgs/1487743819803_2.png" alt=""></p>
<h3 id="定义控制器行为"><a href="#定义控制器行为" class="headerlink" title="定义控制器行为"></a>定义控制器行为</h3><p>下一步是定义控制器行为，他将使用Ajax请求发送订单明细到Deployd服务器。我们可以使用不同的方法定义该功能，比如服务或新控制器。这种灵活性是使用AngularJS的标志之一。当谈到AngularJS应用程序的架构时，没有绝对的正确或错误，你会开发出属于自己的风格和偏好，积累到你的经验中。我将保持简单，向顶级控制器sportsStore控制器中添加行为，它目前已包含了产生Ajax请求加载产品数据的代码。下面是修改后的<code>controllers/sportsStore.js</code>文件的内容：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//module方法值传一个参数表示我们尝试找到sportsStore这个模块,必须先有sportsStore模块,否则会报错</span></div><div class="line">angular.module(<span class="string">"sportsStore"</span>)</div><div class="line">.constant(<span class="string">"dataUrl"</span>,<span class="string">"http://localhost:5500/products"</span>)</div><div class="line">.constant(<span class="string">"orderUrl"</span>,<span class="string">"http://localhost:5500/orders"</span>)</div><div class="line">.controller(<span class="string">"sportsStoreCtrl"</span>,[<span class="string">"$scope"</span>,<span class="string">"$http"</span>,<span class="string">"$location"</span>,<span class="string">"dataUrl"</span>,<span class="string">"orderUrl"</span>,<span class="string">"cartService"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope,$http,$location,dataUrl,orderUrl,cartService</span>)</span>&#123;</div><div class="line">	$scope.data = &#123;&#125;;</div><div class="line">	<span class="comment">//使用$http服务查询数据</span></div><div class="line">	$http.get(dataUrl)</div><div class="line">	.success(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</div><div class="line">		$scope.data.products = result;</div><div class="line">	&#125;)</div><div class="line">	.error(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</div><div class="line">		$scope.data.error = error;</div><div class="line">	&#125;);</div><div class="line">	<span class="comment">//发送订单</span></div><div class="line">	$scope.sendOrder = <span class="function"><span class="keyword">function</span>(<span class="params">shippingDetails</span>)</span>&#123;</div><div class="line">		<span class="comment">//创建运输详情对象的副本,以便修改不影响程序的其他部分</span></div><div class="line">		<span class="keyword">var</span> order = angular.copy(shippingDetails);</div><div class="line">		<span class="comment">//从购物车获取所有商品</span></div><div class="line">		order.products = cartService.getProducts();</div><div class="line">		<span class="comment">//发送请求提交订单（以post方法提交请求到Deployd服务器并发送数据即完成对象的创建）</span></div><div class="line">		$http.post(orderUrl,order)</div><div class="line">		.success(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">			$scope.data.orderId = data.id;</div><div class="line">			<span class="comment">//清空购物车</span></div><div class="line">			cartService.getProducts().length = <span class="number">0</span>;</div><div class="line">		&#125;)</div><div class="line">		.error(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</div><div class="line">			$scope.data.orderError = error;</div><div class="line">		&#125;)</div><div class="line">		.finally(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="comment">//最后导航到订单完成页面</span></div><div class="line">			$location.path(<span class="string">"/complete"</span>);</div><div class="line">		&#125;)</div><div class="line">	&#125;</div><div class="line">&#125;])</div></pre></td></tr></table></figure></p>
<h3 id="调用控制器行为"><a href="#调用控制器行为" class="headerlink" title="调用控制器行为"></a>调用控制器行为</h3><p>调用新控制器行为，我们需要在运输详情视图中为button元素添加ng-click指令调用行为即可。下面是<code>views/placeorder.html</code>页面部分修改的代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">ng-click</span>=<span class="string">"sendOrder(data.shipping);"</span> <span class="attr">ng-disabled</span>=<span class="string">"shippingForm.$invalid"</span>&gt;</span>完成订单<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="定义视图"><a href="#定义视图" class="headerlink" title="定义视图"></a>定义视图</h3><p>在Ajax请求被完成之后，我所指定的URL路径是<code>/complete</code>，URL路由配置会映射它到文件<code>/views/thankYou.html</code>。我创建了该文件，下面是<code>/views/thankYou.html</code>的内容：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-danger"</span> <span class="attr">ng-show</span>=<span class="string">"data.orderError"</span>&gt;</span></div><div class="line">	发生错误&#123;&#123;data.orderError.status&#125;&#125;.订单尚未完成<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/placeorder"</span> <span class="attr">class</span>=<span class="string">"alert-link"</span>&gt;</span>点击这里重试<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"well"</span> <span class="attr">ng-hide</span>=<span class="string">"data.orderError"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">h2</span>&gt;</span>已下单！<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">	感谢您使用我们的购物平台，您的订单编号是&#123;&#123;data.orderId&#125;&#125;，我们会尽快将商品派送到您手里。</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><ul>
<li>当浏览器载入app.html文件时，视图被显示和产品及分类元素被生成之间有一点延迟。在后面的章节，会讲解如何使用URL路由特性来组织AngularJS在Ajax请求完成之前显示视图。</li>
<li>为了显示导航和分页，我处理产品数据并筛出分类。在实际项目中，我会考虑在产品数据首次到达时只生成该信息一次，之后就复用它，在后续章节介绍如何使用承诺来构建行为链，那是适用于这种任务的理想方式。</li>
<li>最后我会介绍如何使用<code>$animate</code>服务在URL路径改变时显示简短的过渡动画。</li>
</ul>
<h2 id="管理产品分类"><a href="#管理产品分类" class="headerlink" title="管理产品分类"></a>管理产品分类</h2><h3 id="准备Deployd"><a href="#准备Deployd" class="headerlink" title="准备Deployd"></a>准备Deployd</h3><p>我们要对产品进行管理，需要有用户集合。普通用户和管理员还有权限之分。<br>点击新建一个<code>User Collection</code>，User集默认定义了id、username和password属性，全是我所需要的属性。创建集合之后，点击data创建一条数据：<code>{username:&quot;admin&quot;,password:&quot;secret&quot;}</code>。</p>
<ul>
<li><p>巩固集合<br>  Deployd最棒的特性之一是它定义了可用于实现服务端功能的简单JavaScript API（比如验证用户），当对集合进行操作时可以触发一系列的事件。在控制台点击products集合然后单击events，你将看到一系列代表不同集事件的选项卡,如下图：<br>  <img src="imgs/1488251043574_2.png" alt=""><br>  这些事件为所有集定义，你能做许多事情，其中就有使用JavaScript加强验证策略。在On Put和On Delete标签中输入以下JavaScript：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(!me || me.username!=<span class="string">"admin"</span>)&#123;</div><div class="line">    <span class="comment">//401表示被请求的页面要求身份验证</span></div><div class="line">    cancel(<span class="string">"没有权限"</span>,<span class="number">401</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  在Deployd的API中，me表示当前用户，而cancel函数终止指定消息和HTTP状态码的请求。这段代码允许验证后的admin用户访问，终止所有其他401状态码的请求。<br>  在orders集合中为ON GET、ON PUT和ON DELETE 事件重复这一过程，因为这些事件都需要验证用户身份，下面是需要添加验证控制的事件：<br>  <img src="imgs/1488252583879_3.png" alt=""></p>
</li>
</ul>
<h3 id="创建管理应用程序"><a href="#创建管理应用程序" class="headerlink" title="创建管理应用程序"></a>创建管理应用程序</h3><p>我将为管理任务创建单独的AngularJS应用程序。但我会把它相关代码整合到主应用程序中。我向<code>angular-sportsstore</code>项目根目录添加一个新文件<code>admin.html</code>，下面是它的内容：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">ng-app</span>=<span class="string">"sportsStoreAdmin"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"angular.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"ngmodules/angular-route.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"bootstrap.css"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"bootstrap-theme.css"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">			angular.module(<span class="string">"sportsStoreAdmin"</span>,[<span class="string">"ngRoute"</span>])</div><div class="line">			.config([<span class="string">"$routeProvider"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$routeProvider</span>)</span>&#123;</div><div class="line">				$routeProvider.when(<span class="string">"/login"</span>,&#123;</div><div class="line">					templateUrl : <span class="string">"views/adminLogin.html"</span></div><div class="line">				&#125;);</div><div class="line">				$routeProvider.when(<span class="string">"/main"</span>,&#123;</div><div class="line">					templateUrl : <span class="string">"views/adminMain.html"</span></div><div class="line">				&#125;);</div><div class="line">				$routeProvider.otherwise(&#123;</div><div class="line">					redirectTo : <span class="string">"/login"</span></div><div class="line">				&#125;);</div><div class="line">			&#125;])</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">ng-view</span>&gt;</span><span class="tag">&lt;/<span class="name">ng-view</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>该html文件引入一些必须的文件，以及定义sportsstoreAdmin模块并配置了路由。为了定义路由的otherwise方法，我使用了redirectTo，它改变URL路径到其他路由，这将是我可以验证用户。后面章节会详细讲述URL路由的配置项。</p>
<ul>
<li><p>添加占位符<br>  我将首先实现验证特性，但我需要为<code>/views/adminMain.html</code>视图文件创建一些占位内容，以让我有一些东西在验证成功后显示。下面是文件内容（临时的）：</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"well"</span>&gt;</span></div><div class="line">	这是主页面</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="实现验证"><a href="#实现验证" class="headerlink" title="实现验证"></a>实现验证</h3><p>Deployd验证用户使用标准HTTP请求，应用程序发送POST请求到/users/login（这是Deployd进行登录验证的URL），需要在请求提包含username和password。如果验证尝试成功了服务器就响应状态码200，在用户无法验证时状态码是401。为实现验证，我先定义产生Ajax调用的控制器并处理响应，下面是<code>controllers/adminControllers.js</code>文件的内容：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">"sportsStoreAdmin"</span>)</div><div class="line">.constant(<span class="string">"authUrl"</span>,<span class="string">"http://localhost:5500/users/login"</span>)</div><div class="line">.controller(<span class="string">"authCtrl"</span>,[<span class="string">"$scope"</span>,<span class="string">"$http"</span>,<span class="string">"$location"</span>,<span class="string">"authUrl"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope,$http,$location,authUrl</span>)</span>&#123;</div><div class="line">	$scope.authenticate = <span class="function"><span class="keyword">function</span>(<span class="params">username,password</span>)</span>&#123;</div><div class="line">		$http.post(authUrl,&#123;</div><div class="line">			username:username,</div><div class="line">			password:password</div><div class="line">		&#125;,&#123;</div><div class="line">			<span class="comment">//设置为true,会企业跨域请求的支持,允许Ajax请求使用cookie处理验证。后面会介绍</span></div><div class="line">			withCredentials : <span class="literal">true</span></div><div class="line">		&#125;).success(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">			$location.path(<span class="string">"/main"</span>);</div><div class="line">		&#125;).error(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</div><div class="line">			$scope.authenticationError = error;</div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line">&#125;])</div></pre></td></tr></table></figure>
<p>使用控制器，在<code>admin.html</code>页面引入<code>controllers/adminControllers.js</code>文件即可，注意确保它出现在模块定义的代码后面。</p>
<ul>
<li><p>定义验证视图<br>  下一步是创建允许用户输入用户名和密码的视图，调用authCtrl控制器所定义的行为<code>authenticate</code>，然后显示任何错误的详情。下面是<code>views/adminLogin.html</code>文件的内容：</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"well"</span> <span class="attr">ng-controller</span>=<span class="string">"authCtrl"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-info"</span> <span class="attr">ng-hide</span>=<span class="string">"authenticationError"</span>&gt;</span></div><div class="line">		请输入你的用户名和密码进行登录验证</div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-danger"</span> <span class="attr">ng-show</span>=<span class="string">"authenticationError"</span>&gt;</span></div><div class="line">		验证失败(&#123;&#123;authenticationError.status&#125;&#125;)。请重新尝试。</div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">novalidate</span>=<span class="string">"novalidate"</span> <span class="attr">name</span>=<span class="string">"authForm"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-model</span>=<span class="string">"username"</span> <span class="attr">required</span>=<span class="string">"required"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-model</span>=<span class="string">"password"</span> <span class="attr">required</span>=<span class="string">"required"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">ng-disabled</span>=<span class="string">"authForm.$invalid"</span> <span class="attr">ng-click</span>=<span class="string">"authenticate(username,password)"</span>&gt;</span></div><div class="line">				登录</div><div class="line">			<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="定义主视图和控制器"><a href="#定义主视图和控制器" class="headerlink" title="定义主视图和控制器"></a>定义主视图和控制器</h3><p>一旦用户验证通过，ng-view指令就显示adminMain.html视图，该视图将允许管理员管理产品分类的内容以及查看订单队列。<br>在开始之前，我先定义占位内容用于显示产品分类视图和订单列表视图。首先，我创建<code>views/adminProducts.html</code>，下面是文件内容：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"well"</span>&gt;</span></div><div class="line">	这是产品视图</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>类似地，我创建了<code>views/adminOrders.html</code>文件，并定义了相似的占位内容，下面是文件内容：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"well"</span>&gt;</span></div><div class="line">	这是订单视图</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>由于在主视图<code>views/adminMain.html</code>需要切换产品视图和订单视图，但遗憾的是<code>ng-view</code>指令不能嵌套使用，所以，我将使用<code>ng-include</code>指令来处理它，作为不太优雅（但功能完善）的代替品。现在，我在<code>controllers/adminControllers.js</code>文件中定义新的控制器，下面是部分修改的内容：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">.controller(<span class="string">"mainCtrl"</span>,[<span class="string">"$scope"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</div><div class="line">	$scope.screens = [<span class="string">"Products"</span>,<span class="string">"Orders"</span>];</div><div class="line">	$scope.current = $scope.screens[<span class="number">0</span>];</div><div class="line">	<span class="comment">//设置视图</span></div><div class="line">	$scope.setScreen = <span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</div><div class="line">		$scope.current = $scope.screens[index];</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//获取视图</span></div><div class="line">	$scope.getScreen = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> $scope.current == <span class="string">"Products"</span> ?</div><div class="line">				<span class="string">"views/adminProducts.html"</span> : <span class="string">"views/adminOrders.html"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;]);</div></pre></td></tr></table></figure>
<p>下面是修改后的<code>views/adminMain.html</code>文件：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-default row"</span> <span class="attr">ng-controller</span>=<span class="string">"mainCtrl"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-3 panel-body"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--ng-class:如果是一个对象。那么如果某个键所对应的的值是true则该键将会作为一个类名--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">span</span> <span class="attr">ng-repeat</span>=<span class="string">"item in screens"</span> </span></div><div class="line">			<span class="attr">class</span>=<span class="string">"btn btn-block btn-default"</span></div><div class="line">			<span class="attr">ng-class</span>=<span class="string">"&#123;'btn-primary':item == current&#125;"</span></div><div class="line">			<span class="attr">ng-click</span>=<span class="string">"setScreen($index);"</span>&gt;</div><div class="line">			&#123;&#123;item&#125;&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-8 panel-body"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-include</span>=<span class="string">"getScreen()"</span>&gt;</span></div><div class="line">			</div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="实现订单特性"><a href="#实现订单特性" class="headerlink" title="实现订单特性"></a>实现订单特性</h3><p>我现在开始订单列表，它处理起来是最简单的，因为我仅仅是要显示只读列表，在实际中可能会更复杂。我想<code>controllers/adminControllers.js</code>添加订单控制器，下面是部分修改的代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">.controller(<span class="string">"ordersCtrl"</span>,[<span class="string">"$scope"</span>,<span class="string">"$http"</span>,<span class="string">"ordersUrl"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope,$http,ordersUrl</span>)</span>&#123;</div><div class="line">	$http.get(ordersUrl,&#123;withCredentials:<span class="literal">true</span>&#125;)</div><div class="line">		.success(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">			$scope.orders = data;</div><div class="line">		&#125;)</div><div class="line">		.error(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</div><div class="line">			$scope.error = error;</div><div class="line">		&#125;);</div><div class="line">	$scope.selectedOrder;</div><div class="line">	<span class="comment">//选择订单</span></div><div class="line">	$scope.selectOrder = <span class="function"><span class="keyword">function</span>(<span class="params">order</span>)</span>&#123;</div><div class="line">		$scope.selectedOrder = order;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//计算总价</span></div><div class="line">	$scope.calcTotal = <span class="function"><span class="keyword">function</span>(<span class="params">order</span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> total = <span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; order.products.length ; i++)&#123;</div><div class="line">			total += order.products[i].count * order.products[i].price;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> total;</div><div class="line">	&#125;</div><div class="line">&#125;]);</div></pre></td></tr></table></figure>
<p>有了ordersCtrl控制器，我修改<code>views/adminOrders.html</code>页面的内容并使用控制器，下面是修改后的文件内容：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"ordersCtrl"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-striped table-bordered"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">th</span>&gt;</span>所在城市<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">th</span>&gt;</span>订单总价<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tr</span> <span class="attr">ng-repeat</span>=<span class="string">"order in orders"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;order.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;order.city&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;calcTotal(order) | currency&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">ng-click</span>=<span class="string">"selectOrder(order);"</span> <span class="attr">class</span>=<span class="string">"btn btn-xs btn-primary"</span>&gt;</span></div><div class="line">					订单详情</div><div class="line">				<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!--显示选择的订单详情--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-show</span>=<span class="string">"selectedOrder"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">h3</span>&gt;</span>订单详情<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-striped table-bordered"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>商品名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>商品数量<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>商品单价<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">tr</span> <span class="attr">ng-repeat</span>=<span class="string">"product in selectedOrder.products"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;product.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;product.count&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;product.price | currency&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>视图由两个table组成。第一个table显示订单摘要，第二个table只在订单被选中时可见，它显示订单的详情。</p>
<h3 id="实现产品特性"><a href="#实现产品特性" class="headerlink" title="实现产品特性"></a>实现产品特性</h3><p>为实现产品特性，管理员需要对产品进行增删改查。在Deployd控制面板，选择products集合并点击API，会看到RESTful API的更多细节，我会在后续章节详细介绍RESTful API。你可以使用<code>$http</code>服务来做RESTful API，这样做会暴露整组执行贯穿应用程序的操作的URL。更优雅的做法是使用可选模块<code>ngResource</code>中的<code>$resource</code>服务，它有漂亮的方式处理发送到服务器的URL的定义。</p>
<ul>
<li><p>定义RESTful控制器<br>  我要开始通过AngularJS的<code>$resource</code>服务来定义控制器以提供访问权限给Deployd的RESTful API。我在controllers文件夹中创建了新文件<code>adminProductController.js</code>并用它定义控制器，下面是文件内容：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">"sportsStoreAdmin"</span>)</div><div class="line">.constant(<span class="string">"productUrl"</span>,<span class="string">"http://localhost:5500/products/"</span>)</div><div class="line">.config(<span class="function"><span class="keyword">function</span>(<span class="params">$httpProvider</span>)</span>&#123;</div><div class="line">	$httpProvider.defaults.withCredentials = <span class="literal">true</span>;</div><div class="line">&#125;)</div><div class="line">.controller(<span class="string">"productCtrl"</span>,[<span class="string">"$scope"</span>,<span class="string">"$resource"</span>,<span class="string">"productUrl"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope,$resource,productUrl</span>)</span>&#123;</div><div class="line">	$scope.productResource = $resource(productUrl+<span class="string">":id"</span>,&#123;id:<span class="string">"@id"</span>&#125;);</div><div class="line">	<span class="comment">//查询列表</span></div><div class="line">	$scope.listProducts = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		$scope.products = $scope.productResource.query();</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//删除指定产品</span></div><div class="line">	$scope.deleteProduct = <span class="function"><span class="keyword">function</span>(<span class="params">product</span>)</span>&#123;</div><div class="line">		product.$<span class="keyword">delete</span>().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			$scope.products.splice($scope.products.indexOf(product),<span class="number">1</span>);</div><div class="line">		&#125;)</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//创建产品</span></div><div class="line">	$scope.createProduct = <span class="function"><span class="keyword">function</span>(<span class="params">product</span>)</span>&#123;</div><div class="line">		<span class="keyword">new</span> $scope.productResource(product).$save().then(<span class="function"><span class="keyword">function</span>(<span class="params">newProduct</span>)</span>&#123;</div><div class="line">			$scope.products.push(newProduct);</div><div class="line">			$scope.editedProduct = <span class="literal">null</span>;</div><div class="line">		&#125;)</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//更新指定产品</span></div><div class="line">	$scope.updateProduct = <span class="function"><span class="keyword">function</span>(<span class="params">product</span>)</span>&#123;</div><div class="line">		product.$save();</div><div class="line">		$scope.editedProduct = <span class="literal">null</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//编辑指定产品</span></div><div class="line">	$scope.startEdit = <span class="function"><span class="keyword">function</span>(<span class="params">product</span>)</span>&#123;</div><div class="line">		$scope.editedProduct = product;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//取消编辑</span></div><div class="line">	$scope.cancelEdit = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		$scope.editedProduct = <span class="literal">null</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//默认查询列表数据</span></div><div class="line">	$scope.listProducts();</div><div class="line">&#125;]);</div></pre></td></tr></table></figure>
<p>  这里不深入讨论该清单代码（后面详细讲解），只介绍部分重点代码。<br>  首先，<code>$resource</code>服务是建立在<code>$http</code>服务所提供的特性的基础上的。这需要我启用withCredentials选项，我没有权限访问由<code>$http</code>服务产生的请求，但我可以使用模块上的config方法改变所有Ajax请求的默认设置。<br>  本例中最重要的一部分是下面这句代码：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$scope.productResource = $resource(productUrl+<span class="string">":id"</span>,&#123;id:<span class="string">"@id"</span>&#125;);</div></pre></td></tr></table></figure>
<p>  传入<code>$resource</code>的第一个参数用来定义将用于产生查询的URL格式。”:id”部分与第二个参数的映射对象一致，告诉AngularJS如果数据对象中有id属性，那它应该被添加到用于Ajax请求的URL中。用于访问RESTful的API的URL 和HTTP方法是由这两个参数推断出的。<br>  访问对象是由<code>$resource</code>服务的结果，有query、get、delete、remove和save方法。调用这些方法触发执行相应操作的Ajax请求。</p>
</li>
<li><p>定义视图<br>  现在，我将视图<code>adminProducts.html</code>的占位内容替换为以下内容：</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">	#productTable&#123;width: auto;&#125;</div><div class="line">	#productTable td&#123;max-width: 150px;text-overflow: ellipsis;overflow: hidden;white-space: nowrap;&#125;</div><div class="line">	#productTable td input&#123;max-width: 125px;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"productCtrl"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-striped table-bordered"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">th</span>&gt;</span>产品名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">th</span>&gt;</span>产品描述<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">th</span>&gt;</span>产品目录<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">th</span>&gt;</span>产品价格<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tr</span> <span class="attr">ng-repeat</span>=<span class="string">"item in products"</span> <span class="attr">ng-hide</span>=<span class="string">"item.id == editedProduct.id"</span> &gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"description"</span>&gt;</span>&#123;&#123;item.description&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.category&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.price | currency&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">ng-click</span>=<span class="string">"startEdit(item);"</span> <span class="attr">class</span>=<span class="string">"btn btn-xs btn-primary"</span>&gt;</span></div><div class="line">					编辑</div><div class="line">				<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">ng-click</span>=<span class="string">"deleteProduct(item);"</span> <span class="attr">class</span>=<span class="string">"btn btn-xs btn-danger"</span>&gt;</span></div><div class="line">					删除</div><div class="line">				<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tr</span> <span class="attr">ng-class</span>=<span class="string">"&#123;danger:editedProduct&#125;"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"editedProduct.name"</span> <span class="attr">required</span>=<span class="string">"required"</span> /&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"editedProduct.description"</span> <span class="attr">required</span>=<span class="string">"required"</span> /&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"editedProduct.category"</span> <span class="attr">required</span>=<span class="string">"required"</span> /&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"editedProduct.price"</span> <span class="attr">required</span>=<span class="string">"required"</span> /&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">ng-hide</span>=<span class="string">"editedProduct.id"</span> <span class="attr">ng-click</span>=<span class="string">"createProduct(editedProduct);"</span> <span class="attr">class</span>=<span class="string">"btn btn-xs btn-primary"</span>&gt;</span></div><div class="line">					创建</div><div class="line">				<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">ng-show</span>=<span class="string">"editedProduct.id"</span> <span class="attr">ng-click</span>=<span class="string">"updateProduct(editedProduct);"</span> <span class="attr">class</span>=<span class="string">"btn btn-xs btn-primary"</span>&gt;</span></div><div class="line">					保存</div><div class="line">				<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">ng-show</span>=<span class="string">"editedProduct"</span> <span class="attr">ng-click</span>=<span class="string">"cancelEdit(editedProduct);"</span> <span class="attr">class</span>=<span class="string">"btn btn-xs btn-danger"</span>&gt;</span></div><div class="line">					取消</div><div class="line">				<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>添加HTML文件的引用<br>  剩下的就是在admin.html文件中添加<code>script</code>元素来引入新模块和新控制器并更新主应用程序模块，依赖于<code>ngResource</code>，下面是admin.html文件修改后的内容：</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">ng-app</span>=<span class="string">"sportsStoreAdmin"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"angular.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"ngmodules/angular-route.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"ngmodules/angular-resource.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"bootstrap.css"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"bootstrap-theme.css"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">			angular.module(<span class="string">"sportsStoreAdmin"</span>,[<span class="string">"ngRoute"</span>,<span class="string">"ngResource"</span>])</div><div class="line">			.config([<span class="string">"$routeProvider"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$routeProvider</span>)</span>&#123;</div><div class="line">				$routeProvider.when(<span class="string">"/login"</span>,&#123;</div><div class="line">					templateUrl : <span class="string">"views/adminLogin.html"</span></div><div class="line">				&#125;);</div><div class="line">				$routeProvider.when(<span class="string">"/main"</span>,&#123;</div><div class="line">					templateUrl : <span class="string">"views/adminMain.html"</span></div><div class="line">				&#125;);</div><div class="line">				$routeProvider.otherwise(&#123;</div><div class="line">					redirectTo : <span class="string">"/login"</span></div><div class="line">				&#125;);</div><div class="line">			&#125;])</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"controllers/adminControllers.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"controllers/adminProductController.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">ng-view</span>&gt;</span><span class="tag">&lt;/<span class="name">ng-view</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>  现在，一个简单但完整的运动商店应用程序已经完成。你可以从<code>https://github.com/heji1993/angular-sportsstore.git</code>下载完整代码。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在本章中，我会收集并验证运输详情以完成运动商店应用程序，并把订单存储在Deployd服务器上。我还会创建管理应用程序，让认证的用户看到订单并管理产品目录。&lt;/p&gt;
    
    </summary>
    
      <category term="AngularJS" scheme="http://heji.website/categories/AngularJS/"/>
    
    
      <category term="AngularJS" scheme="http://heji.website/tags/AngularJS/"/>
    
  </entry>
  
  <entry>
    <title>第五章、运动商店：导航和结账</title>
    <link href="http://heji.website/2017/03/06/%E7%AC%AC%E4%BA%94%E7%AB%A0%E3%80%81%E8%BF%90%E5%8A%A8%E5%95%86%E5%BA%97%EF%BC%9A%E5%AF%BC%E8%88%AA%E5%92%8C%E7%BB%93%E8%B4%A6/"/>
    <id>http://heji.website/2017/03/06/第五章、运动商店：导航和结账/</id>
    <published>2017-03-06T06:39:25.214Z</published>
    <updated>2017-03-06T06:44:44.431Z</updated>
    
    <content type="html"><![CDATA[<p>在本章中，我将通过添加对真实数据的支持，实现购物车并开始订单结账的过程，继续运动商店应用程序的开发。</p>
<a id="more"></a>
<h2 id="使用真实数据-请先启动Deployd"><a href="#使用真实数据-请先启动Deployd" class="headerlink" title="使用真实数据(请先启动Deployd )"></a>使用真实数据(请先启动Deployd )</h2><h3 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h3><p> AngularJS通过服务<code>$http</code>提供对产生Ajax请求的支持，后续章节讲述服务的工作细节以及<code>$http</code>本身。下面是修改后的<code>controllers/sportsStore.js</code>文件。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">//module方法值传一个参数表示我们尝试找到sportsStore这个模块,必须先有sportsStore模块,否则会报错</span></div><div class="line">angular.module(<span class="string">"sportsStore"</span>)</div><div class="line">.constant(<span class="string">"dataUrl"</span>,<span class="string">"http://localhost:5550/products"</span>)</div><div class="line">.controller(<span class="string">"sportsStoreCtrl"</span>,[<span class="string">"$scope"</span>,<span class="string">"$http"</span>,<span class="string">"dataUrl"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope,$http,dataUrl</span>)</span>&#123;</div><div class="line">	$scope.data = &#123;&#125;;</div><div class="line">	<span class="comment">//使用$http服务查询数据</span></div><div class="line">	$http.get(dataUrl)</div><div class="line">	.success(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</div><div class="line">		$scope.data.products = result;</div><div class="line">	&#125;)</div><div class="line">	.error(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</div><div class="line">		$scope.data.error = error;</div><div class="line">	&#125;)</div><div class="line">&#125;])</div></pre></td></tr></table></figure>
<h3 id="处理错误"><a href="#处理错误" class="headerlink" title="处理错误"></a>处理错误</h3><p>当有错误时，应该在页面显示错误信息，为此，需要对<code>app.html</code>页面进行修改，下面是修改的部分代码：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">    &lt;header class="navbar navbar-inverse"&gt;</div><div class="line">		&lt;a href="#" class="navbar-brand"&gt;运动商店&lt;/a&gt;</div><div class="line">	&lt;/header&gt;</div><div class="line">	&lt;!--有错误时显示--&gt;</div><div class="line">	&#123;&#123;data.error.status&#125;&#125;</div><div class="line">	&lt;section class="alert alert-danger" ng-show="data.error"&gt;</div><div class="line">		Error (&#123;&#123;data.error.status&#125;&#125;).The product data was not loaded.</div><div class="line">		&lt;a href="/app.html" class="alert-link"&gt;Click here to try again&lt;/a&gt;</div><div class="line">	&lt;/section&gt;</div><div class="line">	&lt;!--没有错误时显示--&gt;</div><div class="line">	&lt;section class="panel panel-default row" ng-controller="productListCtrl" ng-hide="data.error"&gt;</div><div class="line">...</div></pre></td></tr></table></figure>
<h2 id="创建局部视图"><a href="#创建局部视图" class="headerlink" title="创建局部视图"></a>创建局部视图</h2><p>在<code>app.html</code>文件中的HTML错综复杂，随着应用程序功能的增加，情况会变得更加糟糕，幸运的是，我们可以把<code>app.html</code>拆分成多个独立的文件，然后使用AngularJS提供的<code>ng-include</code>指令在运行时引入这些文件。为了这个目的，我创建了<code>views/productList.html</code>文件，下面是该文件的内容：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"panel panel-default row"</span> <span class="attr">ng-controller</span>=<span class="string">"productListCtrl"</span> <span class="attr">ng-hide</span>=<span class="string">"data.error"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"col-xs-3"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">ng-click</span>=<span class="string">"selectCategory()"</span> <span class="attr">class</span>=<span class="string">"btn btn-block btn-default"</span> </span></div><div class="line">			<span class="attr">ng-class</span>=<span class="string">"getCategoryClass()"</span>&gt;Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--先对商品按目录进行排序,然后再返回去重后的目录--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">ng-repeat</span>=<span class="string">"item in data.products | orderBy:'category' | unique:'category'"</span></span></div><div class="line">			<span class="attr">ng-click</span>=<span class="string">"selectCategory(item)"</span> <span class="attr">class</span>=<span class="string">"btn btn-block btn-default btn-lg"</span> </div><div class="line">			<span class="attr">ng-class</span>=<span class="string">"getCategoryClass(item)"</span>&gt;&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">nav</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-8"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--遍历添加商品--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"well"</span> <span class="attr">ng-repeat</span>=<span class="string">"item in data.products | filter:categoryFilterFn | range:selectedPage:pageSize"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">h3</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></div><div class="line">				<span class="comment">&lt;!--使用金额过滤器，将数值转换为金额--&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"pull-right label label-primary"</span>&gt;</span></div><div class="line">					&#123;&#123;item.price | currency&#125;&#125;</div><div class="line">				<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"lead"</span>&gt;</span>&#123;&#123;item.description &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pull-right btn-group"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">ng-repeat</span>=<span class="string">"page in data.products | filter:categoryFilterFn | pageCount:pageSize"</span></span></div><div class="line">				<span class="attr">ng-click</span>=<span class="string">"selectPage($index + 1)"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">ng-class</span>=<span class="string">"getPageClass($index + 1)"</span>&gt;</div><div class="line">				&#123;&#123;$index + 1&#125;&#125;</div><div class="line">			<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>下面是<code>app.html</code>文件的内容：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">ng-app</span>=<span class="string">"sportsStore"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>SportsStore<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"angular.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"bootstrap.css"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"bootstrap-theme.css"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">			<span class="comment">//依赖customFilter模块</span></div><div class="line">			angular.module(<span class="string">"sportsStore"</span>,[<span class="string">"customFilter"</span>]);</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--引入顶级控制器--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"controllers/sportsStore.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--引入自定义过滤器--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"filters/customFilters.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--引入产品列表控制器--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"controllers/productListController.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!--使用控制器--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-controller</span>=<span class="string">"sportsStoreCtrl"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"navbar navbar-inverse"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span>&gt;</span>运动商店<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">header</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--有错误时显示--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"alert alert-danger"</span> <span class="attr">ng-show</span>=<span class="string">"data.error"</span>&gt;</span></div><div class="line">			Error (&#123;&#123;data.error.status&#125;&#125;).The product data was not loaded.</div><div class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/app.html"</span> <span class="attr">class</span>=<span class="string">"alert-link"</span>&gt;</span>Click here to try again<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">ng-include</span> <span class="attr">src</span>=<span class="string">"'views/productList.html'"</span>&gt;</span><span class="tag">&lt;/<span class="name">ng-include</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>注意：当AngularJS遇到ng-include指令时，它会产生Ajax请求，载入src属性所指定的文件，并插入其内容以替换该元素。在使用ng-include指令时，我将文件名写成单引号的字面量。如果我不这么做，那指令会在作用域属性上寻找文件名</strong></p>
<h2 id="创建购物车"><a href="#创建购物车" class="headerlink" title="创建购物车"></a>创建购物车</h2><p>用户能看到我的有效产品，但我没有购物车就没法出售任何东西。在本段中，我将构建购物车功能，下图是它的基本流程：<br><img src="imgs/1486461273494_2.png" alt=""><br>实现购物车特性需要若干组改动，包括创建自定义的AngularJS组件。</p>
<h3 id="定义购物车模块和服务"><a href="#定义购物车模块和服务" class="headerlink" title="定义购物车模块和服务"></a>定义购物车模块和服务</h3><p>通常，我们习惯把控制器放在<code>controllers</code>目录，过滤器放在<code>filters</code>目录下，视图放在<code>views</code>目录下等。我们也可以根据具体情况，把实现某一功能的全部代码写成一个组件，为此，我定义了<code>components</code>文件夹专门存放自定义的组件。在本例中，我将创建购物车模块。我首先创建<code>components/cart</code>目录，并向其添加新的javascript文件<code>cart.js</code>，下面是<code>cart.js</code>文件的内容：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">"cart"</span>,[])</div><div class="line">.factory(<span class="string">"cartService"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> cartData = [];</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		<span class="comment">//添加产品</span></div><div class="line">		addProduct : <span class="function"><span class="keyword">function</span>(<span class="params">id,name,price</span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> addToExistingItem = <span class="literal">false</span>;</div><div class="line">			<span class="comment">//如果已经存在相同id的产品,只增加其数量</span></div><div class="line">			<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; cartData.length ; i++)&#123;</div><div class="line">				<span class="keyword">if</span>(cartData[i].id == id)&#123;</div><div class="line">					cartData[i].count ++;</div><div class="line">					addToExistingItem = <span class="literal">true</span>;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span>(!addToExistingItem)&#123;</div><div class="line">				cartData.push(&#123;</div><div class="line">					count:<span class="number">1</span>,id:id,price:price,name:name</div><div class="line">				&#125;);</div><div class="line">			&#125;</div><div class="line">		&#125;,</div><div class="line">		<span class="comment">//移除产品</span></div><div class="line">		removeProduct : <span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>&#123;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; cartData.length ; i++)&#123;</div><div class="line">				<span class="keyword">if</span>(cartData[i].id == id)&#123;</div><div class="line">					cartData.splice(i,<span class="number">1</span>);</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;,</div><div class="line">		<span class="comment">//获取所有产品</span></div><div class="line">		getProducts : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">return</span> cartData;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>我先在新模块<code>cart</code>自定义了<code>cartService</code>服务，创建服务有不同的方法，比如<code>service</code>、<code>factory</code>和<code>provider</code>，后面讲讲解它们的区别。创建服务第一个参数是服务名，第二个参数是工厂函数，在服务被注入应用于应用程序时，工厂函数只被调用一次(第一次注入时调用)。在本例中，我的cart服务工厂函数返回对象，对象有三个方法，下面是<code>cartService</code>服务所定义的方法：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>addProduct(id,name,price)</td>
<td>添加指定的产品到购物车，或者如果购物车以及包含该产品，就增加产品的数量</td>
</tr>
<tr>
<td>removeProduct(id)</td>
<td>删除指定ID的产品</td>
</tr>
<tr>
<td>getProducts()</td>
<td>返回购物车中所有商品</td>
</tr>
</tbody>
</table>
<h3 id="创建购物车部件"><a href="#创建购物车部件" class="headerlink" title="创建购物车部件"></a>创建购物车部件</h3><p>我下一步要创建囊括购物车内容的部件，提供给用户以开始结账流程，我将创建自定义指令来做。指令是自包含的，复用功能单元是AngularJS开发的核心。下面是我在<code>components/cart/cart.js</code>文件添加的内容：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="comment">//自定义cartSummary指令,依赖于cartService服务</span></div><div class="line">.directive(<span class="string">"cartSummary"</span>,[<span class="string">"cartService"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">cartService</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		restrict : <span class="string">"E"</span>,</div><div class="line">		templateUrl : <span class="string">"components/cart/cartSummary.html"</span>,</div><div class="line">		controller : [<span class="string">"$scope"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> cartData = cartService.getProducts();</div><div class="line">			<span class="comment">//计算购物车商品总价</span></div><div class="line">			$scope.total = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="keyword">var</span> total = <span class="number">0</span>;</div><div class="line">				<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; cartData.length ; i++)&#123;</div><div class="line">					total += (cartData[i].count * cartData[i].price);</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">return</span> total;</div><div class="line">			&#125;</div><div class="line">			<span class="comment">//计算购物车商品总数</span></div><div class="line">			$scope.itemCount = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="keyword">var</span> total = <span class="number">0</span>;</div><div class="line">				<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; cartData.length ; i++)&#123;</div><div class="line">					total += cartData[i].count;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">return</span> total;</div><div class="line">			&#125;</div><div class="line">		&#125;]</div><div class="line">	&#125;</div><div class="line">&#125;]);</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>指令由AngularJS模块上的 directive方法创建，第一个参数是指令名（驼峰式命名），第二个参数是返回指令释义对象的工厂函数。指令释义对象定义属性告诉AngularJS你的指令做什么和如何做。我在定义cartSummary指令时指定了三个属性，下面是三个属性的说明（后续章节讲解并演示整套属性）</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>restrict</td>
<td>指定指令如果应用，E值表示指令只能作为元素使用，A值表示指令只能作为属性使用，EA表示指令可作为元素或属性使用</td>
</tr>
<tr>
<td>templateUrl</td>
<td>指定将被插入指令的元素内容的局部视图</td>
</tr>
<tr>
<td>controller</td>
<td>指定向局部视图提供数据和行为的控制器</td>
</tr>
</tbody>
</table>
<p>简单地说，我的指令释义定义了控制器，告诉AngularJS使用<code>components/cart/cartSummary.html</code>视图，还有约束指令，让其可以仅作为元素而被使用。<br>另外，因为我使用了<code>cartService</code>服务，需要注入服务。我又在指令的控制器定义了两个行为<code>total</code>和<code>itemCount</code>，这让我可以直接在局部视图内使用这些行为。下面是<code>components/cart/cartSummary.html</code>文件的内容：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;style type="text/css"&gt;</div><div class="line">	.navbar-right&#123;</div><div class="line">		float: right !important;</div><div class="line">		margin-right: 5px; </div><div class="line">	&#125;</div><div class="line">	.navbar-text&#123;</div><div class="line">		margin-right: 10px;</div><div class="line">	&#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;div class="navbar-right"&gt;</div><div class="line">	&lt;div class="navbar-text"&gt;</div><div class="line">		&lt;b&gt;Your cart:&lt;/b&gt;</div><div class="line">		&#123;&#123;itemCount()&#125;&#125; item(s),</div><div class="line">		&#123;&#123;total() | currency&#125;&#125;</div><div class="line">	&lt;/div&gt;</div><div class="line">	&lt;!--按钮功能后面实现--&gt;</div><div class="line">	&lt;a href="#" class="btn btn-default navbar-btn"&gt;Checkout&lt;/a&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>下面在<code>app.html</code>应用模块：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="comment">//依赖customFilter模块</span></div><div class="line">	angular.module(<span class="string">"sportsStore"</span>,[<span class="string">"customFilter"</span>,<span class="string">"cart"</span>]);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--引入顶级控制器--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"controllers/sportsStore.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--引入自定义过滤器--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"filters/customFilters.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--引入产品列表控制器--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"controllers/productListController.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--引入购物车模块--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"components/cart/cart.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">...</div><div class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"navbar navbar-inverse"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span>&gt;</span>运动商店<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">cart-summary</span>&gt;</span><span class="tag">&lt;/<span class="name">cart-summary</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></div><div class="line">...</div></pre></td></tr></table></figure></p>
<h3 id="添加产品选择按钮"><a href="#添加产品选择按钮" class="headerlink" title="添加产品选择按钮"></a>添加产品选择按钮</h3><p>我下一步是在产品详情添加按钮，让用户可以添加产品到购物车，下面是我对<code>controllers/productListController.js</code>文件所做的修改：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="comment">//控制器注入cartService模块</span></div><div class="line">.controller(<span class="string">"productListCtrl"</span>,[<span class="string">"$scope"</span>,<span class="string">"$filter"</span>,<span class="string">"productListActiveClass"</span>,<span class="string">"productListPageCount"</span>,<span class="string">"cartService"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope,$filter,productListActiveClass,productListPageCount,cartService</span>)</span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="comment">//往购物车添加商品</span></div><div class="line">	$scope.addProductToCart = <span class="function"><span class="keyword">function</span>(<span class="params">product</span>)</span>&#123;</div><div class="line">		cartService.addProduct(product.id,product.name,product.price);</div><div class="line">	&#125;</div><div class="line">&#125;]);</div></pre></td></tr></table></figure></p>
<p>我声明了对<code>cartService</code>的依赖，并定义了行为<code>addProductToCart</code>用于往购物车添加商品。<br>然后，往局部视图<code>views/productList.html</code>添加按钮调用<code>addProductToCart</code>行为：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="comment">&lt;!--遍历添加商品--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"well"</span> <span class="attr">ng-repeat</span>=<span class="string">"item in data.products | filter:categoryFilterFn | range:selectedPage:pageSize"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">h3</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--使用金额过滤器，将数值转换为金额--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"pull-right label label-primary"</span>&gt;</span></div><div class="line">			&#123;&#123;item.price | currency&#125;&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!--产品选择按钮--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-success pull-right"</span> <span class="attr">ng-click</span>=<span class="string">"addProductToCart(item)"</span>&gt;</span>Add to cart<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"lead"</span>&gt;</span>&#123;&#123;item.description &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>现在，你可以往购物车添加商品并自动计算购物车商品的数量和总价。</p>
<h2 id="添加URL导航"><a href="#添加URL导航" class="headerlink" title="添加URL导航"></a>添加URL导航</h2><p>在添加结账功能的支持之前，我要加强运动商店应用程序的基础设施，添加URL路由的支持。我会在后续章节详细介绍路由，简单地说，路由可以基于当前的URL自动地显示不同的局部视图。这使得它更易于建立更大的应用程序。<br>为实现路由功能，我先创建结账页面的局部视图，因为还没开始开阿发结账流程，所以局部视图只包含简单的占位符。下面是<code>views/checkoutSunmary.html</code>页面的内容：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"lead"</span>&gt;</span></div><div class="line">	This is the checkout summary view</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/products"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>返回<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="定义和使用URL路由"><a href="#定义和使用URL路由" class="headerlink" title="定义和使用URL路由"></a>定义和使用URL路由</h3><p>现在，我需要分别映射<code>/product</code>和<code>/checkout</code>到<code>productList.html</code>页面和<code>checkoutSummary.html</code>页面，其他的URL都默认映射到<code>productList.html</code>页面，下面是<code>app.html</code>文件的改动:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="comment">//依赖customFilter模块、cart模块和ngRoute模块</span></div><div class="line">	angular.module(<span class="string">"sportsStore"</span>,[<span class="string">"customFilter"</span>,<span class="string">"cart"</span>,<span class="string">"ngRoute"</span>])</div><div class="line">	<span class="comment">//配置路由</span></div><div class="line">	.config([<span class="string">"$routeProvider"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$routeProvider</span>)</span>&#123;</div><div class="line">		$routeProvider.when(<span class="string">"/checkout"</span>,&#123;</div><div class="line">			templateUrl:<span class="string">"views/checkoutSunmary.html"</span></div><div class="line">		&#125;)</div><div class="line">		.when(<span class="string">"/pruducts"</span>,&#123;</div><div class="line">			templateUrl:<span class="string">"views/productList.html"</span></div><div class="line">		&#125;)</div><div class="line">		.otherwise(&#123;</div><div class="line">			templateUrl:<span class="string">"views/productList.html"</span></div><div class="line">		&#125;);</div><div class="line">	&#125;]);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--引入顶级控制器--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"controllers/sportsStore.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--引入自定义过滤器--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"filters/customFilters.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--引入产品列表控制器--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"controllers/productListController.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--引入购物车模块--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"components/cart/cart.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--引入路由模块--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"ngmodules/angular-route.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">...</div><div class="line"><span class="comment">&lt;!--有错误时显示--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"alert alert-danger"</span> <span class="attr">ng-show</span>=<span class="string">"data.error"</span>&gt;</span></div><div class="line">	出现错误 (&#123;&#123;data.error.status&#125;&#125;).商品的数据不能加载.</div><div class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/app.html"</span> <span class="attr">class</span>=<span class="string">"alert-link"</span>&gt;</span>点击这里再次尝试<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ng-view</span>&gt;</span><span class="tag">&lt;/<span class="name">ng-view</span>&gt;</span></div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>在<code>cartSummary.html</code>页面点击结账按钮需要跳转到结账页面，为此，需要对<code>components/cart/cartSummary.html</code>进行跳转：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="comment">&lt;!--按钮功能后面实现--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/checkout"</span> <span class="attr">class</span>=<span class="string">"btn btn-default navbar-btn"</span>&gt;</span>back<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">...</div></pre></td></tr></table></figure></p>
<h2 id="开始结账流程"><a href="#开始结账流程" class="headerlink" title="开始结账流程"></a>开始结账流程</h2><p>现在，我将转向结账流程。我的第一个任务是定义新的控制器<code>cartSummaryCtrl</code>，我把它放在<code>controllers/checkoutController.js</code>文件。因为cartSummary指令需要使用计算总价和商品数量的行为，<code>cartSummaryCtrl</code>也需要使用计算总价行为，为此，我修改<code>components/cart/cart.js</code>文件，把这些行为定义在<code>cartService</code>内，下面是修改后的<code>components/cart/cart.js</code>文件：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">"cart"</span>,[])</div><div class="line">.factory(<span class="string">"cartService"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> cartData = [];</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		<span class="comment">//添加产品</span></div><div class="line">		addProduct : <span class="function"><span class="keyword">function</span>(<span class="params">id,name,price</span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> addToExistingItem = <span class="literal">false</span>;</div><div class="line">			<span class="comment">//如果已经存在相同id的产品,只增加其数量</span></div><div class="line">			<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; cartData.length ; i++)&#123;</div><div class="line">				<span class="keyword">if</span>(cartData[i].id == id)&#123;</div><div class="line">					cartData[i].count ++;</div><div class="line">					addToExistingItem = <span class="literal">true</span>;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span>(!addToExistingItem)&#123;</div><div class="line">				cartData.push(&#123;</div><div class="line">					count:<span class="number">1</span>,id:id,price:price,name:name</div><div class="line">				&#125;);</div><div class="line">			&#125;</div><div class="line">		&#125;,</div><div class="line">		<span class="comment">//移除产品</span></div><div class="line">		removeProduct : <span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>&#123;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; cartData.length ; i++)&#123;</div><div class="line">				<span class="keyword">if</span>(cartData[i].id == id)&#123;</div><div class="line">					cartData.slice(i,<span class="number">1</span>);</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;,</div><div class="line">		<span class="comment">//获取所有产品</span></div><div class="line">		getProducts : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">return</span> cartData;</div><div class="line">		&#125;,</div><div class="line">		<span class="comment">//计算购物车商品总价</span></div><div class="line">		total : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> total = <span class="number">0</span>;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; cartData.length ; i++)&#123;</div><div class="line">				total += (cartData[i].count * cartData[i].price);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> total;</div><div class="line">		&#125;,</div><div class="line">		<span class="comment">//计算购物车商品总数</span></div><div class="line">		itemCount : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> total = <span class="number">0</span>;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; cartData.length ; i++)&#123;</div><div class="line">				total += cartData[i].count;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> total;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;)</div><div class="line"><span class="comment">//自定义cartSummary指令,依赖于cartService服务</span></div><div class="line">.directive(<span class="string">"cartSummary"</span>,[<span class="string">"cartService"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">cartService</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		restrict : <span class="string">"E"</span>,</div><div class="line">		templateUrl : <span class="string">"components/cart/cartSummary.html"</span>,</div><div class="line">		controller : [<span class="string">"$scope"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> cartData = cartService.getProducts();</div><div class="line">			<span class="comment">//计算购物车商品总价</span></div><div class="line">			$scope.total = cartService.total;</div><div class="line">			<span class="comment">//计算购物车商品总数</span></div><div class="line">			$scope.itemCount = cartService.itemCount;</div><div class="line">		&#125;]</div><div class="line">	&#125;</div><div class="line">&#125;]);</div></pre></td></tr></table></figure></p>
<p>下面是<code>controllers/checkoutController.js</code>文件的内容：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">"sportsStore"</span>)</div><div class="line">.controller(<span class="string">"cartSummaryCtrl"</span>,[<span class="string">"$scope"</span>,<span class="string">"cartService"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope,cartService</span>)</span>&#123;</div><div class="line">	<span class="comment">//获取购物车所有商品</span></div><div class="line">	$scope.cartData = cartService.getProducts();</div><div class="line">	<span class="comment">//计算商品总价</span></div><div class="line">	$scope.total = cartService.total;</div><div class="line">	<span class="comment">//移除商品</span></div><div class="line">	$scope.remove = cartService.removeProduct;</div><div class="line">&#125;]);</div></pre></td></tr></table></figure></p>
<p>为应用控制器，实现结账流程，我需要对<code>views/checkoutSunmary.html</code>文件进行修改，下面是修改后的内容：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我的购物车<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"cartSummaryCtrl"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-warning"</span> <span class="attr">ng-show</span>=<span class="string">"cartData.length == 0"</span>&gt;</span></div><div class="line">		你的购物车没有商品，点击<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/products"</span> <span class="attr">class</span>=<span class="string">"alert-link"</span>&gt;</span>这里<span class="tag">&lt;/<span class="name">a</span>&gt;</span>返回购物。</div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-hide</span>=<span class="string">"cartData.length == 0"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">thead</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span>数量<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">th</span>&gt;</span>商品名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">"text-right"</span>&gt;</span>商品单价<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">"text-right"</span>&gt;</span>商品总价<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">thead</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">tbody</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span> <span class="attr">ng-repeat</span>=<span class="string">"item in cartData"</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span>&#123;&#123;item.count&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"text-left"</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"text-right"</span>&gt;</span>&#123;&#123;item.price | currency&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"text-right"</span>&gt;</span>&#123;&#123;(item.price * item.count) | currency&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-click</span>=<span class="string">"remove(item.id)"</span> <span class="attr">class</span>=<span class="string">"btn btn-sm btn-warning"</span>&gt;</span>移除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"4"</span> <span class="attr">class</span>=<span class="string">"text-right"</span>&gt;</span>总计：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"text-left"</span>&gt;</span></div><div class="line">						&#123;&#123;total() | currency&#125;&#125;</div><div class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/products"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>继续购物<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/placeorder"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>支付<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span>	</div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>接着，我需要在<code>app.html</code>引入控制器并添加支付路由、感谢页面路由，这两个页面我在接下来的章节会补充，下面是<code>app.html</code>修改的内容：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="comment">//依赖customFilter模块、cart模块和ngRoute模块</span></div><div class="line">	angular.module(<span class="string">"sportsStore"</span>,[<span class="string">"customFilter"</span>,<span class="string">"cart"</span>,<span class="string">"ngRoute"</span>])</div><div class="line">	<span class="comment">//配置路由</span></div><div class="line">	.config([<span class="string">"$routeProvider"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$routeProvider</span>)</span>&#123;</div><div class="line">		$routeProvider.when(<span class="string">"/checkout"</span>,&#123;</div><div class="line">			templateUrl:<span class="string">"views/checkoutSunmary.html"</span></div><div class="line">		&#125;)</div><div class="line">		.when(<span class="string">"/placeorder"</span>,&#123;</div><div class="line">			templateUrl:<span class="string">"views/placeorder.html"</span></div><div class="line">		&#125;)</div><div class="line">		.when(<span class="string">"/complete"</span>,&#123;</div><div class="line">			templateUrl:<span class="string">"views/thankYou.html"</span></div><div class="line">		&#125;)</div><div class="line">		.when(<span class="string">"/pruducts"</span>,&#123;</div><div class="line">			templateUrl:<span class="string">"views/productList.html"</span></div><div class="line">		&#125;)</div><div class="line">		.otherwise(&#123;</div><div class="line">			templateUrl:<span class="string">"views/productList.html"</span></div><div class="line">		&#125;);</div><div class="line">	&#125;]);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--引入顶级控制器--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"controllers/sportsStore.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--引入自定义过滤器--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"filters/customFilters.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--引入产品列表控制器--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"controllers/productListController.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--引入购物车模块--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"components/cart/cart.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--引入路由模块--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"ngmodules/angular-route.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--引入结账控制器--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"controllers/checkoutController.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">...</div></pre></td></tr></table></figure></p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>在本章中，我继续了运动商店应用程序的开发，从Deployd服务器获取产品数据，添加局部视图的支持，以及实现自定义指令，我还设置了URL路由并添加允许用户下单的功能。在下一章，我将完成运动商店应用程序并添加管理系统的支持。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在本章中，我将通过添加对真实数据的支持，实现购物车并开始订单结账的过程，继续运动商店应用程序的开发。&lt;/p&gt;
    
    </summary>
    
      <category term="AngularJS" scheme="http://heji.website/categories/AngularJS/"/>
    
    
      <category term="AngularJS" scheme="http://heji.website/tags/AngularJS/"/>
    
  </entry>
  
  <entry>
    <title>CSS3制作消息提示框</title>
    <link href="http://heji.website/2017/02/22/CSS3%E5%88%B6%E4%BD%9C%E6%B6%88%E6%81%AF%E6%8F%90%E7%A4%BA%E6%A1%86/"/>
    <id>http://heji.website/2017/02/22/CSS3制作消息提示框/</id>
    <published>2017-02-22T02:54:41.758Z</published>
    <updated>2017-02-22T03:00:27.841Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍使用CSS3制作实用消息提示框。</p>
<p>三角提示框，就是下面所示：<br><img src="imgs/1487729518342_2.png" alt=""><br>我们来研究下如何用CSS实现。<br>假定有一个盒子(div)，给定宽高分别为100像素，再给定边框50像素，那么它看起来会是下面这个样子(为了更直观，给了边框四种不同的颜色)：<br><img src="imgs/1487729572015_3.png" alt=""><br><strong>注意：box-sizing默认为content-box，即在宽度和高度之外绘制元素的内边距和边框</strong><br>接下来，把盒子的高度设为0：<br><img src="imgs/1487729733577_4.png" alt=""><br>再把宽度也设为0：<br><img src="imgs/1487729746624_5.png" alt=""><br>这样雏形就已经出来了，由于IE6的bug(高度为0的div会有一定默认的高度，我的电脑上测量结果为19像素)，需要做一些小调整，给div加一个overflow:hidden，IE6就能正确解析了。<br>接下来的工作就是去掉其余的三个边框。以向上箭头为例，假如我想让箭头朝上，那么就需要将左、上、右三条边框的颜色给去掉。一个常规的方法是将这三条边框的颜色设为透明，即transparent属性。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*设置三个值时，第一个值是上边框颜色，第二个值是右左边框颜色，第三个值是下边框颜色*/</span></div><div class="line"><span class="selector-tag">border-color</span><span class="selector-pseudo">:transparent</span> <span class="selector-tag">transparent</span> <span class="selector-id">#056F61</span></div></pre></td></tr></table></figure></p>
<p>设置以后可以看到如下效果：<br><img src="imgs/1487729865921_6.png" alt=""><br>这样CSS制作的三角形就完成了。到这里看起来工作好像差不多可以结束的样子，还需要测试一下浏览器的兼容性，经过测试，主流浏览器都支持，但是打开IE6，结果悲催了，居然是这个样子：<br><img src="imgs/1487729887192_7.png" alt=""><br>排查一下哪个地方出了问题，才发现原来IE6不支持transparent属性，之后再研究了一下，发现如果将其余三条边的属性由solid改为dotted或者dashed就可以了(原理请自行谷歌)：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*border-style:solid*/</span></div><div class="line"><span class="selector-tag">border-style</span><span class="selector-pseudo">:dotted</span> <span class="selector-tag">dotted</span> <span class="selector-tag">solid</span>;</div><div class="line"><span class="selector-tag">border-width</span><span class="selector-pseudo">:50px</span>;</div><div class="line"><span class="selector-tag">border-color</span><span class="selector-pseudo">:transparent</span> <span class="selector-tag">transparent</span> <span class="selector-id">#056f61</span>;</div></pre></td></tr></table></figure></p>
<p>下面附上完整代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">			<span class="selector-class">.tips</span>&#123;</div><div class="line">				<span class="attribute">position</span>: relative;</div><div class="line">				<span class="attribute">background-color</span>: <span class="number">#245</span>;</div><div class="line">				<span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">				<span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">				<span class="attribute">display</span>: inline-block;</div><div class="line">				<span class="attribute">border-radius</span>: <span class="number">10px</span>;</div><div class="line">				<span class="attribute">margin-top</span>: <span class="number">100px</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="selector-class">.tips</span><span class="selector-pseudo">:after</span>&#123;</div><div class="line">				<span class="attribute">position</span>: absolute;</div><div class="line">				<span class="attribute">border-width</span>: <span class="number">20px</span>;</div><div class="line">				<span class="attribute">border-color</span>: transparent transparent <span class="number">#245</span>;</div><div class="line">				<span class="attribute">bottom</span>: <span class="number">100px</span>;</div><div class="line">				<span class="attribute">right</span>: <span class="number">30px</span>;</div><div class="line">				<span class="attribute">content</span>: <span class="string">""</span>;</div><div class="line">				<span class="attribute">height</span>: <span class="number">0</span>;</div><div class="line">				<span class="attribute">width</span>: <span class="number">0</span>;</div><div class="line">				<span class="attribute">border-style</span>:dotted dotted solid;</div><div class="line">			&#125; </div><div class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"tips"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>效果如下所示：<br><img src="imgs/1487732263707_8.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍使用CSS3制作实用消息提示框。&lt;/p&gt;
&lt;p&gt;三角提示框，就是下面所示：&lt;br&gt;&lt;img src=&quot;imgs/1487729518342_2.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;我们来研究下如何用CSS实现。&lt;br&gt;假定有一个盒子(div)，给定宽高分别为100像
    
    </summary>
    
      <category term="CSS" scheme="http://heji.website/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://heji.website/tags/CSS/"/>
    
      <category term="CSS3" scheme="http://heji.website/tags/CSS3/"/>
    
      <category term="web前端" scheme="http://heji.website/tags/web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>第四章、真正的应用程序：运动商店</title>
    <link href="http://heji.website/2017/02/06/%E7%AC%AC%E5%9B%9B%E7%AB%A0%E3%80%81%E7%9C%9F%E6%AD%A3%E7%9A%84%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%EF%BC%9A%E8%BF%90%E5%8A%A8%E5%95%86%E5%BA%97/"/>
    <id>http://heji.website/2017/02/06/第四章、真正的应用程序：运动商店/</id>
    <published>2017-02-06T00:38:46.523Z</published>
    <updated>2017-02-06T00:58:44.502Z</updated>
    
    <content type="html"><![CDATA[<p>本章开始使用AngularJS开发一个真正的应用程序：运动商店，本章完成产品的展示、分页、分类导航功能，数据使用虚拟数据。</p>
<a id="more"></a>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h3><p>第一步是创建新的Deployd应用程序，你将需要创建目录来存储被生成的文件，我将目录命名为deployd。<br><strong>创建Deployd应用程序之前，你需要先安装Deployd和MongoDB</strong><br>Deployd安装见第一章。<br>MongoDB安装如下：</p>
<ol>
<li>从官网下载mongoDB.msi，双击安装，添加bin路径到系统环境变量</li>
<li><p>配置mongo服务</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongod.exe --bind_ip 127.0.0.1 --logpath <span class="string">"D:\MongoDB\data\dbConf\mongodb.log"</span> --logappend --dbpath <span class="string">"D:\MongoDB\data\db"</span> --port 5500 --serviceName <span class="string">"sportsstore"</span> --serviceDisplayName <span class="string">"sportsstore"</span> --install</div></pre></td></tr></table></figure>
<p> –logpath 以及 –dbpath  的路径可以自己配置，在运行命令之前先创建这些文件和文件夹</p>
</li>
</ol>
<p>切换到deployd目录，输入一下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dpd create  sportsstore</div></pre></td></tr></table></figure></p>
<p>启动新的服务器，输入以下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#-p 指定服务器端口，-P指定数据库端口号</span></div><div class="line">dpd -p 5550 -P 5500 sportsstore\app.dpd</div></pre></td></tr></table></figure></p>
<p>输入命令<code>dashboard</code>，将会打开dashboard资源配置网页。</p>
<ul>
<li><p>创建数据结构<br>  新建一个Collection命名为<code>/products</code>,添加如下属性：<br>  <table><tr><td>名称</td><td>类型</td><td>是否必须</td></tr><tr><td>name</td><td>string</td><td>是</td></tr><tr><td>description</td><td>string</td><td>是</td></tr><tr><td>category</td><td>string</td><td>是</td></tr><tr><td>price</td><td>string</td><td>是</td></tr></table>当你完成属性的添加，控制面板应该同下图一样。<br>  <img src="imgs/1485181604797_4.png" alt=""><br>  <strong>注意：Deployd增加了id属性，在数据库中这将被用于独一无二的识别对象。deployd会自动将唯一赋给id属性，并且我将依靠这些值在后续章节实现管理功能</strong></p>
</li>
<li><p>添加数据<br>  <img src="imgs/1485181646189_5.png" alt=""></p>
</li>
<li><p>测试数据服务<br>  测试Deployd被正确地配置并工作着，打开浏览器窗口并转到以下URL：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost:5550/products</div></pre></td></tr></table></figure>
<p>  如果顺利，添加的数据将会以JSON格式返回。</p>
</li>
</ul>
<h3 id="准备应用程序"><a href="#准备应用程序" class="headerlink" title="准备应用程序"></a>准备应用程序</h3><ul>
<li>创建目录结构<br>  你可以以你喜欢的任何方法组织构成AngularJS应用程序的文件。以angular-sportsstore为项目根目录，下面是我使用的目录结构：<br>   <img src="imgs/1485261919184_2.png" alt=""></li>
<li><p>构建基本大纲<br> 顶级HTML文件app.html包含结构标签以及引入我将使用的JavaScript库和CSS库，下面是app.html的代码：</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>SportsStore<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"angular.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"bootstrap.css"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"bootstrap-theme.css"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">			angular.module(<span class="string">"sportsStore"</span>,[]);</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"navbar navbar-inverse"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span>&gt;</span>SPORTS STORE<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">header</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"panel panel-default row"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"col-xs-3"</span>&gt;</span></div><div class="line">				Categories go here</div><div class="line">			<span class="tag">&lt;/<span class="name">nav</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-9"</span>&gt;</span></div><div class="line">				Products go here</div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="显示（伪造的）产品数据"><a href="#显示（伪造的）产品数据" class="headerlink" title="显示（伪造的）产品数据"></a>显示（伪造的）产品数据</h2><p>我将开始添加对显示产品数据的支持。我想一次只专注一个功能区域，所以我会定义伪造的初始本地数据。然后在下一章替换成Deployd服务器来的数据。</p>
<h3 id="创建控制器"><a href="#创建控制器" class="headerlink" title="创建控制器"></a>创建控制器</h3><p>我要创建的控制器将被用于整个应用程序（类似“顶级控制器”），顶级控制器单独一个文件，命名为<code>controllers/sportsStore.js</code>。下面是代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//module方法值传一个参数表示我们尝试找到sportsStore这个模块</span></div><div class="line">angular.module(<span class="string">"sportsStore"</span>)</div><div class="line">.controller(<span class="string">"sportsStoreCtrl"</span>,[<span class="string">"$scope"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</div><div class="line">	$scope.data = &#123;</div><div class="line">		products : [</div><div class="line">			&#123;name:<span class="string">"product1"</span>,description:<span class="string">"A product"</span>,category:<span class="string">"category1"</span>,price:<span class="number">100</span>&#125;,</div><div class="line">			&#123;name:<span class="string">"product2"</span>,description:<span class="string">"A product"</span>,category:<span class="string">"category1"</span>,price:<span class="number">110</span>&#125;,</div><div class="line">			&#123;name:<span class="string">"product3"</span>,description:<span class="string">"A product"</span>,category:<span class="string">"category2"</span>,price:<span class="number">210</span>&#125;,</div><div class="line">			&#123;name:<span class="string">"product4"</span>,description:<span class="string">"A product"</span>,category:<span class="string">"category3"</span>,price:<span class="number">199</span>&#125;</div><div class="line">		]</div><div class="line">	&#125;</div><div class="line">&#125;])</div></pre></td></tr></table></figure></p>
<h3 id="显示产品详情"><a href="#显示产品详情" class="headerlink" title="显示产品详情"></a>显示产品详情</h3><p>为了显示产品详情，需要向html文件添加一些HTML标签。AngularJS让显示数据很容易。下面是修改后的<code>app.html</code>文件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">ng-app</span>=<span class="string">"sportsStore"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>SportsStore<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"angular.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"bootstrap.css"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"bootstrap-theme.css"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">			angular.module(<span class="string">"sportsStore"</span>,[]);</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--引入顶级控制器--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"controllers/sportsStore.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!--使用控制器--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-controller</span>=<span class="string">"sportsStoreCtrl"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"navbar navbar-inverse"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span>&gt;</span>运动商店<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">header</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"panel panel-default row"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"col-xs-3"</span>&gt;</span></div><div class="line">				Categories go here</div><div class="line">			<span class="tag">&lt;/<span class="name">nav</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-8"</span>&gt;</span></div><div class="line">				<span class="comment">&lt;!--遍历添加商品--&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"well"</span> <span class="attr">ng-repeat</span>=<span class="string">"item in data.products"</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">h3</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></div><div class="line">						<span class="comment">&lt;!--使用金额过滤器，将数值转换为金额--&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"pull-right label label-primary"</span>&gt;</span></div><div class="line">							&#123;&#123;item.price | currency&#125;&#125;</div><div class="line">						<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"lead"</span>&gt;</span>&#123;&#123;item.description &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="显示分类列表"><a href="#显示分类列表" class="headerlink" title="显示分类列表"></a>显示分类列表</h3><ul>
<li><p>创建分类去重过滤器<br>  分类列表不能重复，这意味着我们要对产品的<code>category</code>属性值进行去重。使用AngularJS的自定义过滤器能很方便实现。<br>  现在我创建一个<code>customFilters</code>模块，该模块包含项目所有自定义的过滤器。下面是<code>filters/customFilters.js</code>文件的代码：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">"customFilter"</span>,[])</div><div class="line">.filter(<span class="string">"unique"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">data,propertyName</span>)</span>&#123;</div><div class="line">		<span class="comment">//只对数组每个对象的属性过滤,返回对象属性值的集合</span></div><div class="line">		<span class="keyword">if</span>(angular.isArray(data) &amp;&amp; angular.isString(propertyName))&#123;</div><div class="line">			<span class="keyword">var</span> results = [];</div><div class="line">			<span class="keyword">var</span> keys = &#123;&#125;;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; data.length ; i++)&#123;</div><div class="line">				<span class="keyword">var</span> val = data[i][propertyName];</div><div class="line">				<span class="keyword">if</span>(angular.isUndefined(keys[val]))&#123;</div><div class="line">					keys[val] = <span class="literal">true</span>;</div><div class="line">					results.push(val);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> result;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			<span class="keyword">return</span> data;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>生成分类导航链接<br>  生成可供用户点击的分类导航链接需要用到上一段创建的unique过滤器，还有一些可用的AngularJS内置功能。下面是<code>app.html</code>文件修改的部分代码：</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">		<span class="comment">//依赖customFilter模块</span></div><div class="line">		angular.module(<span class="string">"sportsStore"</span>,[<span class="string">"customFilter"</span>]);</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--引入顶级控制器--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"controllers/sportsStore.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--引入自定义过滤器--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"filters/customFilters.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">...</div><div class="line">    <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"col-xs-3"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">ng-click</span>=<span class="string">"selectCategory()"</span> <span class="attr">class</span>=<span class="string">"btn btn-block btn-default"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--先对商品按目录进行排序,然后再返回去重后的目录--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">ng-repeat</span>=<span class="string">"item in data.products | orderBy:'category' | unique:'category'"</span></span></div><div class="line">			<span class="attr">ng-click</span>=<span class="string">"selectCategory(item)"</span> <span class="attr">class</span>=<span class="string">"btn btn-block btn-default btn-lg"</span>&gt;&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">nav</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>选择分类<br>  使用<code>ng-click</code>指令响应元素的点击事件，在本例中，点击导航菜单时触发<code>selectCategory</code>行为，为此，我需要在控制器定义该行为。我不想在顶级<code>sportsStore.js</code>控制器上添加该行为，因为这个控制器是定义应用程序通用行为和数据，作为替代，我会创建新控制器，它仅被用于产品列表和分类视图。下面是<code>controllers/productListController.js</code>文件的内容：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">"sportsStore"</span>)</div><div class="line">.controller(<span class="string">"productListCtrl"</span>,[<span class="string">"$scope"</span>,<span class="string">"$filter"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope,$filter</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> selectedCategory = <span class="literal">null</span>;</div><div class="line">	$scope.selectCategory = <span class="function"><span class="keyword">function</span>(<span class="params">newCategory</span>)</span>&#123;</div><div class="line">		selectedCategory = newCategory;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//当没有选中产品分类(显示全部)或者产品所在分类被选中时返回true(显示选择的分类)</span></div><div class="line">	$scope.categoryFilterFn = <span class="function"><span class="keyword">function</span>(<span class="params">product</span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> selectedCategory == <span class="literal">null</span> || product.category == selectedCategory;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;])</div></pre></td></tr></table></figure>
<p>  在页面中应用控制器,<code>app.html</code>修改的部分代码如下：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">   ...</div><div class="line">   &lt;!--引入自定义过滤器--&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"filters/customFilters.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;!--引入产品列表控制器--&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"controllers/productListController.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">   ...</div><div class="line">   &lt;!--使用控制器--&gt;</div><div class="line">   &lt;section class="panel panel-default row" ng-controller="productListCtrl"&gt;</div><div class="line">   ...</div><div class="line">   &lt;!--遍历添加商品,filter过滤器只返回结果为true的数据--&gt;</div><div class="line">&lt;div class="well" ng-repeat="item in data.products | filter:categoryFilterFn"&gt;</div><div class="line">   ...</div></pre></td></tr></table></figure>
</li>
<li><p>高亮选择的分类<br>  对被选分类按钮使用Bootstrap的btn-primary CSS类以实现高亮显示。下面是修改后的<code>productListController.js</code>文件</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">"sportsStore"</span>)</div><div class="line"><span class="comment">//定义激活添加的类名</span></div><div class="line">.constant(<span class="string">"productListActiveClass"</span>,<span class="string">"btn-primary"</span>)</div><div class="line">.controller(<span class="string">"productListCtrl"</span>,[<span class="string">"$scope"</span>,<span class="string">"$filter"</span>,<span class="string">"productListActiveClass"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope,$filter,productListActiveClass</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> selectedCategory = <span class="literal">null</span>;</div><div class="line">	$scope.selectCategory = <span class="function"><span class="keyword">function</span>(<span class="params">newCategory</span>)</span>&#123;</div><div class="line">		selectedCategory = newCategory;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//当没有选中产品分类(显示全部)或者产品所在分类被选中时返回true(显示选择的分类)</span></div><div class="line">	$scope.categoryFilterFn = <span class="function"><span class="keyword">function</span>(<span class="params">product</span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> selectedCategory == <span class="literal">null</span> || product.category == selectedCategory;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//若当前类别被选中,添加样式</span></div><div class="line">	$scope.getCategoryClass = <span class="function"><span class="keyword">function</span>(<span class="params">category</span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> selectedCategory == category ? productListActiveClass : <span class="string">""</span>;</div><div class="line">	&#125;</div><div class="line">&#125;])</div></pre></td></tr></table></figure>
<p>  下面是<code>app.html</code>修改的代码：<br>  <img src="imgs/1486198602123_2.png" alt=""></p>
</li>
<li><p>添加分页</p>
<ol>
<li><p>更新控制器<br> 我更新了<code>productListCtrl</code>控制器来支持分页，下面是更新后的<code>controllers/productListController.js</code>文件</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">"sportsStore"</span>)</div><div class="line"><span class="comment">//定义激活添加的类名</span></div><div class="line">.constant(<span class="string">"productListActiveClass"</span>,<span class="string">"btn-primary"</span>)</div><div class="line"><span class="comment">//分页大小</span></div><div class="line">.constant(<span class="string">"productListPageCount"</span>,<span class="number">3</span>)</div><div class="line">.controller(<span class="string">"productListCtrl"</span>,[<span class="string">"$scope"</span>,<span class="string">"$filter"</span>,<span class="string">"productListActiveClass"</span>,<span class="string">"productListPageCount"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope,$filter,productListActiveClass,productListPageCount</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> selectedCategory = <span class="literal">null</span>;</div><div class="line">	$scope.selectedPage = <span class="number">1</span>;</div><div class="line">	$scope.pageSize = productListPageCount;</div><div class="line">	</div><div class="line">	$scope.selectCategory = <span class="function"><span class="keyword">function</span>(<span class="params">newCategory</span>)</span>&#123;</div><div class="line">		selectedCategory = newCategory;</div><div class="line">		<span class="comment">//选择新的分类时默认显示第一页</span></div><div class="line">		$scope.selectedPage = <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//当没有选中产品分类(显示全部)或者产品所在分类被选中时返回true(显示选择的分类)</span></div><div class="line">	$scope.categoryFilterFn = <span class="function"><span class="keyword">function</span>(<span class="params">product</span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> selectedCategory == <span class="literal">null</span> || product.category == selectedCategory;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//若当前类别被选中,添加样式</span></div><div class="line">	$scope.getCategoryClass = <span class="function"><span class="keyword">function</span>(<span class="params">category</span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> selectedCategory == category ? productListActiveClass : <span class="string">""</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//选择分页</span></div><div class="line">	$scope.selectPage = <span class="function"><span class="keyword">function</span>(<span class="params">newPage</span>)</span>&#123;</div><div class="line">		$scope.selectedPage = newPage;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//选中页的样式</span></div><div class="line">	$scope.getPageClass = <span class="function"><span class="keyword">function</span>(<span class="params">page</span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> $scope.selectedPage == page ? productListActiveClass : <span class="string">""</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;])</div></pre></td></tr></table></figure>
</li>
<li><p>实现过滤器<br> 我创建了两个新过滤器支持分页，我将二者添加到customFilter.js文件。下面是修改后的<code>filters/customFilters.js</code>文件的代码：</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">"customFilter"</span>,[])</div><div class="line">.filter(<span class="string">"unique"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">data,propertyName</span>)</span>&#123;</div><div class="line">    	<span class="comment">//只对数组每个对象的属性过滤,返回对象属性值的集合</span></div><div class="line">		<span class="keyword">if</span>(angular.isArray(data) &amp;&amp; angular.isString(propertyName))&#123;</div><div class="line">			<span class="keyword">var</span> results = [];</div><div class="line">			<span class="keyword">var</span> keys = &#123;&#125;;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; data.length ; i++)&#123;</div><div class="line">				<span class="keyword">var</span> val = data[i][propertyName];</div><div class="line">				<span class="keyword">if</span>(angular.isUndefined(keys[val]))&#123;</div><div class="line">					keys[val] = <span class="literal">true</span>;</div><div class="line">					results.push(val);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> results;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			<span class="keyword">return</span> data;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;)</div><div class="line">.filter(<span class="string">"range"</span>,[<span class="string">"$filter"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$filter</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">data,page,size</span>)</span>&#123;</div><div class="line">		<span class="keyword">if</span>(angular.isArray(data) &amp;&amp; angular.isNumber(page) &amp;&amp; angular.isNumber(size))&#123;</div><div class="line">			<span class="keyword">var</span> start_index = ( page - <span class="number">1</span> ) * size;</div><div class="line">			<span class="keyword">if</span>(data.length &lt; start_index)&#123;</div><div class="line">				<span class="keyword">return</span> [];</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				<span class="comment">//返回当前页的数据</span></div><div class="line">				<span class="keyword">return</span> $filter(<span class="string">"limitTo"</span>)(data.splice(start_index),size);</div><div class="line">			&#125;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			<span class="keyword">return</span> data;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;])</div><div class="line">.filter(<span class="string">"pageCount"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">data,size</span>)</span>&#123;</div><div class="line">		<span class="keyword">if</span>(angular.isArray(data))&#123;</div><div class="line">			<span class="keyword">var</span> result = [];</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="built_in">Math</span>.ceil(data.length/size) ; i++)&#123;</div><div class="line">				result.push(i);</div><div class="line">			&#125;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			<span class="keyword">return</span> data;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>更新视图<br> 实现分页的最后一步就是更新视图。下面是修改后的<code>app.html</code>页面：</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html ng-app="sportsStore"&gt;</div><div class="line">	&lt;head&gt;</div><div class="line">		&lt;meta charset="UTF-8"&gt;</div><div class="line">		&lt;title&gt;SportsStore&lt;/title&gt;</div><div class="line">		&lt;script src="angular.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;</div><div class="line">		&lt;link rel="stylesheet" type="text/css" href="bootstrap.css"/&gt;</div><div class="line">		&lt;link rel="stylesheet" type="text/css" href="bootstrap-theme.css"/&gt;</div><div class="line">		&lt;script type="text/javascript"&gt;</div><div class="line">			//依赖customFilter模块</div><div class="line">			angular.module("sportsStore",["customFilter"]);</div><div class="line">		&lt;/script&gt;</div><div class="line">		&lt;!--引入顶级控制器--&gt;</div><div class="line">		&lt;script src="controllers/sportsStore.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;</div><div class="line">		&lt;!--引入自定义过滤器--&gt;</div><div class="line">		&lt;script src="filters/customFilters.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;</div><div class="line">		&lt;!--引入产品列表控制器--&gt;</div><div class="line">		&lt;script src="controllers/productListController.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;</div><div class="line">	&lt;/head&gt;</div><div class="line">	&lt;!--使用控制器--&gt;</div><div class="line">	&lt;body ng-controller="sportsStoreCtrl"&gt;</div><div class="line">		&lt;header class="navbar navbar-inverse"&gt;</div><div class="line">			&lt;a href="#" class="navbar-brand"&gt;运动商店&lt;/a&gt;</div><div class="line">		&lt;/header&gt;</div><div class="line">		&lt;section class="panel panel-default row" ng-controller="productListCtrl"&gt;</div><div class="line">			&lt;nav class="col-xs-3"&gt;</div><div class="line">				&lt;a ng-click="selectCategory()" class="btn btn-block btn-default" </div><div class="line">					ng-class="getCategoryClass()"&gt;Home&lt;/a&gt;</div><div class="line">				&lt;!--先对商品按目录进行排序,然后再返回去重后的目录--&gt;</div><div class="line">				&lt;a ng-repeat="item in data.products | orderBy:'category' | unique:'category'"</div><div class="line">					ng-click="selectCategory(item)" class="btn btn-block btn-default btn-lg" </div><div class="line">					ng-class="getCategoryClass(item)"&gt;&#123;&#123;item&#125;&#125;&lt;/a&gt;</div><div class="line">			&lt;/nav&gt;</div><div class="line">			&lt;div class="col-xs-8"&gt;</div><div class="line">				&lt;!--遍历添加商品--&gt;</div><div class="line">				&lt;div class="well" ng-repeat="item in data.products | filter:categoryFilterFn | range:selectedPage:pageSize"&gt;</div><div class="line">					&lt;h3&gt;</div><div class="line">						&lt;strong&gt;&#123;&#123;item.name&#125;&#125;&lt;/strong&gt;</div><div class="line">						&lt;!--使用金额过滤器，将数值转换为金额--&gt;</div><div class="line">						&lt;span class="pull-right label label-primary"&gt;</div><div class="line">							&#123;&#123;item.price | currency&#125;&#125;</div><div class="line">						&lt;/span&gt;</div><div class="line">					&lt;/h3&gt;</div><div class="line">					&lt;span class="lead"&gt;&#123;&#123;item.description &#125;&#125;&lt;/span&gt;</div><div class="line">				&lt;/div&gt;</div><div class="line">				&lt;div class="pull-right btn-group"&gt;</div><div class="line">					&lt;a ng-repeat="page in data.products | filter:categoryFilterFn | pageCount:pageSize"</div><div class="line">						ng-click="selectPage($index + 1)" class="btn btn-default" ng-class="getPageClass($index + 1)"&gt;</div><div class="line">						&#123;&#123;$index + 1&#125;&#125;</div><div class="line">					&lt;/a&gt;</div><div class="line">				&lt;/div&gt;</div><div class="line">			&lt;/div&gt;</div><div class="line">		&lt;/section&gt;</div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本章开始使用AngularJS开发一个真正的应用程序：运动商店，本章完成产品的展示、分页、分类导航功能，数据使用虚拟数据。&lt;/p&gt;
    
    </summary>
    
      <category term="AngularJS" scheme="http://heji.website/categories/AngularJS/"/>
    
    
      <category term="AngularJS" scheme="http://heji.website/tags/AngularJS/"/>
    
  </entry>
  
  <entry>
    <title>第三章、结合背景理解AngularJS</title>
    <link href="http://heji.website/2017/02/06/%E7%AC%AC%E4%B8%89%E7%AB%A0%E3%80%81%E7%BB%93%E5%90%88%E8%83%8C%E6%99%AF%E7%90%86%E8%A7%A3AngularJS/"/>
    <id>http://heji.website/2017/02/06/第三章、结合背景理解AngularJS/</id>
    <published>2017-02-06T00:33:37.717Z</published>
    <updated>2017-02-06T01:03:19.204Z</updated>
    
    <content type="html"><![CDATA[<p>并不是所有的应用程序都适合使用AngularJS开发，本章主要介绍AngularJS的适用场景。</p>
<a id="more"></a>
<p>AngularJS不是能够解决任何问题的万能利器，所以了解何时应该使用AngularJS以及何时应该寻找替代品是非常重要的。AngularJS将那些曾经仅对服务器端开发者可用的功能完整地搬到了浏览器端。这意味着使用了AngularJS的HTML文档每次被加载时，AngularJS会有很多事要做——需要编译HTML元素，需要计算数据绑定，需要执行指令等。这些工作都需要时间去执行，所需时长取决于HTML文档及其相关联的JavaScript代码的复杂度，而且关键是浏览器的质量和设备的处理能力。<br>因此，Angular应用优化的目标应该是尽可能地降低这些设置的执行频率，并在其执行时尽可能多地向用户发送应用的更多内容。这意味着需要你仔细考虑所搭建的Web应用程序的类型。广义上讲，存在两种类型的Web应用程序：回合式和单页面。</p>
<h2 id="回合式和单页面应用程序"><a href="#回合式和单页面应用程序" class="headerlink" title="回合式和单页面应用程序"></a>回合式和单页面应用程序</h2><h3 id="回合式模型"><a href="#回合式模型" class="headerlink" title="回合式模型"></a>回合式模型</h3><p>浏览器向服务器请求一个初始的HTML文档。用户交互（例如单击链接或者提交表单）会使得浏览器发送请求并接受一个全新的HTML文档。在这类程序中，浏览器本质上是一个HTML内容的解析引擎，所有的应用程序逻辑和数据都保留在服务器上。<br>回合式应用存在一些严重的不足之处：用户在下一个HTML文档被请求并加载之前必须等待，需要大型服务器端基础设施来处理所有请求，需要很多带宽。</p>
<h3 id="单页面应用"><a href="#单页面应用" class="headerlink" title="单页面应用"></a>单页面应用</h3><p>单页面应用另辟蹊径，一个初始的HTML文档被发送给服务器，但是用户交互所产生的Ajax请求只会请求较小的HTML片段，初始的HTML文档不会被再次加载或者替换，在Ajax请求被异步执行时用户还可以继续与已有的HTML进行交互。(AngularJS的路由加载模块就是明显的例子，页面的切换只是部分HTML代码的变换，页面还是原来的页面)<br>AngularJS以单页面应用程序和复杂的回合式应用程序见长。对于较简单的项目，一般来说jQuery或者类似的替代者会是更好的选择，尽管没什么能阻止你在所有的项目中使用AngularJS。<br><img src="imgs/1484218583460_6.png" alt=""><br>AngularJS与jQuery在Web应用开发上走的是不同的路，jQuery完全是通过显式操作浏览器中的DOM来创建应用。AngularJS采用的方法则是将浏览器吸收为应用开发的基础。</p>
<h2 id="理解MVC模式"><a href="#理解MVC模式" class="headerlink" title="理解MVC模式"></a>理解MVC模式</h2><p>使用MVC模式的关键前提是实现关注点分离，即应用程序中的数据模型与业务和展示逻辑解耦。主要的三个构件是模型、控制器和视图。<br><img src="imgs/1484219382996_8.png" alt="服务器端的MVC"><br>AngularJS是在浏览器中工作的，导致对MVC的形式产生一些影响。<br><img src="imgs/1484219499877_9.png" alt="浏览器端的MVC"></p>
<ul>
<li><p>理解模型<br>  模型（MVC中的M）包含了用户赖以工作的数据。有两种广义上的模型：视图模型，只表示从控制器传往视图的数据；领域模型：包含了业务领域的数据，以及用于创建、存储、和操纵这些数据的各种操作、转换和规则，统称逻辑模型。<br>  模型应该：</p>
<pre><code>* 包含领域数据
* 包含创建、管理和修改领域数据的逻辑
* 提供整洁的API，能够暴露模型数据及之上的操作。
</code></pre><p>  模型不应该：</p>
<pre><code>* 暴露模型数据是如何获取或管理的细节
* 包含根据用户交互对模型进行转换的逻辑（这是控制器的职责）
* 包含将数据显示给用户的逻辑
</code></pre></li>
<li><p>理解控制器<br>  在一个AngularJS应用中，控制器就像结缔组织一样，作为数据模型和视图之间的渠道。控制器会向作用域中添加业务领域逻辑（称为行为），而作用域是模型的子集。<br>  控制器应该：</p>
<pre><code>* 包含初始化作用域所需的逻辑
* 包含视图所需的用于表示作用域中的数据的逻辑行为。
* 包含根据用户交互来更新作用域的逻辑行为
</code></pre><p>  控制器不应当：</p>
<pre><code>* 包含操作DOM的逻辑（那是视图的职责）
* 包含管理数据持久化的逻辑（那是模型的职责）
* 在作用域之外操作数据
</code></pre></li>
<li><p>理解视图数据<br>  领域模型并不是AngularJS应用程序中的唯一数据。控制器可以创建视图数据，以简化视图的定义。视图数据不会被持久化。而且要么是通过综合领域模型数据的几部分而成的，要么是存在于对用户交互的响应中。</p>
</li>
<li><p>理解视图<br>  AngularJS视图是通过HTML元素来定义的，而这些元素是通过数据或者指令来进行增强或者生成的。正是AngularJS指令使得视图变得如此灵活。<br>  视图应当：</p>
<pre><code>* 包含将数据呈现给用户所需的逻辑和标记。
</code></pre><p>  视图不应当：</p>
<pre><code>* 包含复杂逻辑（这最好放到控制器中去）
* 包含创建、存储或者操作领域模型的逻辑
</code></pre></li>
</ul>
<h2 id="理解RESTful服务"><a href="#理解RESTful服务" class="headerlink" title="理解RESTful服务"></a>理解RESTful服务</h2><p>一般情况下，我们并不希望客户端代码直接访问数据存储——这样会在客户端和数据存储之间产生紧耦合，使得单元测试复杂化，也使得在不修改客户端代码的情况下对数据存储的修改变得困难。<br>通过服务器端作为中介来访问数据存储，可以消除紧耦合。客户端的逻辑负责从服务器端存取数据，而无需知道数据在后台是如何存储或访问的细节。<br>有许多种在客户端和服务端之间传递数据的方法。最常见的一种是使用Ajax请求来调用服务器端代码，让服务器发送JSON并使用HTML表单来修改数据。这种方法可以很好地工作，也是RESTful Web服务的基础，利用了HTTP请求的天然特性对数据进行CRUD操作。<br>在一个RESTful服务中，被请求的操作通过HTTP方法和URL的组合进行表示。对于RESTful的Web服务没有标准的URL规范，但是一般想法是让URL是不言自明的，这样能够让URL引用的变得更加明显。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://myserver.mydomain.com/people/bob</div></pre></td></tr></table></figure></p>
<p>在本例中，明显地看出有一个people的数据集合，引用的具体对象是bob。<br>URL可以识别出我想操作的数据对象，HTTP方法则指定了我想执行的操作。如下表所示：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>GET</td>
<td>获取URL指定的数据对象</td>
</tr>
<tr>
<td>PUT</td>
<td>更新URL指定的数据对象</td>
</tr>
<tr>
<td>POST</td>
<td>创建一个新的对象，通常使用表单数据值作为数据域</td>
</tr>
<tr>
<td>DELETE</td>
<td>删除URL所指定的数据对象</td>
</tr>
</tbody>
</table>
<h2 id="Angular应用的几条规则"><a href="#Angular应用的几条规则" class="headerlink" title="Angular应用的几条规则"></a>Angular应用的几条规则</h2><ul>
<li>视图逻辑应该仅为显示准备数据，并且永远不应该修改模型</li>
<li>控制器永远不应该直接创建、更新或删除模型中的数据</li>
<li>客户端永远都不应该直接访问数据存储。</li>
<li>不要尝试在Angular应用使用jQuery操作DOM，技术的选型应该在最初的时候考虑清楚，否则后患无穷。如果实在需要使用jQuery，建议使用AngularJS封装的jqLite，后面会讲解。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;并不是所有的应用程序都适合使用AngularJS开发，本章主要介绍AngularJS的适用场景。&lt;/p&gt;
    
    </summary>
    
      <category term="AngularJS" scheme="http://heji.website/categories/AngularJS/"/>
    
    
      <category term="AngularJS" scheme="http://heji.website/tags/AngularJS/"/>
    
  </entry>
  
  <entry>
    <title>第二章、第一个AngularJS应用</title>
    <link href="http://heji.website/2017/01/10/%E7%AC%AC%E4%BA%8C%E7%AB%A0%E3%80%81%E7%AC%AC%E4%B8%80%E4%B8%AAAngularJS%E5%BA%94%E7%94%A8/"/>
    <id>http://heji.website/2017/01/10/第二章、第一个AngularJS应用/</id>
    <published>2017-01-10T08:37:58.418Z</published>
    <updated>2017-01-10T09:00:07.249Z</updated>
    
    <content type="html"><![CDATA[<p>本章使用AngularJS特性打造出一个简单的Web应用程序。</p>
<a id="more"></a>
<h2 id="准备项目"><a href="#准备项目" class="headerlink" title="准备项目"></a>准备项目</h2><p><strong>注意：除非特殊说明,否则都是以angularjs目录作为项目根目录</strong><br>在assets目录下新建一个<code>todo.html</code>的HTML文件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>待办事项<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"../lib/bootstrap-3.3.0/dist/css/bootstrap.css"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"../lib/bootstrap-3.3.0/dist/css/bootstrap-theme.css"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page-header"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">h1</span>&gt;</span>To DO List<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control"</span> /&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-btn"</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-striped"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">thead</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">th</span>&gt;</span>描述<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">th</span>&gt;</span>是否完成<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">thead</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tbody</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">td</span>&gt;</span>买花<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">td</span>&gt;</span>否<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">td</span>&gt;</span>买鞋子<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">td</span>&gt;</span>否<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">td</span>&gt;</span>工作总结<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">td</span>&gt;</span>是<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">td</span>&gt;</span>打电话给家里<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">td</span>&gt;</span>否<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在浏览器上访问<code>http://localhost:3000/angularjs/assets/todo.html</code>查看效果，目前没有应用AngularJS。</p>
<h2 id="使用AngularJS"><a href="#使用AngularJS" class="headerlink" title="使用AngularJS"></a>使用AngularJS</h2><h3 id="将AngularJS应用到HTML文件"><a href="#将AngularJS应用到HTML文件" class="headerlink" title="将AngularJS应用到HTML文件"></a>将AngularJS应用到HTML文件</h3><ol>
<li>引入AngularJS文件</li>
<li>创建一个AngularJS模块</li>
<li>对元素应用模块</li>
</ol>
<p>AngularJS应用由一个或多个模块组成，模块是由调用angular.module方法而创建的，该方法接收两个参数，第一个参数是模块名称，第二个参数是依赖的其他模块，当没有依赖其他模块时，传一个空数组。完成模块的定义后，对html或其他元素使用<code>ng-app</code>指令来使用模块，该指令告诉浏览器，指令内的所有元素被AngularJS编译和处理，通常当只使用AngularJS时，在html元素添加<code>ng-app</code>指令，当需要与其他技术混合时，可以在文档的其他元素添加<code>ng-app</code>指令缩小AngularJS应用的边界。</p>
<ul>
<li>创建数据模型<br>  AngularJS支持MVC模式，推荐视图与数据模型、逻辑分离，在该例我们使用JavaScript创建数据模型。</li>
<li>创建控制器<br>  控制器是由angular.module所返回的Module对象上的controller方法创建的。controller方法接收两个参数，第一个是控制器的名称第二个是将会被调用的函数，用于定义控制器功能。惯例一般是对控制器命名为<name>Ctrl，真正的应用程序一般会生成多个控制器，但是本例中仅需要一个，名字取为ToDoCtrl。<br>  控制器函数接收一个<code>$scope</code>的参数，<code>$</code>表示AngularJS提供的内置特性，<code>$scope</code>对象常用于对控制器范围的视图提供数据和功能。控制器定义好之后，在元素上使用<code>ng-controller</code>为元素指定控制器。</name></li>
<li><p>创建视图</p>
<ul>
<li>插入模型值<br>  使用<code></code>绑定数据模型，在该例中，todo即表示model对象，Expression可以是任何有效的JavaScript语句。需要注意的是，你应该仅使用表达式来执行一些简单操作，而不要执行复杂逻辑或对模型进行操作，这应该是控制器该做的事。</li>
<li>使用指令<br>  在清单中，使用了另一个AngularJS内置指令<code>ng-repeat</code>。该指令用于告诉AngularJS从一个集合中的各个对象生成所应用到的元素及其内容。该指令的格式为<code>&lt;name&gt; in &lt;collection&gt;</code></li>
</ul>
</li>
<li><p>最终代码<br>  最终代码如下：</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">ng-app</span>=<span class="string">"todoApp"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>待办事项<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"../lib/bootstrap-3.3.0/dist/css/bootstrap.css"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"../lib/bootstrap-3.3.0/dist/css/bootstrap-theme.css"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-controller</span>=<span class="string">"todoCtrl"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page-header"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;todo.user&#125;&#125;'s To DO List<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label label-default"</span>&gt;</span>&#123;&#123;todo.items.length&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control"</span> /&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-btn"</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-striped"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">thead</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">th</span>&gt;</span>描述<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">th</span>&gt;</span>是否完成<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">thead</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tbody</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">tr</span> <span class="attr">ng-repeat</span>=<span class="string">"item in todo.items"</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.action&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.done ? "是" : "否"&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../lib/angular-1.2.5/angular.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">			<span class="keyword">var</span> todoApp = angular.module(<span class="string">'todoApp'</span>,[]);</div><div class="line">			<span class="comment">//定义数据模型</span></div><div class="line">			<span class="keyword">var</span> model = &#123;</div><div class="line">				user:<span class="string">"HeJi"</span>,</div><div class="line">				items:[</div><div class="line">					&#123;action:<span class="string">"买花"</span>,done:<span class="literal">false</span>&#125;,</div><div class="line">					&#123;action:<span class="string">"买鞋子"</span>,done:<span class="literal">false</span>&#125;,</div><div class="line">					&#123;action:<span class="string">"工作总结"</span>,done:<span class="literal">true</span>&#125;,</div><div class="line">					&#123;action:<span class="string">"打电话给家里"</span>,done:<span class="literal">false</span>&#125;</div><div class="line">				]</div><div class="line">			&#125;</div><div class="line">			<span class="comment">//定义控制器</span></div><div class="line">			todoApp.controller(<span class="string">'todoCtrl'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</div><div class="line">				$scope.todo = model;</div><div class="line">			&#125;)</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="基本功能之外"><a href="#基本功能之外" class="headerlink" title="基本功能之外"></a>基本功能之外</h2><ul>
<li><p>使用双向数据绑定<br>  上一节使用的绑定被称为单向绑定，其值是从模型中取得的。另外，AngularJS还支持双向数据绑定，模型用于生成元素，元素的变化也能引起模型中的相应变化。为了演示双向数据绑定，我添加一个复选框以便修改数据的done属性。</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">   //...表示还有其他内容,后面都是这样标记</div><div class="line">   ...</div><div class="line">   <span class="tag">&lt;<span class="name">tr</span> <span class="attr">ng-repeat</span>=<span class="string">"item in todo.items"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.action&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">ng-model</span>=<span class="string">"item.done"</span> /&gt;</span></div><div class="line">		&#123;&#123;item.done ? "是" : "否"&#125;&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">   ...</div></pre></td></tr></table></figure>
</li>
<li><p>创建和使用控制器行为<br>  控制器在作用域上定义行为。行为是对模型中的数据进行操作的函数，用于实现应用程序中的业务逻辑。为了演示一个简单的行为，我们修改header以显示未完成的待办事项数目。</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">   ...</div><div class="line">   <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label label-default"</span> <span class="attr">ng-hide</span>=<span class="string">"incompleteCount()==0"</span>&gt;</span>&#123;&#123;incompleteCount()&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">   ...</div><div class="line">   //定义控制器</div><div class="line">todoApp.controller('todoCtrl',function($scope)&#123;</div><div class="line">	$scope.todo = model;</div><div class="line">	//计算未完成待办事项数目</div><div class="line">	$scope.incompleteCount = function()&#123;</div><div class="line">		var count = 0;</div><div class="line">		angular.forEach($scope.todo.items,function(item)&#123;</div><div class="line">			if(!item.done)&#123;</div><div class="line">				count++;</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">		return count;</div><div class="line">	&#125;</div><div class="line">&#125;)</div><div class="line">   ...</div></pre></td></tr></table></figure>
<p>  行为是通过在<code>$scope</code>对象上添加函数而定义的。向<code>$scope</code>对象添加的函数所赋予的属性名称，被作为行为名，例如，本例中，<code>incompleteCount</code>就是行为名。另外，我使用了<code>ng-hide指令</code>，当赋值表达式的计算结果为true时，<code>ng-hide</code><br>  指令会隐藏元素及其子元素。</p>
</li>
<li><p>使用依赖于其他行为的行为<br>  因为行为是通过使用JavaScript函数而创建的，所以同一控制器中一个行为可以在其他行为的基础上创建。例如，我创建一个行为，可以根据待办事项列表中的未完成事项数来选择CSS类。</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">   ...</div><div class="line">   <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label label-default"</span> <span class="attr">ng-class</span>=<span class="string">"warningLevel()"</span> <span class="attr">ng-hide</span>=<span class="string">"incompleteCount()==0"</span>&gt;</span>&#123;&#123;incompleteCount()&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">   ...</div><div class="line">   //根据未完成事项数选择提醒类</div><div class="line">$scope.warningLevel = function()&#123;</div><div class="line">	return $scope.incompleteCount() <span class="tag">&lt; <span class="attr">3</span> ? "<span class="attr">label-success</span>" <span class="attr">:</span> "<span class="attr">label-warning</span>";</span></div><div class="line">&#125;</div><div class="line">   <span class="attr">...</span></div></pre></td></tr></table></figure>
</li>
<li><p>响应用户交互<br>  你已经见到了行为和指令是如何结合在一起创建应用特性的，最强大的组合之一便是将指令和行为用于响应用户交互。<br>例如，我修改todo.html的内容，让用户能够创建新的待办事项。</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">   ...</div><div class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-model</span>=<span class="string">"actionText"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-btn"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">ng-click</span>=<span class="string">"addNewItem(actionText)"</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">   ...</div><div class="line">   //添加待办事项</div><div class="line">$scope.addNewItem = function(actionText)&#123;</div><div class="line">	$scope.todo.items.push(&#123;action:actionText,done:false&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  这里需要说明的是，我给输入框绑定了一个没有挂靠在<code>$scope</code>对象的属性，AngularJS会动态地帮我们创建这个属性，然后在点击添加按钮的时候，再把这个属性传递到行为中。</p>
</li>
<li><p>对模型数据过滤和排序<br>  在todo.html文件中增加过滤器功能</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">   ...</div><div class="line">   <span class="comment">&lt;!--只遍历don属性为false的数据,根据action属性排序--&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">tr</span> <span class="attr">ng-repeat</span>=<span class="string">"item in todo.items | filter:&#123;done:false&#125; | orderBy:'action'"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.action&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">ng-model</span>=<span class="string">"item.done"</span> /&gt;</span></div><div class="line">		&#123;&#123;item.done ? "是" : "否"&#125;&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">   ...</div></pre></td></tr></table></figure>
<p>  AngularJS还支持自定义过滤器：</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">   ...</div><div class="line">   <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-striped"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">thead</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">th</span>&gt;</span>描述<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">th</span>&gt;</span>是否完成<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">thead</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">tbody</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tr</span> <span class="attr">ng-repeat</span>=<span class="string">"item in todo.items | checkedItems:showComplete | orderBy:'action'"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.action&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">ng-model</span>=<span class="string">"item.done"</span> /&gt;</span></div><div class="line">				&#123;&#123;item.done ? "是" : "否"&#125;&#125;</div><div class="line">			<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkbox-inline"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">ng-model</span>=<span class="string">"showComplete"</span> /&gt;</span>显示所有</div><div class="line">	<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">   ...</div><div class="line">   //自定义过滤器</div><div class="line">todoApp.filter('checkedItems',function()&#123;</div><div class="line">	return function(items,showComplete)&#123;</div><div class="line">		var resultArr = [];</div><div class="line">		angular.forEach(items,function(item)&#123;</div><div class="line">			if(item.done == false || showComplete)&#123;</div><div class="line">				resultArr.push(item);</div><div class="line">			&#125;</div><div class="line">		&#125;)</div><div class="line">		return resultArr;</div><div class="line">	&#125;</div><div class="line">&#125;)</div><div class="line">   ...</div></pre></td></tr></table></figure>
<p>  AngularJS模块对象的filter方法用于创建一个过滤器工厂，该工厂会返回一个函数用于过滤一组数据对象。目前暂时不要在意工厂这部分的细节，只需知道使用filter方法需要传入一个函数，该函数中需要一个能够返回过滤后数据的函数就够了。<br>  实际执行过滤功能的函数有两个参数，第一个参数items由AngularJS提供，表示过滤的集合，第二个参数自己传进来，过滤器参数之间使用<code>:</code>分隔。</p>
</li>
<li><p>通过Ajax获取数据<br>  我要做的最后一项修改是通过一个Ajax请求获取JSON形式的数据作为数据模型。<br>  AngularJS的模型对象有一个run方法，该方法仅在AngularJS执行完初始化设置后运行一次，常用于一次性的任务。故我们可以把Ajax请求放在run函数中，在run函数中可以依赖注入内置对象<code>$http</code>，该对象提供了对底层Ajax请求的访问功能。</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">   ...</div><div class="line">   //定义数据模型</div><div class="line">var model = &#123;</div><div class="line">	"user":"HeJi"</div><div class="line">&#125;;</div><div class="line">todoApp.run(function($http)&#123;</div><div class="line">       //get方法返回一个promise对象，该对象表示将在未来完成的工作</div><div class="line">    $http.get("todo.json").success(function(datas)&#123;</div><div class="line">		model.items = datas;</div><div class="line">	&#125;)</div><div class="line">&#125;);</div><div class="line">   ...</div></pre></td></tr></table></figure>
</li>
<li><p>最终代码如下：<br>  todo.html：</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">ng-app</span>=<span class="string">"todoApp"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>待办事项<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"../lib/bootstrap-3.3.0/dist/css/bootstrap.css"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"../lib/bootstrap-3.3.0/dist/css/bootstrap-theme.css"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-controller</span>=<span class="string">"todoCtrl"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page-header"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;todo.user&#125;&#125;'s To DO List<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label label-default"</span> <span class="attr">ng-class</span>=<span class="string">"warningLevel()"</span> <span class="attr">ng-hide</span>=<span class="string">"incompleteCount()==0"</span>&gt;</span>&#123;&#123;incompleteCount()&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-model</span>=<span class="string">"actionText"</span>/&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-btn"</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">ng-click</span>=<span class="string">"addNewItem(actionText)"</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-striped"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">thead</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">th</span>&gt;</span>描述<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">th</span>&gt;</span>是否完成<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">thead</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tbody</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">tr</span> <span class="attr">ng-repeat</span>=<span class="string">"item in todo.items | checkedItems:showComplete | orderBy:'action'"</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.action&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">							<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">ng-model</span>=<span class="string">"item.done"</span> /&gt;</span></div><div class="line">							&#123;&#123;item.done ? "是" : "否"&#125;&#125;</div><div class="line">						<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkbox-inline"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">ng-model</span>=<span class="string">"showComplete"</span> /&gt;</span>显示所有</div><div class="line">				<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../lib/angular-1.2.5/angular.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">			<span class="keyword">var</span> todoApp = angular.module(<span class="string">'todoApp'</span>,[]);</div><div class="line">			<span class="comment">//定义数据模型</span></div><div class="line">			<span class="keyword">var</span> model = &#123;</div><div class="line">				<span class="string">"user"</span>:<span class="string">"HeJi"</span></div><div class="line">			&#125;;</div><div class="line">			todoApp.run(<span class="function"><span class="keyword">function</span>(<span class="params">$http</span>)</span>&#123;</div><div class="line">				$http.get(<span class="string">"todo.json"</span>).success(<span class="function"><span class="keyword">function</span>(<span class="params">datas</span>)</span>&#123;</div><div class="line">					model.items = datas;</div><div class="line">				&#125;)</div><div class="line">			&#125;)</div><div class="line">			<span class="comment">//定义控制器</span></div><div class="line">			todoApp.controller(<span class="string">'todoCtrl'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</div><div class="line">				$scope.todo = model;</div><div class="line">				<span class="comment">//计算未完成待办事项数目</span></div><div class="line">				$scope.incompleteCount = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">					<span class="keyword">var</span> count = <span class="number">0</span>;</div><div class="line">					angular.forEach($scope.todo.items,<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">						<span class="keyword">if</span>(!item.done)&#123;</div><div class="line">							count++;</div><div class="line">						&#125;</div><div class="line">					&#125;);</div><div class="line">					<span class="keyword">return</span> count;</div><div class="line">				&#125;</div><div class="line">				<span class="comment">//根据未完成事项数选择提醒类</span></div><div class="line">				$scope.warningLevel = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">					<span class="keyword">return</span> $scope.incompleteCount() &lt; <span class="number">3</span> ? <span class="string">"label-success"</span> : <span class="string">"label-warning"</span>;</div><div class="line">				&#125;</div><div class="line">				<span class="comment">//添加待办事项</span></div><div class="line">				$scope.addNewItem = <span class="function"><span class="keyword">function</span>(<span class="params">actionText</span>)</span>&#123;</div><div class="line">					$scope.todo.items.push(&#123;action:actionText,done:<span class="literal">false</span>&#125;);</div><div class="line">				&#125;</div><div class="line">			&#125;);</div><div class="line">			<span class="comment">//自定义过滤器</span></div><div class="line">			todoApp.filter(<span class="string">'checkedItems'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">items,showComplete</span>)</span>&#123;</div><div class="line">					<span class="keyword">var</span> resultArr = [];</div><div class="line">					angular.forEach(items,<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">						<span class="keyword">if</span>(item.done == <span class="literal">false</span> || showComplete)&#123;</div><div class="line">							resultArr.push(item);</div><div class="line">						&#125;</div><div class="line">					&#125;)</div><div class="line">					<span class="keyword">return</span> resultArr;</div><div class="line">				&#125;</div><div class="line">			&#125;)</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>  todo.json：</p>
  <figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">	&#123;<span class="attr">"action"</span>:<span class="string">"买花"</span>,<span class="attr">"done"</span>:<span class="literal">false</span>&#125;,</div><div class="line">	&#123;<span class="attr">"action"</span>:<span class="string">"打电话给家里"</span>,<span class="attr">"done"</span>:<span class="literal">false</span>&#125;,</div><div class="line">	&#123;<span class="attr">"action"</span>:<span class="string">"买鞋子"</span>,<span class="attr">"done"</span>:<span class="literal">false</span>&#125;,</div><div class="line">	&#123;<span class="attr">"action"</span>:<span class="string">"工作总结"</span>,<span class="attr">"done"</span>:<span class="literal">true</span>&#125;</div><div class="line">]</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本章使用AngularJS特性打造出一个简单的Web应用程序。&lt;/p&gt;
    
    </summary>
    
      <category term="AngularJS" scheme="http://heji.website/categories/AngularJS/"/>
    
    
      <category term="AngularJS" scheme="http://heji.website/tags/AngularJS/"/>
    
  </entry>
  
  <entry>
    <title>第一章、搭建开发环境</title>
    <link href="http://heji.website/2017/01/10/%E7%AC%AC%E4%B8%80%E7%AB%A0%E3%80%81%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>http://heji.website/2017/01/10/第一章、搭建开发环境/</id>
    <published>2017-01-10T08:25:35.487Z</published>
    <updated>2017-01-10T08:49:16.466Z</updated>
    
    <content type="html"><![CDATA[<p>本章主要是学习AngularJS的准备工作，介绍了如何搭建一个简单的AngularJS开发环境。</p>
<a id="more"></a>
<ul>
<li>选择web浏览器<br>  本教程使用Google Chrome浏览器。</li>
<li>选择代码编辑器<br>  可以选择任意代码编辑器，本教程使用HBuilder</li>
<li>安装Node.js<br>  安装之后使用<code>node --version</code>测试是否安装成功。</li>
<li>创建项目目录<br>  在任意位置创建<code>angularjs</code>目录，作为项目运行的根目录。运行<code>npm init</code>填写基本信息初始化项目</li>
<li><p>安装web服务器<br>  一个简单的Web服务器足以用于开发，我使用Node内置的<code>http</code>模块、<code>fs</code>模块以及安装的<code>url</code>模块、<code>path</code>模块建了一个静态文件服务器:<br>  1.安装必须模块</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev url path</div></pre></td></tr></table></figure>
<p>  执行命令之后，<code>package.json</code>文件如下：</p>
  <figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"angularjs"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="attr">"description"</span>: <span class="string">"learn angular"</span>,</div><div class="line">  <span class="attr">"main"</span>: <span class="string">"./server/server.js"</span>,</div><div class="line">  <span class="attr">"scripts"</span>: &#123;</div><div class="line">    <span class="attr">"startServer"</span>: <span class="string">"node server/server.js"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"keywords"</span>: [</div><div class="line">    <span class="string">"angular"</span></div><div class="line">  ],</div><div class="line">  <span class="attr">"author"</span>: <span class="string">"heji"</span>,</div><div class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</div><div class="line">  <span class="attr">"devDependencies"</span>: &#123;</div><div class="line">    <span class="attr">"path"</span>: <span class="string">"^0.12.7"</span>,</div><div class="line">    <span class="attr">"url"</span>: <span class="string">"^0.11.0"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  2.在<code>angular</code>目录下建立一个server目录，作为定义服务器的目录，<code>server.js</code>是定义服务器的核心脚本，<code>mime.js</code>用于设置响应类型，<code>config.js</code>用于配置哪些文件使用缓存，缓存时间长短。<br>  <code>config.js</code>文件：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">exports.Expires = &#123;</div><div class="line">    fileMatch: <span class="regexp">/^(gif|png|jpg|js|css)$/ig</span>,</div><div class="line">    maxAge: <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">365</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>  <code>mime.js</code>文件：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">exports.types = &#123;</div><div class="line">    <span class="string">"css"</span>: <span class="string">"text/css"</span>,</div><div class="line">    <span class="string">"gif"</span>: <span class="string">"image/gif"</span>,</div><div class="line">    <span class="string">"html"</span>: <span class="string">"text/html"</span>,</div><div class="line">    <span class="string">"ico"</span>: <span class="string">"image/x-icon"</span>,</div><div class="line">    <span class="string">"jpeg"</span>: <span class="string">"image/jpeg"</span>,</div><div class="line">    <span class="string">"jpg"</span>: <span class="string">"image/jpeg"</span>,</div><div class="line">    <span class="string">"js"</span>: <span class="string">"text/javascript"</span>,</div><div class="line">    <span class="string">"json"</span>: <span class="string">"application/json"</span>,</div><div class="line">    <span class="string">"pdf"</span>: <span class="string">"application/pdf"</span>,</div><div class="line">    <span class="string">"png"</span>: <span class="string">"image/png"</span>,</div><div class="line">    <span class="string">"svg"</span>: <span class="string">"image/svg+xml"</span>,</div><div class="line">    <span class="string">"swf"</span>: <span class="string">"application/x-shockwave-flash"</span>,</div><div class="line">    <span class="string">"tiff"</span>: <span class="string">"image/tiff"</span>,</div><div class="line">    <span class="string">"txt"</span>: <span class="string">"text/plain"</span>,</div><div class="line">    <span class="string">"wav"</span>: <span class="string">"audio/x-wav"</span>,</div><div class="line">    <span class="string">"wma"</span>: <span class="string">"audio/x-ms-wma"</span>,</div><div class="line">    <span class="string">"wmv"</span>: <span class="string">"video/x-ms-wmv"</span>,</div><div class="line">    <span class="string">"xml"</span>: <span class="string">"text/xml"</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>  <code>server.js</code>文件：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">"url"</span>);</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</div><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</div><div class="line"><span class="keyword">var</span> mime = <span class="built_in">require</span>(<span class="string">"./mime"</span>).types;</div><div class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">"./config"</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> pathname = url.parse(request.url).pathname;</div><div class="line">    <span class="comment">//path.resolve('../')返回根目录的上级目录,因为URL已包含根目录</span></div><div class="line">    <span class="keyword">var</span> realPath = path.resolve(<span class="string">'../'</span>)+pathname;</div><div class="line">    fs.exists(realPath, <span class="function"><span class="keyword">function</span> (<span class="params">exists</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!exists) &#123;</div><div class="line">			<span class="comment">//如果路径不存在,返回404</span></div><div class="line">            response.writeHead(<span class="number">404</span>, &#123;</div><div class="line">                <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span></div><div class="line">            &#125;);</div><div class="line">            response.write(<span class="string">"This request URL "</span> + pathname + <span class="string">" was not found on this server."</span>);</div><div class="line">            response.end();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            fs.readFile(realPath, <span class="string">"binary"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, file</span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (err) &#123;</div><div class="line">					<span class="comment">//如果读取文件失败统一返回500</span></div><div class="line">                    response.writeHead(<span class="number">500</span>, &#123;</div><div class="line">                        <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span></div><div class="line">                    &#125;);</div><div class="line">                    response.end(err);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">					<span class="comment">//设置最后修改时间</span></div><div class="line">					fs.stat(realPath, <span class="function"><span class="keyword">function</span> (<span class="params">err, stat</span>) </span>&#123;</div><div class="line">						<span class="keyword">var</span> lastModified = stat.mtime.toUTCString();</div><div class="line">						response.setHeader(<span class="string">"Last-Modified"</span>, lastModified);</div><div class="line">						<span class="keyword">if</span> (request.headers[<span class="string">"If-Modified-Since"</span>] &amp;&amp; lastModified == request.headers[<span class="string">"If-Modified-Since"</span>]) &#123;</div><div class="line">							<span class="comment">//没有修改直接返回</span></div><div class="line">							response.writeHead(<span class="number">304</span>, <span class="string">"Not Modified"</span>);</div><div class="line">							response.end();</div><div class="line">						&#125;<span class="keyword">else</span>&#123;</div><div class="line">							<span class="comment">//根据后缀名设置正确的MIME类型</span></div><div class="line">							<span class="keyword">var</span> ext = path.extname(realPath);</div><div class="line">							ext = ext ? ext.slice(<span class="number">1</span>) : <span class="string">'unknown'</span>;</div><div class="line">							<span class="comment">//判断请求的资源是否需要缓存(在config.js文件中配置)</span></div><div class="line">							<span class="keyword">if</span> (ext.match(config.Expires.fileMatch)) &#123;</div><div class="line">								<span class="keyword">var</span> expires = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">								expires.setTime(expires.getTime() + config.Expires.maxAge * <span class="number">1000</span>);</div><div class="line">								<span class="comment">//设置响应头</span></div><div class="line">								response.setHeader(<span class="string">"Expires"</span>, expires.toUTCString());</div><div class="line">								response.setHeader(<span class="string">"Cache-Control"</span>, <span class="string">"max-age="</span> + config.Expires.maxAge);</div><div class="line">							&#125;</div><div class="line">							<span class="keyword">var</span> contentType = mime[ext] || <span class="string">"text/plain"</span>;</div><div class="line">							response.writeHead(<span class="number">200</span>, &#123;</div><div class="line">								<span class="string">'Content-Type'</span>: contentType</div><div class="line">							&#125;);</div><div class="line">							<span class="comment">//向浏览器输入资源</span></div><div class="line">							response.write(file, <span class="string">"binary"</span>);</div><div class="line">							response.end();</div><div class="line">						&#125;</div><div class="line">					&#125;);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">server.listen(<span class="number">3000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'server is running at 3000 port!'</span>)</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>  3.在<code>angularjs</code>目录下新建<code>assets</code>目录，作为资源目录</p>
</li>
<li><p>安装测试系统<br>  AngularJS最重要的特性之一是对单元测试的支持。在本教程，使用karma test runner 和Jasmine框架。任意目录运行<code>npm install -g karma</code>命令即完成karma的安装，后面将继续介绍如果使用。</p>
</li>
<li><p>获取AngularJS<br>  在<code>https://angularjs.org/</code>网站获取AngularJS，本教程使用的是1.2.5版本。另外，AngularJS还提供了一些附加文件，用于扩展AngularJS核心库的功能，后面章节将使用部分这些文件<br>  <img src="1484010814337_2.png" alt=""></p>
</li>
<li><p>获取Bootstrap<br>  直接到bootstrap中文网下载Bootstrap。这里只是用bootstrap的样式，本教程不会使用bootstrap的Javascript文件的特性。</p>
</li>
<li><p>获取Deployd<br>  Deployd是一款出色的可跨平台的Web API引擎。它建立在Node.js和MongoDB的基础上，以JSON形式（类JSON）存储数据，并且支持使用JavaScript书写服务器端脚本。对于一些测试用的Web应用而言，Deployd可以非常快速的构建服务器端的REST API。使用以下命令安装Deployd：</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g deployd</div></pre></td></tr></table></figure>
</li>
<li><p>执行一个简单的测试<br>  在<code>assets</code>目录新建一个test.html文件：</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">ng-app</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>First Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"../lib/bootstrap-3.3.0/dist/css/bootstrap.css"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"../lib/bootstrap-3.3.0/dist/css/bootstrap-theme.css"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>&#123;&#123;"Angular"&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-success"</span>&gt;</span>Bootstrap<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../lib/angular-1.2.5/angular.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>  启动服务器,访问<code>http://localhost:3000/angularjs/assets/test.html</code>即可查看效果</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本章主要是学习AngularJS的准备工作，介绍了如何搭建一个简单的AngularJS开发环境。&lt;/p&gt;
    
    </summary>
    
      <category term="AngularJS" scheme="http://heji.website/categories/AngularJS/"/>
    
    
      <category term="AngularJS" scheme="http://heji.website/tags/AngularJS/"/>
    
  </entry>
  
  <entry>
    <title>HTML5-Web存储</title>
    <link href="http://heji.website/2017/01/06/HTML5-Web%E5%AD%98%E5%82%A8/"/>
    <id>http://heji.website/2017/01/06/HTML5-Web存储/</id>
    <published>2017-01-06T06:20:02.820Z</published>
    <updated>2017-01-06T06:21:55.667Z</updated>
    
    <content type="html"><![CDATA[<p>Web存储允许我们在浏览器里保存简单的键/值数据。Web存储与cookie很相似。</p>
<a id="more"></a>
<h3 id="使用本地存储"><a href="#使用本地存储" class="headerlink" title="使用本地存储"></a>使用本地存储</h3><p>我们可以通过全局属性localStorage访问本地存储功能。这个属性返回一个Storage对象。Storage对象被用来保存键/值形式的<strong>字符串对</strong><br><img src="index_files/507ff266-d24f-43fd-9691-000f50d1a5ae.jpg" alt=""><br>Storage对象可用来存储键/值对，其中键和值都是字符串。键必须是唯一的，这就意味着如果我们用Storage对象里已经存在的键调用setItem方法，就会更新它的值。</p>
<ul>
<li>监听存储事件<br>  某个文档对本地存储进行修改时会触发storage事件，我们可以监听其他同源文档上的这个事件来确保我们能跟上最新的变化。<br>  与storage事件同时指派的对象是一个StorageEvent对象。<br>  <img src="index_files/cbde7dfe-831d-4684-a2cb-f2841faed675.jpg" alt=""><br>  <img src="index_files/90269775-bbaa-4d19-9d46-0204761ea6cc.jpg" alt=""><br>  storage事件是通过window对象触发的</li>
</ul>
<h3 id="使用会话存储"><a href="#使用会话存储" class="headerlink" title="使用会话存储"></a>使用会话存储</h3><p>会话存储的工作方式和本地存储基本一致，不同之处在于数据是在各个浏览上下文私有的，会在文档被关闭时移除。我们可以使用全局变量sessionStorage访问会话存储，它返回一个Storage对象。</p>
<h3 id="Cookie、localStorage和sessionStorage对比"><a href="#Cookie、localStorage和sessionStorage对比" class="headerlink" title="Cookie、localStorage和sessionStorage对比"></a>Cookie、localStorage和sessionStorage对比</h3><p><table><tr><td>特性</td><td>Cookie</td><td>localStorage</td><td>sessionStorage</td></tr><tr><td>数据的生命期</td><td>一般由服务器生成，可设置失效时间。如果在浏览器端生成Cookie，默认是关闭浏览器后失效</td><td>除非被清除，否则永久保存</td><td>仅在当前会话下有效，关闭页面或浏览器后被清除</td></tr><tr><td>存放数据大小</td><td>4K左右</td><td colspan="2">一般为5MB</td></tr><tr><td>与服务器端通信</td><td>每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题</td><td colspan="2">仅在客户端（即浏览器）中保存，不参与和服务器的通信</td></tr><tr><td>易用性</td><td>需要程序员自己封装，源生的Cookie接口不友好</td><td colspan="2">源生接口可以接受，亦可再次封装来对Object和Array有更好的支持</td></tr></table><br><strong>注意：像记住密码等功能，一般在服务器端把用户信息加密存储在cookie，因为cookie的主要用途就是与服务器端的通信</strong></p>
<h3 id="本地存储的综合示例"><a href="#本地存储的综合示例" class="headerlink" title="本地存储的综合示例"></a>本地存储的综合示例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">            <span class="selector-tag">body</span> &gt; *&#123;</div><div class="line">                <span class="attribute">float</span>: left;</div><div class="line">                <span class="attribute">margin</span>: <span class="number">4px</span> <span class="number">6px</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="selector-tag">table</span>&#123;</div><div class="line">                <span class="attribute">border-collapse</span>: collapse;</div><div class="line">            &#125;</div><div class="line">            <span class="selector-tag">table</span> <span class="selector-tag">td</span>&#123;</div><div class="line">                <span class="attribute">padding</span>: <span class="number">6px</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="selector-tag">p</span>&#123;</div><div class="line">                <span class="attribute">margin</span>: <span class="number">4px</span> <span class="number">0</span>;</div><div class="line">                <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"key"</span>&gt;</span>键：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"key"</span>/&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"value"</span>&gt;</span>值：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"value"</span>/&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"btns"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"add"</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"clear"</span>&gt;</span>清除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"msg"</span>&gt;</span>There are <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"count"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> items!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">            displayData();</div><div class="line">            <span class="built_in">document</span>.getElementById(<span class="string">"btns"</span>).addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> id = e.target.getAttribute(<span class="string">"id"</span>);</div><div class="line">                <span class="keyword">switch</span>(id)&#123;</div><div class="line">                    <span class="keyword">case</span> <span class="string">"add"</span>:</div><div class="line">                        <span class="keyword">var</span> key = <span class="built_in">document</span>.getElementById(<span class="string">"key"</span>).value;</div><div class="line">                        <span class="keyword">var</span> val = <span class="built_in">document</span>.getElementById(<span class="string">"value"</span>).value;</div><div class="line">                        localStorage.setItem(key,val);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> <span class="string">"clear"</span>:</div><div class="line">                        localStorage.clear();</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                displayData();</div><div class="line">            &#125;);</div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">displayData</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> tableElem = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"table"</span>)[<span class="number">0</span>];</div><div class="line">                tableElem.innerHTML = <span class="string">""</span>;</div><div class="line">                <span class="keyword">var</span> itemCount = localStorage.length;</div><div class="line">                <span class="built_in">document</span>.getElementById(<span class="string">"count"</span>).innerHTML = itemCount;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; itemCount ; i++)&#123;</div><div class="line">                    <span class="keyword">var</span> key = localStorage.key(i);</div><div class="line">                    tableElem.innerHTML+=<span class="string">"&lt;tr&gt;&lt;td&gt;"</span>+key+<span class="string">"&lt;/td&gt;&lt;td&gt;"</span>+localStorage.getItem(key)+<span class="string">"&lt;/td&gt;&lt;/tr&gt;"</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Web存储允许我们在浏览器里保存简单的键/值数据。Web存储与cookie很相似。&lt;/p&gt;
    
    </summary>
    
      <category term="HTML5" scheme="http://heji.website/categories/HTML5/"/>
    
    
      <category term="web前端" scheme="http://heji.website/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="HTML5" scheme="http://heji.website/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>HTML5-使用拖放</title>
    <link href="http://heji.website/2017/01/06/HTML5-%E4%BD%BF%E7%94%A8%E6%8B%96%E6%94%BE/"/>
    <id>http://heji.website/2017/01/06/HTML5-使用拖放/</id>
    <published>2017-01-06T06:18:06.333Z</published>
    <updated>2017-01-06T06:19:37.931Z</updated>
    
    <content type="html"><![CDATA[<p>HTML5添加了对拖放的支持。</p>
<a id="more"></a>
<h3 id="实现简单拖放"><a href="#实现简单拖放" class="headerlink" title="实现简单拖放"></a>实现简单拖放</h3><ul>
<li><p>设置拖放<br>  我们通过draggable属性告诉浏览器文档里的哪些元素可以被拖动。这个属性有三个允许的值：</p>
  <table><tr><td>值</td><td>说明</td></tr><tr><td>true</td><td>此元素能被拖动</td></tr><tr><td>false</td><td>此元素不能被拖动</td></tr><tr><td>auto</td><td>浏览器自主决定某个元素是否能被拖动</td></tr></table>
</li>
<li><p>处理拖动事件<br>  我们通过一系列事件来利用拖放功能。这些事件有的针对被拖动元素，有的针对可能的释放区<br>  <table><tr><td>事件名称</td><td>说明</td></tr><tr><td>dragstart</td><td>在元素开始被拖动时触发</td></tr><tr><td>drag</td><td>在元素被拖动时触发</td></tr><tr><td>dragend</td><td>在拖动操作完成时触发</td></tr></table><br>  下面是简单例子：<br>  <img src="index_files/9a360800-e7bb-4017-8bee-d59d2aea4406.jpg" alt=""></p>
</li>
<li><p>创建释放区<br>  要让某个元素成为释放区，我们需要处理dragenter和dragover事件。它们是针对释放区的其中两个事件。</p>
  <table><tr><td>事件名称</td><td>说明</td></tr><tr><td>dragenter</td><td>当被拖动元素进入释放区所占据的屏幕空间时触发</td></tr><tr><td>dragover</td><td>当被拖动元素在释放区移动时触发</td></tr><tr><td>dragleave</td><td>当被拖动元素没有放下就离开释放区时触发</td></tr><tr><td>drop</td><td>当被拖动元素在释放区放下时触发</td></tr></table>
</li>
<li><p>处理释放事件（简单拖放例子）</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">    <span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>RunJS<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">            <span class="selector-tag">body</span> &gt; *&#123;</div><div class="line">                <span class="attribute">float</span>:left;</div><div class="line">            &#125;</div><div class="line">            <span class="selector-tag">body</span> &gt; <span class="selector-tag">img</span>&#123;</div><div class="line">                <span class="attribute">margin</span>:<span class="number">4px</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="selector-tag">img</span>&#123;</div><div class="line">                <span class="attribute">height</span>:<span class="number">200px</span>;</div><div class="line">                <span class="attribute">width</span>:<span class="number">280px</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="selector-tag">img</span><span class="selector-class">.dragged</span>&#123;</div><div class="line">                <span class="attribute">border</span>:<span class="number">2px</span> solid lightgrey;</div><div class="line">            &#125;</div><div class="line">            <span class="selector-id">#target</span>&#123;</div><div class="line">                <span class="attribute">height</span>:<span class="number">200px</span>;</div><div class="line">                <span class="attribute">width</span>:<span class="number">280px</span>;</div><div class="line">                <span class="attribute">line-height</span>:<span class="number">200px</span>;</div><div class="line">                <span class="attribute">text-align</span>:center;</div><div class="line">                <span class="attribute">border</span>:<span class="number">2px</span> solid <span class="number">#ccc</span>;</div><div class="line">                <span class="attribute">padding</span>:<span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">draggable</span>=<span class="string">"true"</span> <span class="attr">src</span>=<span class="string">"http://sandbox.runjs.cn/uploads/rs/241/haz4fri9/tomato.jpg"</span> <span class="attr">id</span>=<span class="string">"tomato"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">draggable</span>=<span class="string">"true"</span> <span class="attr">src</span>=<span class="string">"http://sandbox.runjs.cn/uploads/rs/241/haz4fri9/orange.jpg"</span> <span class="attr">id</span>=<span class="string">"orange"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">draggable</span>=<span class="string">"true"</span> <span class="attr">src</span>=<span class="string">"http://sandbox.runjs.cn/uploads/rs/241/haz4fri9/strawberry.jpg"</span> <span class="attr">id</span>=<span class="string">"strawberry"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"target"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"msg"</span>&gt;</span></div><div class="line">                Drop here!</div><div class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">            <span class="keyword">var</span> body = <span class="built_in">document</span>.body;</div><div class="line">            <span class="keyword">var</span> target = <span class="built_in">document</span>.getElementById(<span class="string">"target"</span>);</div><div class="line">            <span class="keyword">var</span> msg = <span class="built_in">document</span>.getElementById(<span class="string">"msg"</span>);</div><div class="line">            <span class="comment">//接收被拖放元素的ID</span></div><div class="line">            <span class="keyword">var</span> draggedId;</div><div class="line">            <span class="comment">//处理拖放事件</span></div><div class="line">            target.ondragcenter = handleDrag;</div><div class="line">            target.ondragover = handleDrag;</div><div class="line">            <span class="comment">//在进入释放区和在释放区移动、释放时要阻止事件的默认行为，否则会发生意料之外的结果</span></div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">handleDrag</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">                e.preventDefault();</div><div class="line">            &#125;</div><div class="line">            target.ondrop = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> newElem = <span class="built_in">document</span>.getElementById(draggedId).cloneNode(<span class="literal">false</span>);</div><div class="line">                target.innerHTML = <span class="string">""</span>;</div><div class="line">                target.appendChild(newElem);</div><div class="line">                e.preventDefault();</div><div class="line">            &#125;</div><div class="line">            body.ondragstart = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">                draggedId = e.target.id;</div><div class="line">                e.target.classList.add(<span class="string">"dragged"</span>);</div><div class="line">            &#125;</div><div class="line">            body.ondragend = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> elems = <span class="built_in">document</span>.querySelectorAll(<span class="string">".dragged"</span>);</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; elems.length ; i++ )&#123;</div><div class="line">                    elems[i].classList.remove(<span class="string">"dragged"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>  效果请查看：<a href="http://runjs.cn/detail/3oiwealn" target="_blank" rel="external">简单拖放</a></p>
</li>
</ul>
<h3 id="使用DataTransfer对象"><a href="#使用DataTransfer对象" class="headerlink" title="使用DataTransfer对象"></a>使用DataTransfer对象</h3><p>与拖放操作所触发的事件同时派发的对象是DragEvent，它派生于MouseEvent，并增加了额外的属性：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
<th>返回</th>
</tr>
</thead>
<tbody>
<tr>
<td>dataTransfer</td>
<td>返回用于传输数据到释放区的对象</td>
<td>DataTransfer</td>
</tr>
</tbody>
</table>
<p>我们可以用DataTransfer对象从被拖动元素传输任意数据到释放区元素上。DataTransfer定义的属性和方法如下表：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
<th>返回</th>
</tr>
</thead>
<tbody>
<tr>
<td>types</td>
<td>返回数据的格式</td>
<td>字符串数组</td>
</tr>
<tr>
<td>getData（format）</td>
<td>返回指定格式的数据</td>
<td>字符串</td>
</tr>
<tr>
<td>setData(format，data)</td>
<td>设置指定格式的数据</td>
<td>void</td>
</tr>
<tr>
<td>clearData(format)</td>
<td>移除指定格式的数据</td>
<td>void</td>
</tr>
<tr>
<td>files</td>
<td>返回已被拖动文件的列表</td>
<td>FileList</td>
</tr>
</tbody>
</table>
<ul>
<li><p>使用DataTransfer对象从被拖动元素传输数据到释放区<br>  <img src="index_files/49ecc187-0389-4dba-8cd3-30e578ec8841.jpg" alt=""><br>  setData方法第一个参数和getData方法的参数指定数据的格式，它只支持两个值：Text和Url。setData方法第二个参数是我们要传输的数据。使用这种方式最大的好处是支持跨不同类型的浏览器，因为拖放功能是集成在操作系统里的。例如我们可以在Chrome浏览器的文档里拖动一个元素，然后再Firefox浏览器的文档里释放它。</p>
</li>
<li><p>拖放文件<br>  上一节介绍了DataTransfer对象有一个files属性返回拖放的File对象的集合。File API是HTML5新增的功能，File对象定义的属性如下<br>  <table><tr><td>名称</td><td>说明</td><td>返回</td></tr><tr><td>name</td><td>获取文件名</td><td>字符串</td></tr><tr><td>type</td><td>获取文件类型，以MIME类型表示</td><td>字符串</td></tr><tr><td>size</td><td>获取文件大小（以字节计算）</td><td>字符串</td></tr></table><br>  下面是拖放文件的例子：</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">    <span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">            <span class="selector-id">#target</span>&#123;</div><div class="line">                <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">                <span class="attribute">line-height</span>: <span class="number">200px</span>;</div><div class="line">                <span class="attribute">text-align</span>: center;</div><div class="line">                <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e5e5e5</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="selector-tag">p</span>&#123;</div><div class="line">                <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">                <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="selector-id">#fileDetail</span>&#123;</div><div class="line">                <span class="attribute">border-collapse</span>: collapse;</div><div class="line">            &#125;</div><div class="line">            <span class="selector-id">#fileDetail</span> <span class="selector-tag">th</span>,<span class="selector-id">#fileDetail</span> <span class="selector-tag">td</span>&#123;</div><div class="line">                <span class="attribute">padding</span>: <span class="number">4px</span>;</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"target"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"msg"</span>&gt;</span>Drop here!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">"fileDetail"</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">            <span class="keyword">var</span> target = <span class="built_in">document</span>.getElementById(<span class="string">"target"</span>);</div><div class="line">            target.ondragenter = handleDrag;</div><div class="line">            target.ondragover = handleDrag;</div><div class="line">            target.ondrop = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">                <span class="built_in">document</span>.getElementById(<span class="string">"msg"</span>).innerHTML = <span class="string">"File dropped"</span>;</div><div class="line">                <span class="comment">//文件</span></div><div class="line">                <span class="keyword">var</span> fileList = e.dataTransfer.files;</div><div class="line">                <span class="keyword">if</span>(fileList.length &gt; <span class="number">0</span>)&#123;</div><div class="line">                    <span class="keyword">var</span> fileDetail = <span class="built_in">document</span>.getElementById(<span class="string">"fileDetail"</span>);</div><div class="line">                    fileDetail.innerHTML = <span class="string">"&lt;tr&gt;&lt;th&gt;文件名称&lt;/th&gt;&lt;th&gt;文件类型&lt;/th&gt;&lt;th&gt;文件大小&lt;/th&gt;&lt;/tr&gt;"</span>;</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; fileList.length ; i++)&#123;</div><div class="line">                        fileDetail.innerHTML += <span class="string">"&lt;tr&gt;&lt;td&gt;"</span>+fileList[i].name+<span class="string">"&lt;/td&gt;&lt;td&gt;"</span>+fileList[i].type+<span class="string">"&lt;/td&gt;&lt;td&gt;"</span>+fileList[i].size+<span class="string">"&lt;/td&gt;&lt;/tr&gt;"</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                e.preventDefault();</div><div class="line">            &#125;</div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">handleDrag</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">                e.preventDefault();</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>  需要注意的是，我们借助DataTransfer对象以及HTML5的FormData对象就能实现拖拽上传文件了：<br>  <img src="index_files/0c8983c5-8f21-4fcd-938c-6bbbd7e7f2c0.jpg" alt=""></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HTML5添加了对拖放的支持。&lt;/p&gt;
    
    </summary>
    
      <category term="HTML5" scheme="http://heji.website/categories/HTML5/"/>
    
    
      <category term="web前端" scheme="http://heji.website/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="HTML5" scheme="http://heji.website/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>HTML5-地理定位</title>
    <link href="http://heji.website/2017/01/06/HTML5-%E5%9C%B0%E7%90%86%E5%AE%9A%E4%BD%8D/"/>
    <id>http://heji.website/2017/01/06/HTML5-地理定位/</id>
    <published>2017-01-06T06:16:28.828Z</published>
    <updated>2017-01-06T06:17:43.828Z</updated>
    
    <content type="html"><![CDATA[<p>地理定位API不是HTML5规范的一部分，但经常被归组到HTML5相关的新功能中。</p>
<a id="more"></a>
<h3 id="地理定位"><a href="#地理定位" class="headerlink" title="地理定位"></a>地理定位</h3><ul>
<li>使用地理定位<br>  我们通过全局属性navigator.geolocation访问地理定位功能，它返回一个Geolocation对象，下面是这个对象的方法：  <table><tr><td>getCurrentPosition(callback,errorCallback,options)</td><td>获取当前位置</td><td>void</td></tr><tr><td>watchPosition(callback,errorCallback,options)</td><td>开始监控当前位置</td><td>数值</td></tr><tr><td>clearWatch(id)</td><td>停止监控当前位置</td><td>void</td></tr></table></li>
<li>获取当前位置的getCurrentPosition方法<br>  getCurrentPosition方法获取当前位置，方法接受三个参数，第一个是成功之后的回调函数，该函数获得一个表示当前位置的Position对象；第二个参数是定位错误的回调函数，此函数会获得一个PositionError对象；第三个参数是表示地理定位选项的对象。</li>
<li>Position对象<br>  Position对象只有两个属性：coords属性返回一个Coordinates对象，包含当前位置的坐标；timestamp属性返回获取坐标信息的时间戳，下面是Coordinates对象的相关属性：  <table><tr><td>名称</td><td>说明</td><td>返回</td></tr><tr><td>latitude</td><td>返回由十进制表示的纬度</td><td>数值</td></tr><tr><td>longitude</td><td>返回由十进制表示的经度</td><td>数值</td></tr><tr><td>altitude</td><td>返回用米表示的海拔高度</td><td>数值</td></tr><tr><td>accuracy</td><td>返回用米表示的坐标精度</td><td>数值</td></tr><tr><td>altitudeAccuracy</td><td>返回用米表示的海拔精度</td><td>数值</td></tr><tr><td>heading</td><td>返回用度表示的前进方向</td><td>数值</td></tr><tr><td>speed</td><td>返回用米/秒表示的行进速度</td><td>数值</td></tr></table></li>
<li>PositionError对象<br>  PositionError对象只有两个属性：code属性返回代表错误类型的代码；message返回描述错误的字符串。<br>  <img src="index_files/299dee61-9d17-4060-97eb-4c2f39a52ae1.jpg" alt=""></li>
<li>指定地理定位选项<br>  <img src="index_files/2909d3e9-5724-4d45-a476-5329b8ba18a1.jpg" alt=""></li>
<li><p>地理定位综合例子：</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">    <span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">            <span class="selector-tag">table</span>&#123;</div><div class="line">                <span class="attribute">border-collapse</span>: collapse;</div><div class="line">            &#125;</div><div class="line">            <span class="selector-tag">table</span> <span class="selector-tag">td</span>&#123;</div><div class="line">                <span class="attribute">padding</span>: <span class="number">4px</span>;</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Longitude<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">"longitude"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Latitude<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">"latitude"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Altitude<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">"altitude"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Accuracy<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">"accuracy"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Altitude Accuracy<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">"altitudeAccuracy"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Heading<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">"heading"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Speed<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">"speed"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Time Stamp<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">"timestamp"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Error Code<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">"errorcode"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Error Message<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">"errormessage"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">            <span class="keyword">var</span> options = &#123;</div><div class="line">                enableHighAccuracy:<span class="literal">false</span>,</div><div class="line">                timeout:<span class="number">2000</span>,</div><div class="line">                maximumAge:<span class="number">30000</span></div><div class="line">            &#125;</div><div class="line">            navigator.geolocation.getCurrentPosition(displayPosition,handleError,options);</div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">displayPosition</span>(<span class="params">pos</span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> properties = [<span class="string">"longitude"</span>,<span class="string">"latitude"</span>,<span class="string">"altitude"</span>,<span class="string">"accuracy"</span>,<span class="string">"altitudeAccuracy"</span>,<span class="string">"heading"</span>,<span class="string">"speed"</span>];</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; properties.length ; i++)&#123;</div><div class="line">                    <span class="keyword">var</span> value = pos.coords[properties[i]];</div><div class="line">                    <span class="built_in">document</span>.getElementById(properties[i]).innerHTML = value;</div><div class="line">                &#125;</div><div class="line">                <span class="built_in">document</span>.getElementById(<span class="string">"timestamp"</span>).innerHTML = pos.timestamp;</div><div class="line">            &#125;</div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">handleError</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">                <span class="built_in">document</span>.getElementById(<span class="string">"errorcode"</span>).innerHTML = e.code;</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>监控位置<br>  可以用<code>watchPosition</code>方法不断获得关于位置的更新。这个方法所需的参数和<code>getCurrentPosition</code>方法相同，工作方式也一样。它们的区别在于：随着位置发生改变，回调函数会被反复地调用。<br>  如果想要停止监控，可以把<code>navigator.geolocation.watchPosition</code>方法返回的ID值传给<code>clearWatch</code>方法。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;地理定位API不是HTML5规范的一部分，但经常被归组到HTML5相关的新功能中。&lt;/p&gt;
    
    </summary>
    
      <category term="HTML5" scheme="http://heji.website/categories/HTML5/"/>
    
    
      <category term="web前端" scheme="http://heji.website/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="HTML5" scheme="http://heji.website/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>创建离线Web应用程序</title>
    <link href="http://heji.website/2017/01/06/%E5%88%9B%E5%BB%BA%E7%A6%BB%E7%BA%BFWeb%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/"/>
    <id>http://heji.website/2017/01/06/创建离线Web应用程序/</id>
    <published>2017-01-06T06:12:38.017Z</published>
    <updated>2017-01-06T06:15:49.618Z</updated>
    
    <content type="html"><![CDATA[<p>离线应用程序缓存功能允许我们指定Web应用程序所需的全部资源，这样浏览器就能在加载HTML文档时把他们都下载下来。通过这种方式，用户即使无法访问网络也能继续使用我们的应用程序。</p>
<a id="more"></a>
<h3 id="离线Web应用程序"><a href="#离线Web应用程序" class="headerlink" title="离线Web应用程序"></a>离线Web应用程序</h3><h4 id="定义清单"><a href="#定义清单" class="headerlink" title="定义清单"></a>定义清单</h4><p>清单（manifest）允许我们列出离线工作所需的全部资源。<br>清单文件是一个简单的文本文件。第一行始终是CACHE MANIFEST，然后我们再列出应用程序所需的资源，每个文本行列一个。<br>清单文件没有固定的命名方案，但是.appcache是最常用的。我把清单文件保存为<code>demo.appcache</code><br>manifest的典型结构:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">CACHE MANIFEST</div><div class="line"># 注释：需要缓存的文件，无论在线与否，均从缓存里读取</div><div class="line">CACHE:</div><div class="line">img/orange.jpg</div><div class="line">img/tomato.jpg</div><div class="line">img/strawberry.jpg</div><div class="line"></div><div class="line"># 注释：不缓存的文件，无论缓存中存在与否，均重新获取</div><div class="line">NETWORK:</div><div class="line">uncached.js</div><div class="line">uncached.css</div><div class="line"></div><div class="line"># 注释：获取不到资源时的备选路径，如访问资源失败，则返回pages/offline.html页面</div><div class="line"># 我们不需要在清单里的CACHE区域添加备用资源，因为浏览器会自动下载备用资源</div><div class="line">FALLBACK:</div><div class="line">*.jpg img/404.jpg</div><div class="line">* pages/offline.html</div></pre></td></tr></table></figure></p>
<h4 id="使用清单"><a href="#使用清单" class="headerlink" title="使用清单"></a>使用清单</h4><p>在文档中添加给html元素添加<code>manifest</code>属性即可使用清单，如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">manifest</span>=<span class="string">"demo.appcache"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"initial-scale=1.0, maximum-scale=1.0, user-scalable=no"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="监测浏览器状态"><a href="#监测浏览器状态" class="headerlink" title="监测浏览器状态"></a>监测浏览器状态</h4><table>
<thead>
<tr>
<th>用法</th>
<th>说明</th>
<th>返回</th>
</tr>
</thead>
<tbody>
<tr>
<td>window.navigator.onLine</td>
<td>如果确定为离线返回false，如果不能确定是否离线，返回true</td>
<td>布尔值</td>
</tr>
</tbody>
</table>
<h4 id="使用离线缓存"><a href="#使用离线缓存" class="headerlink" title="使用离线缓存"></a>使用离线缓存</h4><p>可以通过<code>window.applicationCache</code>属性使用离线缓存。该属性返回一个<code>ApplicationCache</code>对象。<code>ApplicationCache</code>对象的属性或方法有：</p>
<table>
<thead>
<tr>
<th>成员</th>
<th>说明</th>
<th>返回</th>
</tr>
</thead>
<tbody>
<tr>
<td>update()</td>
<td>更新缓存文件确保清单里的文件都下载了最新版本</td>
<td>void</td>
</tr>
<tr>
<td>swapCache()</td>
<td>交换当前缓存与较新的缓存</td>
<td>void</td>
</tr>
<tr>
<td>status</td>
<td>返回缓存的状态</td>
<td>数值</td>
</tr>
</tbody>
</table>
<p>status属性值如下：<br><img src="index_files/4b418b8d-7556-43d1-8a66-e4a6e6ab65b1.jpg" alt=""><br>除了这些方法和属性之外，ApplicationCache对象还定义了一组事件，它们在缓存状态改变时触发。<br><img src="index_files/c2711092-01a2-4f85-aade-643a9d394d92.jpg" alt=""><br>我们可以结合这些方法与status属性的值来显式控制离线缓存。</p>
<ul>
<li><p>制作更新<br>  替换缓存清单上指定的缓存文件（不要修改文件名），修改清单文件（清单文件必须改动浏览器才会下载更新，可以加个空格）</p>
</li>
<li><p>获取更新<br>  调用update()方法，获取更新，此时status属性变为UPDATEREADY。此时，浏览器已经下载了修改过的内容，但更新还未被应用到我们正在使用的缓存中。</p>
</li>
<li><p>应用更新<br>  调用swapCache()方法，更新的内容被应用到应用程序的离线缓存中。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;离线应用程序缓存功能允许我们指定Web应用程序所需的全部资源，这样浏览器就能在加载HTML文档时把他们都下载下来。通过这种方式，用户即使无法访问网络也能继续使用我们的应用程序。&lt;/p&gt;
    
    </summary>
    
      <category term="HTML5" scheme="http://heji.website/categories/HTML5/"/>
    
    
      <category term="web前端" scheme="http://heji.website/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="HTML5" scheme="http://heji.website/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>HTML5-Canvas入门</title>
    <link href="http://heji.website/2017/01/03/HTML5-canvas/"/>
    <id>http://heji.website/2017/01/03/HTML5-canvas/</id>
    <published>2017-01-03T10:28:13.406Z</published>
    <updated>2017-01-03T10:30:14.658Z</updated>
    
    <content type="html"><![CDATA[<p>canvas是HTML5定义的一种可供绘图的元素，我们用JavaScript对它进行配置和操作。它很灵活，相对容易使用，并且提供了足够多的功能来代替flash制作某些类型的富内容。</p>
<a id="more"></a>
<h3 id="开始使用（绘制矩形）"><a href="#开始使用（绘制矩形）" class="headerlink" title="开始使用（绘制矩形）"></a>开始使用（绘制矩形）</h3><p>canvas元素只有height和width两个属性，元素里的内容会在浏览器不支持此元素时作为备用内容显示。当我们使用JavaScript获取该元素时，返回一个HTMLCanvasElement对象，下面是这个对象的成员：</p>
<table>
<thead>
<tr>
<th>成员</th>
<th>说明</th>
<th>返回</th>
</tr>
</thead>
<tbody>
<tr>
<td>height</td>
<td>对应于height属性</td>
<td>数值</td>
</tr>
<tr>
<td>width</td>
<td>对应于width属性</td>
<td>数值</td>
</tr>
<tr>
<td>getContext(context)</td>
<td>为画布返回绘图上下文</td>
<td>对象</td>
</tr>
</tbody>
</table>
<p>其中关键的方法是getContext。为了获得二维上下文对象，我们需要给这个方法传递参数2d。一旦得到这个上下文，就可以开始绘图了。下面是例子：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>canvas<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">            <span class="selector-tag">canvas</span>&#123;</div><div class="line">                <span class="attribute">border</span>:medium double black;</div><div class="line">                <span class="attribute">margin</span>:<span class="number">4px</span>;</div><div class="line">                <span class="attribute">background</span>:<span class="number">#fff</span>;</div><div class="line">             &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">width</span>=<span class="string">"600"</span> <span class="attr">height</span>=<span class="string">"300"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">            <span class="keyword">var</span> ctx = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>).getContext(<span class="string">"2d"</span>);</div><div class="line">            <span class="keyword">var</span> count = <span class="number">5</span>;</div><div class="line">            <span class="keyword">var</span> offset = <span class="number">10</span>;</div><div class="line">            <span class="keyword">var</span> size = <span class="number">50</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; count ; i++)&#123;</div><div class="line">                ctx.fillRect((offset+size) * i + offset, offset,size,size);</div><div class="line">                ctx.strokeRect((offset+size) * i + offset,<span class="number">2</span> * offset+size,size,size);</div><div class="line">&#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>效果查看<a href="http://runjs.cn/detail/emf7ixzw" title="绘制矩形" target="_blank" rel="external">绘制矩形</a><br>绘制矩形的相关方法：</p>
<table>
<thead>
<tr>
<th>成员</th>
<th>说明</th>
<th>返回</th>
</tr>
</thead>
<tbody>
<tr>
<td>clearRect(x,y,w,h)</td>
<td>清除指定的矩形</td>
<td>void</td>
</tr>
<tr>
<td>fillRect(x,y,w,h)</td>
<td>绘制一个实心矩形</td>
<td>void</td>
</tr>
<tr>
<td>strokeRect(x,y,w,h)</td>
<td>绘制一个空心矩形</td>
<td>void</td>
</tr>
</tbody>
</table>
<h3 id="设置画布绘制状态"><a href="#设置画布绘制状态" class="headerlink" title="设置画布绘制状态"></a>设置画布绘制状态</h3><p>绘图操作由绘制状态加以配置。后者是一组属性，指定了从线条宽度到填充色的所有参数。当我们绘制一个图形时，就会用到绘制状态的当前设置。下面是一个示例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">width</span>=<span class="string">"600"</span> <span class="attr">height</span>=<span class="string">"400"</span>&gt;</span></div><div class="line">            Your browser doesn't support the <span class="tag">&lt;<span class="name">code</span>&gt;</span>canvas<span class="tag">&lt;/<span class="name">code</span>&gt;</span> element.</div><div class="line">        <span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">            <span class="keyword">var</span> ctx = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>).getContext(<span class="string">"2d"</span>);</div><div class="line">            ctx.lineWidth = <span class="number">2</span>;</div><div class="line">            ctx.strokeRect(<span class="number">10</span>,<span class="number">10</span>,<span class="number">50</span>,<span class="number">50</span>);</div><div class="line">            ctx.lineWidth = <span class="number">4</span>;</div><div class="line">            ctx.strokeRect(<span class="number">70</span>,<span class="number">10</span>,<span class="number">50</span>,<span class="number">50</span>);</div><div class="line">            ctx.lineWidth = <span class="number">6</span>;</div><div class="line">            ctx.strokeRect(<span class="number">130</span>,<span class="number">10</span>,<span class="number">50</span>,<span class="number">50</span>);</div><div class="line">            ctx.lineWidth = <span class="number">6</span>;</div><div class="line">            ctx.strokeRect(<span class="number">190</span>,<span class="number">10</span>,<span class="number">50</span>,<span class="number">50</span>);</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>当我使用strokeRect方法时，lineWidth属性的当前值就会用于绘制矩形。下表展示了基本的绘制状态属性，还有一些属性在更高级的功能会用到：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
<th>取值</th>
</tr>
</thead>
<tbody>
<tr>
<td>fillStyle</td>
<td>获取或设置用于实心图形的样式</td>
<td>颜色值（默认black)、渐变对象、pattern对象</td>
</tr>
<tr>
<td>lineJoin</td>
<td>获取或设置线条与图形连接时的样式</td>
<td>round（圆角）、bevel（棱角）、miter（尖角，默认值）</td>
</tr>
<tr>
<td>lineWidth</td>
<td>获取或设置线条的宽度</td>
<td>数值（默认1.0）</td>
</tr>
<tr>
<td>strokeStyle</td>
<td>获取或设置用于线条的样式</td>
<td>颜色值（默认black)、渐变对象、pattern对象</td>
</tr>
</tbody>
</table>
<ul>
<li>设置线条连接样式<br>  lineJoin属性决定了相互连接的线条应该如何绘制，它有三个值：round（圆角）、bevel（棱角）、miter（尖角）。</li>
<li>设置填充和笔触（线条）样式<br>  改变fillStyle属性即改变填充的颜色，改变strokeStyle即改变笔触颜色。请自行尝试</li>
<li><p>使用渐变<br>  除了纯色，我们还可以把填充和笔触样式设置成渐变色。渐变是两种或更多颜色之间的渐进转变。canvas元素支持两类渐变：线性和径向。<br>  <img src="index_files/747b771f-1a98-4e49-a026-33f28a4db686.jpg" alt=""><br>  两个方法都返回一个CanvasGradient对象。<br>  <img src="index_files/14b03ee5-e1e0-4f3c-acd7-67ec76eec353.jpg" alt=""><br>  下面是线性渐变的例子：</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">    <span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>gradient<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">height</span>=<span class="string">"140"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>  效果请查看：<a href="http://runjs.cn/detail/dewufwgo" title="线性渐变效果" target="_blank" rel="external">线性渐变效果</a><br>  也可以设置渐变在一个小矩形范围内。<br>  <img src="index_files/ab7cd8d7-5182-40ec-a03c-722bd97f2435.jpg" alt=""><br>  效果为<br>  <img src="index_files/d576630a-a6da-48f8-b41f-d5130d3e40e2.jpg" alt=""><br>  下面是径向渐变的例子：</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">    <span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>RunJS<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">height</span>=<span class="string">"200"</span> <span class="attr">width</span>=<span class="string">"500"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">          <span class="keyword">var</span> ctx = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>).getContext(<span class="string">"2d"</span>);</div><div class="line">          <span class="comment">//第一第二个参数是起点圆的圆心坐标，第三个参数是起点圆的半径。第四第五个参数是终点圆的圆心坐标，第六个参数是终点圆的半径</span></div><div class="line">          <span class="keyword">var</span> grad = ctx.createRadialGradient(<span class="number">250</span>,<span class="number">70</span>,<span class="number">20</span>,<span class="number">200</span>,<span class="number">60</span>,<span class="number">80</span>);</div><div class="line">grad.addColorStop(<span class="number">0</span>,<span class="string">"#f00"</span>);</div><div class="line">grad.addColorStop(<span class="number">0.5</span>,<span class="string">"#fff"</span>);</div><div class="line">grad.addColorStop(<span class="number">1</span>,<span class="string">"#000"</span>);</div><div class="line">ctx.fillStyle = grad;</div><div class="line">ctx.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">500</span>,<span class="number">160</span>);</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>  效果请查看<a href="http://runjs.cn/detail/nihv4gh9" target="_blank" rel="external">径向渐变效果</a><br>  一般而言，径向渐变的终点圆要包含起点圆，当我们给这个渐变添加颜色点时，它们会被放置在起点圆边界（该点的值为0）和终点圆边界（该点的值为1）之间的一条线段上。若终点圆没有包含起点圆，结果会很混乱。</p>
</li>
<li>使用图案<br>  除了纯色和渐变之外，我们还可以创建图案（pattern）。具体做法是使用画布上下文对象所定义的createPattern方法。2D绘图上下文定义了对三种图案类型的支持：图形、视频和画布。<br>  要将图像作为图案，需要把一个HTMLImageElement对象作为第一个参数传递给createPattern方法，第二个参数是重复样式。下面是综合例子：  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">    <span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">hidden</span>=<span class="string">""</span> <span class="attr">src</span>=<span class="string">"http://www.w3school.com.cn/i/lamp.gif"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">height</span>=<span class="string">"300"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">            <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="comment">//注意,一定要在DOM加载完之后,否则创建pattern会失败</span></div><div class="line">                <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</div><div class="line">                <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</div><div class="line">                ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,canvas.width,canvas.height);</div><div class="line">                <span class="keyword">var</span> imgElem = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"img"</span>)[<span class="number">0</span>];</div><div class="line">                <span class="keyword">var</span> pattern = ctx.createPattern(imgElem,<span class="string">"repeat"</span>);</div><div class="line">                ctx.fillStyle = pattern;</div><div class="line">                ctx.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">500</span>,<span class="number">300</span>);</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="保存和恢复绘制状态"><a href="#保存和恢复绘制状态" class="headerlink" title="保存和恢复绘制状态"></a>保存和恢复绘制状态</h3><p>可以用下表介绍的方法保存绘制状态，稍后再返回。</p>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>save()</td>
<td>保存绘制状态属性的值，并把它们推入状态栈</td>
</tr>
<tr>
<td>restore()</td>
<td>取出状态栈的第一组值，用它们来设置绘制状态</td>
</tr>
</tbody>
</table>
<p>绘制状态保存时会被存放在一个后进先出的栈中，意思是我们用save方法最后保存的状态会被restore方法首先进行恢复。</p>
<h3 id="绘制图像"><a href="#绘制图像" class="headerlink" title="绘制图像"></a>绘制图像</h3><p>可以用drawImage方法在画布上绘制图像。这个方法需要三个、五个或者九个参数。第一个参数始终是图像的来源，它可以是代表img、video、或者其他canvas元素的DOM对象。</p>
<ul>
<li><p>使用图片图像：</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">    <span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">            <span class="selector-tag">canvas</span>&#123;</div><div class="line">                <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">hidden</span>=<span class="string">""</span> <span class="attr">src</span>=<span class="string">"http://www.w3school.com.cn/i/lamp.gif"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">height</span>=<span class="string">"300"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">            <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> ctx = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>).getContext(<span class="string">"2d"</span>);</div><div class="line">                <span class="keyword">var</span> imageElem = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"img"</span>)[<span class="number">0</span>];</div><div class="line">                <span class="comment">//当只有三个参数时,第二三个参数指定图像开始绘制的坐标,绘制的图像大小为原始大小</span></div><div class="line">                ctx.drawImage(imageElem,<span class="number">10</span>,<span class="number">10</span>);</div><div class="line">                <span class="comment">//当只有五个参数时,第二三个参数指定图像开始绘制的坐标,第四五个参数指定绘制图像的大小</span></div><div class="line">                ctx.drawImage(imageElem,<span class="number">50</span>,<span class="number">10</span>,<span class="number">50</span>,<span class="number">50</span>);</div><div class="line">                <span class="comment">//当有九个参数时,请自行谷歌</span></div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>使用视频图像<br>  当图像的来源是video时，这样做其实是对视频的当前帧进行截图。</p>
</li>
<li>使用画布图像  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">    <span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">            <span class="selector-tag">body</span> &gt; *&#123;</div><div class="line">                <span class="attribute">float</span>: left;</div><div class="line">            &#125;</div><div class="line">            <span class="selector-tag">canvas</span>&#123;</div><div class="line">                <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e5e5e5</span>;</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">"vid"</span> <span class="attr">width</span>=<span class="string">"800"</span> <span class="attr">height</span>=<span class="string">"400"</span> <span class="attr">hidden</span>=<span class="string">""</span> <span class="attr">src</span>=<span class="string">"../img/Clip_1080_5sec_10mbps_h264.mp4"</span>&gt;</span></div><div class="line">            当前浏览器不支持 video直接播放</div><div class="line">        <span class="tag">&lt;/<span class="name">video</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas1"</span> <span class="attr">width</span>=<span class="string">"360"</span> <span class="attr">height</span>=<span class="string">"240"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"pressme"</span>&gt;</span>点击我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas2"</span> <span class="attr">width</span>=<span class="string">"360"</span> <span class="attr">height</span>=<span class="string">"240"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">            <span class="keyword">var</span> srcCanvasElem = <span class="built_in">document</span>.getElementById(<span class="string">"canvas1"</span>);</div><div class="line">            <span class="keyword">var</span> srcCtx = srcCanvasElem.getContext(<span class="string">"2d"</span>);</div><div class="line">            <span class="keyword">var</span> targetCanvasElem = <span class="built_in">document</span>.getElementById(<span class="string">"canvas2"</span>).getContext(<span class="string">"2d"</span>);</div><div class="line">            <span class="keyword">var</span> videoElem = <span class="built_in">document</span>.getElementById(<span class="string">"vid"</span>);</div><div class="line">            targetCanvasElem.strokeStyle = <span class="string">"black"</span>;</div><div class="line">            targetCanvasElem.lineWidth = <span class="number">10</span>;</div><div class="line">            <span class="keyword">var</span> width = <span class="number">100</span>;</div><div class="line">            <span class="keyword">var</span> height = <span class="number">10</span>;</div><div class="line">            srcCtx.lineWidth = <span class="number">5</span>;</div><div class="line">            srcCtx.strokeStyle = <span class="string">"red"</span>;</div><div class="line">            setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                srcCtx.drawImage(videoElem,<span class="number">0</span>,<span class="number">0</span>,<span class="number">360</span>,<span class="number">240</span>);</div><div class="line">                srcCtx.strokeRect(<span class="number">180</span>-(width/<span class="number">2</span>),<span class="number">120</span> - (height/<span class="number">2</span>),width,height);</div><div class="line">            &#125;,<span class="number">25</span>);</div><div class="line">            setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                width = (width + <span class="number">1</span>) % <span class="number">200</span>;</div><div class="line">                height = (height + <span class="number">3</span>) % <span class="number">200</span>;</div><div class="line">            &#125;,<span class="number">100</span>)</div><div class="line">            <span class="built_in">document</span>.getElementById(<span class="string">"pressme"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                targetCanvasElem.drawImage(srcCanvasElem,<span class="number">0</span>,<span class="number">0</span>,<span class="number">360</span>,<span class="number">240</span>);</div><div class="line">                targetCanvasElem.strokeRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">360</span>,<span class="number">240</span>);</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="用路径绘图（重要）"><a href="#用路径绘图（重要）" class="headerlink" title="用路径绘图（重要）"></a>用路径绘图（重要）</h3><p>之前的示例都依靠绘制矩形实现，矩形是一种有用的图形，但有时我们需要用到的是其他图形。对此，canvas提供了路径绘图。下面是绘制基本路径的可用方法：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
<th>返回</th>
</tr>
</thead>
<tbody>
<tr>
<td>beginPath()</td>
<td>开始一条新路径</td>
<td>void</td>
</tr>
<tr>
<td>closePath()</td>
<td>尝试闭合现有路径（做法是绘制一条线，连接最后那条线的终点与初始坐标）</td>
<td>void</td>
</tr>
<tr>
<td>fill()</td>
<td>填充用子路径描述的图形</td>
<td>void</td>
</tr>
<tr>
<td>isPointInPath(x,y)</td>
<td>如果指定的点在当前路径所描述的图形之内则返回true</td>
<td>布尔值</td>
</tr>
<tr>
<td>lineTo(x,y)</td>
<td>绘制一条到指定坐标的子路径</td>
<td>void</td>
</tr>
<tr>
<td>moveTo(x,y)</td>
<td>移动到指定坐标而不绘制子路径</td>
<td>void</td>
</tr>
<tr>
<td>rect(x,y,w,h)</td>
<td>绘制一个矩形</td>
<td>void</td>
</tr>
<tr>
<td>stroke()</td>
<td>给子路径描述的图形绘制轮廓</td>
<td>void</td>
</tr>
</tbody>
</table>
<p>绘制一条路径的基本顺序如下：</p>
<ol>
<li>调用beginPath方法；</li>
<li>调用moveTo方法移动到起点；</li>
<li>用arc和lineTo等方法绘制子路径；</li>
<li>调用closePath方法（可选）；</li>
<li>调用fill或stroke方法。</li>
</ol>
<p>下面是综合示例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">width</span>=<span class="string">"400"</span> <span class="attr">height</span>=<span class="string">"300"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">            <span class="keyword">var</span> ctx = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>).getContext(<span class="string">"2d"</span>);</div><div class="line">            ctx.beginPath();</div><div class="line">            ctx.lineWidth = <span class="number">1</span>;</div><div class="line">            ctx.moveTo(<span class="number">10</span>,<span class="number">10</span>);</div><div class="line">            ctx.lineTo(<span class="number">60</span>,<span class="number">10</span>);</div><div class="line">            ctx.lineTo(<span class="number">60</span>,<span class="number">60</span>);</div><div class="line">            ctx.closePath();</div><div class="line">            ctx.fillStyle = <span class="string">"red"</span>;</div><div class="line">            ctx.fill();</div><div class="line">            </div><div class="line">            ctx.beginPath();</div><div class="line">            ctx.lineWidth = <span class="number">2</span>;</div><div class="line">            ctx.moveTo(<span class="number">70</span>,<span class="number">10</span>);</div><div class="line">            ctx.lineTo(<span class="number">170</span>,<span class="number">10</span>);</div><div class="line">            ctx.lineTo(<span class="number">170</span>,<span class="number">100</span>);</div><div class="line">            ctx.lineTo(<span class="number">150</span>,<span class="number">100</span>);</div><div class="line">            ctx.fillStyle = <span class="string">"red"</span>;</div><div class="line">            ctx.fill();</div><div class="line">            ctx.strokeStyle= <span class="string">"black"</span>;</div><div class="line">            <span class="comment">//若不关闭路径,那么绘制的轮廓不闭合</span></div><div class="line">            ctx.stroke();</div><div class="line">            </div><div class="line">            ctx.lineWidth = <span class="number">30</span>;</div><div class="line">            ctx.beginPath();</div><div class="line">            <span class="comment">//设置线条末端样式,默认是butt</span></div><div class="line">            ctx.lineCap = <span class="string">"butt"</span></div><div class="line">            ctx.moveTo(<span class="number">200</span>,<span class="number">10</span>);</div><div class="line">            ctx.lineTo(<span class="number">200</span>,<span class="number">100</span>);</div><div class="line">            ctx.stroke();</div><div class="line">            </div><div class="line">            ctx.beginPath();</div><div class="line">            <span class="comment">//设置线条末端样式,默认是butt</span></div><div class="line">            ctx.lineCap = <span class="string">"round"</span></div><div class="line">            ctx.moveTo(<span class="number">240</span>,<span class="number">20</span>);</div><div class="line">            ctx.lineTo(<span class="number">240</span>,<span class="number">100</span>);</div><div class="line">            ctx.stroke();</div><div class="line">            </div><div class="line">            ctx.beginPath();</div><div class="line">            <span class="comment">//设置线条末端样式,默认是butt</span></div><div class="line">            ctx.lineCap = <span class="string">"square"</span></div><div class="line">            ctx.moveTo(<span class="number">280</span>,<span class="number">20</span>);</div><div class="line">            ctx.lineTo(<span class="number">280</span>,<span class="number">100</span>);</div><div class="line">            ctx.stroke();</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<ul>
<li>绘制矩形<br>  rect方法会给当前路径添加一条矩形的子路径。如果需要一个单独的矩形，之前介绍的fillRect和strokeRect方法是更合适的选择。  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">    <span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">width</span>=<span class="string">"400"</span> <span class="attr">height</span>=<span class="string">"300"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">            <span class="keyword">var</span> ctx = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>).getContext(<span class="string">"2d"</span>);</div><div class="line">            ctx.fillStyle = <span class="string">"red"</span>;</div><div class="line">            ctx.strokeStyle = <span class="string">"black"</span>;</div><div class="line">            ctx.beginPath();</div><div class="line">            ctx.moveTo(<span class="number">10</span>,<span class="number">10</span>);</div><div class="line">            ctx.lineTo(<span class="number">100</span>,<span class="number">10</span>);</div><div class="line">            ctx.lineTo(<span class="number">100</span>,<span class="number">100</span>);</div><div class="line">            ctx.closePath();</div><div class="line">            <span class="comment">//绘制矩形</span></div><div class="line">            ctx.rect(<span class="number">100</span>,<span class="number">10</span>,<span class="number">100</span>,<span class="number">90</span>);</div><div class="line">            ctx.rect(<span class="number">100</span>,<span class="number">100</span>,<span class="number">130</span>,<span class="number">30</span>);</div><div class="line">            <span class="comment">//填充颜色</span></div><div class="line">            ctx.fill();</div><div class="line">            <span class="comment">//绘制轮廓</span></div><div class="line">            ctx.stroke();</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="绘制圆弧"><a href="#绘制圆弧" class="headerlink" title="绘制圆弧"></a>绘制圆弧</h3><p>我们使用arc和arcTo方法在画布上绘制圆弧，不过这两种方法绘制圆弧的方式会有所不同。</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
<th>返回</th>
</tr>
</thead>
<tbody>
<tr>
<td>arc(x,y,rad,startAngle,endAngle,diretion)</td>
<td>(x,y)指定圆弧的圆心坐标，半径为rad，始角度为startAngle，结束角度为endAngle，可选参数direction指定了圆弧方向</td>
<td>void</td>
</tr>
<tr>
<td>arcTo(x1,y1,x2,y2,rad)</td>
<td>绘制一段半径为rad，经过(x1,y1)，直到(x2,y2)的圆弧</td>
<td>void</td>
</tr>
</tbody>
</table>
<ul>
<li><p>使用arcTo方法：<br>  绘制圆弧的一个复杂例子（移动鼠标看到变换）：</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">    <span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">height</span>=<span class="string">"140"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">            <span class="keyword">var</span> canvasElem = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</div><div class="line">            <span class="keyword">var</span> ctx = canvasElem.getContext(<span class="string">"2d"</span>);</div><div class="line">            </div><div class="line">            <span class="keyword">var</span> point1 = [<span class="number">100</span>,<span class="number">10</span>];</div><div class="line">            <span class="keyword">var</span> point2 = [<span class="number">200</span>,<span class="number">10</span>];</div><div class="line">            <span class="keyword">var</span> point3 = [<span class="number">200</span>,<span class="number">110</span>];</div><div class="line">            </div><div class="line">            draw();</div><div class="line">            canvasElem.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">                <span class="keyword">if</span>(e.ctrlKey)&#123;</div><div class="line">                    point1 = [e.clientX,e.clientY];</div><div class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(e.shiftKey)&#123;</div><div class="line">                    point2 = [e.clientX,e.clientY];</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    point3 = [e.clientX,e.clientY];</div><div class="line">                &#125;</div><div class="line">                ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">500</span>,<span class="number">140</span>);</div><div class="line">                draw();</div><div class="line">            &#125;</div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                ctx.fillStyle = <span class="string">"yellow"</span>;</div><div class="line">                ctx.strokeStyle = <span class="string">"black"</span>;</div><div class="line">                ctx.lineWidth = <span class="number">4</span>;</div><div class="line">                <span class="comment">//绘制圆弧</span></div><div class="line">                ctx.beginPath();</div><div class="line">                ctx.moveTo(point1[<span class="number">0</span>],point1[<span class="number">1</span>]);</div><div class="line">                ctx.arcTo(point2[<span class="number">0</span>],point2[<span class="number">1</span>],point3[<span class="number">0</span>],point3[<span class="number">1</span>],<span class="number">50</span>);</div><div class="line">                ctx.stroke();</div><div class="line">                <span class="comment">//绘制三个点</span></div><div class="line">                drawPoint(point1[<span class="number">0</span>],point1[<span class="number">1</span>]);</div><div class="line">                drawPoint(point2[<span class="number">0</span>],point2[<span class="number">1</span>]);</div><div class="line">                drawPoint(point3[<span class="number">0</span>],point3[<span class="number">1</span>]);</div><div class="line">                <span class="comment">//绘制连接三个点的线</span></div><div class="line">                ctx.beginPath();</div><div class="line">                ctx.moveTo(point1[<span class="number">0</span>],point1[<span class="number">1</span>]);</div><div class="line">                ctx.lineTo(point2[<span class="number">0</span>],point2[<span class="number">1</span>]);</div><div class="line">                ctx.lineTo(point3[<span class="number">0</span>],point3[<span class="number">1</span>]);</div><div class="line">                ctx.stroke();</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//绘制三个点</span></div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">drawPoint</span>(<span class="params">x,y</span>)</span>&#123;</div><div class="line">                ctx.lineWidth = <span class="number">1</span>;</div><div class="line">                ctx.strokeStyle = <span class="string">"red"</span>;</div><div class="line">                ctx.strokeRect(x - <span class="number">2</span>, y - <span class="number">2</span>,<span class="number">4</span>,<span class="number">4</span>);</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>  效果请查看<a href="http://runjs.cn/detail/nzicmpmy" target="_blank" rel="external">canvas绘制圆弧</a></p>
</li>
<li><p>使用arc方法<br>  arc方法使用起来略微简单一些。我们用前两个方法参数指定圆的圆心，第三个参数指定圆的半径，第四第五个参数指定起始和结束角度，最后一个参数指定是顺时针还是逆时针。<br>  <img src="index_files/6f623169-16c1-4420-9dbf-e1d56096aa1e.png" alt=""><br>  上图的开始角度为0，结束角度为1.5PI，方向为顺时针。<code>arc(100,75,50,0,1.5*Math.PI,false);</code></p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">    <span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">height</span>=<span class="string">"200"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">            <span class="keyword">var</span> ctx = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>).getContext(<span class="string">"2d"</span>);</div><div class="line">            ctx.strokeStyle = <span class="string">"black"</span>;</div><div class="line">            ctx.fillStyle = <span class="string">"steelblue"</span>;</div><div class="line">            ctx.beginPath();</div><div class="line">            <span class="comment">//圆心x,圆心y,半径,开始角度,结束角度,逆时针</span></div><div class="line">            ctx.arc(<span class="number">100</span>,<span class="number">100</span>,<span class="number">60</span>,<span class="number">0</span>,<span class="built_in">Math</span>.PI * <span class="number">2</span>,<span class="literal">true</span>);</div><div class="line">            ctx.fill();</div><div class="line">            ctx.stroke();</div><div class="line">            <span class="comment">//必须重新开始路径,否则会连在一起</span></div><div class="line">            ctx.beginPath();</div><div class="line">            ctx.arc(<span class="number">230</span>,<span class="number">100</span>,<span class="number">60</span>,<span class="built_in">Math</span>.PI * <span class="number">0.5</span>,<span class="built_in">Math</span>.PI ,<span class="literal">true</span>);</div><div class="line">            ctx.closePath();</div><div class="line">            ctx.fill();</div><div class="line">            ctx.stroke();</div><div class="line">            <span class="comment">//绘制不规则图形</span></div><div class="line">            ctx.beginPath();</div><div class="line">            <span class="keyword">var</span> val = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="number">4</span> ; i++)&#123;</div><div class="line">                ctx.arc(<span class="number">370</span>,<span class="number">100</span>,<span class="number">60</span>,val,val+<span class="built_in">Math</span>.PI/<span class="number">4</span>,<span class="literal">false</span>);</div><div class="line">                val+=<span class="built_in">Math</span>.PI/<span class="number">2</span>;</div><div class="line">            &#125;</div><div class="line">            ctx.closePath();</div><div class="line">            ctx.fill();</div><div class="line">            ctx.stroke();</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>  效果请查看：<a href="http://runjs.cn/detail/bjlt1baj" target="_blank" rel="external">arc方法绘制圆弧</a></p>
</li>
</ul>
<h3 id="绘制贝塞尔曲线"><a href="#绘制贝塞尔曲线" class="headerlink" title="绘制贝塞尔曲线"></a>绘制贝塞尔曲线</h3><p>canvas支持绘制两种贝塞尔曲线：三次和二次。我们通过选择一个起点和终点，然后添加一个或多个控制点来形成曲线。下面的表格展示了绘制贝塞尔曲线的方法：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
<th>返回</th>
</tr>
</thead>
<tbody>
<tr>
<td>bezierCurveTo(cx1,cy1,cx2,cy2,x,y)</td>
<td>绘制一段贝塞尔曲线到（x,y），控制点为（cx1,cy1）和（cx2,cy2）。</td>
<td>void</td>
</tr>
<tr>
<td>quadraticCurveTo(cx,cy,x,y)</td>
<td>绘制一段二次贝塞尔曲线到点（x,y），控制点为（cx,cy）</td>
<td>void</td>
</tr>
</tbody>
</table>
<p>下面是三次贝塞尔曲线的示例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">height</span>=<span class="string">"300"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">            <span class="keyword">var</span> canvasElem = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</div><div class="line">            <span class="keyword">var</span> ctx = canvasElem.getContext(<span class="string">"2d"</span>);</div><div class="line">            <span class="comment">//初始点</span></div><div class="line">            <span class="keyword">var</span> startPoint = [<span class="number">50</span>,<span class="number">100</span>];</div><div class="line">            <span class="keyword">var</span> endPoint = [<span class="number">400</span>,<span class="number">100</span>];</div><div class="line">            <span class="keyword">var</span> cp1 = [<span class="number">250</span>,<span class="number">50</span>];</div><div class="line">            <span class="keyword">var</span> cp2 = [<span class="number">350</span>,<span class="number">50</span>];</div><div class="line">            </div><div class="line">            canvasElem.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">                <span class="keyword">if</span>(e.shiftKey)&#123;</div><div class="line">                    <span class="comment">//当按下shift键,移动控制点1</span></div><div class="line">                    cp1 = [e.clientX,e.clientY];</div><div class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(e.ctrlKey)&#123;</div><div class="line">                    <span class="comment">//当按下ctrl键,移动控制点2</span></div><div class="line">                    cp2 = [e.clientX,e.clientY];</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//清除画布</span></div><div class="line">                ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">500</span>,<span class="number">300</span>);</div><div class="line">                <span class="comment">//画图</span></div><div class="line">                draw();</div><div class="line">            &#125;</div><div class="line">            draw();</div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                ctx.lineWidth = <span class="number">3</span>;</div><div class="line">                ctx.strokeStyle = <span class="string">"black"</span>;</div><div class="line">                ctx.beginPath();</div><div class="line">                ctx.moveTo(startPoint[<span class="number">0</span>],startPoint[<span class="number">1</span>]);</div><div class="line">                ctx.bezierCurveTo(cp1[<span class="number">0</span>],cp1[<span class="number">1</span>],cp2[<span class="number">0</span>],cp2[<span class="number">1</span>],endPoint[<span class="number">0</span>],endPoint[<span class="number">1</span>]);</div><div class="line">                ctx.stroke();</div><div class="line">                <span class="comment">//绘制点</span></div><div class="line">                ctx.lineWidth = <span class="number">1</span>;</div><div class="line">                ctx.strokeStyle = <span class="string">"red"</span>;</div><div class="line">                <span class="keyword">var</span> points = [startPoint,endPoint,cp1,cp2];</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; points.length ; i++)&#123;</div><div class="line">                    drawPoint(points[i]);</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//绘制直线</span></div><div class="line">                drawLine(startPoint,cp1);</div><div class="line">                drawLine(endPoint,cp2);</div><div class="line">            &#125;</div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">drawPoint</span>(<span class="params">point</span>)</span>&#123;</div><div class="line">                ctx.beginPath();</div><div class="line">                ctx.strokeRect(point[<span class="number">0</span>]<span class="number">-2</span>,point[<span class="number">1</span>]<span class="number">-2</span>,<span class="number">4</span>,<span class="number">4</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">drawLine</span>(<span class="params">from,to</span>)</span>&#123;</div><div class="line">                ctx.beginPath();</div><div class="line">                ctx.moveTo(<span class="keyword">from</span>[<span class="number">0</span>],<span class="keyword">from</span>[<span class="number">1</span>]);</div><div class="line">                ctx.lineTo(to[<span class="number">0</span>],to[<span class="number">1</span>]);</div><div class="line">                ctx.stroke();</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>效果请查看：<a href="http://runjs.cn/detail/nzjursph" target="_blank" rel="external">三次贝塞尔曲线</a></p>
<h3 id="创建剪辑区域"><a href="#创建剪辑区域" class="headerlink" title="创建剪辑区域"></a>创建剪辑区域</h3><p>一旦定义了一块裁剪区域，就只有区域内的路径才会显示在屏幕上。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">height</span>=<span class="string">"300"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">            <span class="keyword">var</span> ctx = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>).getContext(<span class="string">"2d"</span>);</div><div class="line">            ctx.fillStyle = <span class="string">"yellow"</span>;</div><div class="line">            ctx.beginPath();</div><div class="line">            ctx.rect(<span class="number">100</span>,<span class="number">20</span>,<span class="number">300</span>,<span class="number">100</span>);</div><div class="line">            ctx.fill();</div><div class="line">            <span class="comment">//裁剪区域</span></div><div class="line">            ctx.clip();</div><div class="line">            <span class="comment">//只在裁剪的区域绘制</span></div><div class="line">            ctx.fillStyle = <span class="string">"red"</span>;</div><div class="line">            ctx.beginPath();</div><div class="line">            ctx.rect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">500</span>,<span class="number">300</span>);</div><div class="line">            ctx.fill();</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="绘制文本"><a href="#绘制文本" class="headerlink" title="绘制文本"></a>绘制文本</h3><p>可以在画布上绘制文本。不过这种功能的支持还很初步。</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
<th>返回</th>
</tr>
</thead>
<tbody>
<tr>
<td>fillText(text,x,y,width)</td>
<td>在位置(x,y)上绘制并填充指定文本。宽度参数是可选的，他设置了文本的宽度上限</td>
<td>void</td>
</tr>
<tr>
<td>strokeText(text,x,y,width)</td>
<td>在位置(x,y)上绘制并描边指定文本。宽度是可选参数</td>
<td>void</td>
</tr>
</tbody>
</table>
<p>我们可以使用三种绘制装态属性来控制文本绘制的方式。</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
<th>返回</th>
</tr>
</thead>
<tbody>
<tr>
<td>font</td>
<td>设置绘制文本时使用的字体</td>
<td>字符串</td>
</tr>
<tr>
<td>textAlign</td>
<td>设置文本的对齐方式</td>
<td>字符串</td>
</tr>
<tr>
<td>textBaseLine</td>
<td>设置文本的基线：top、bottom、middle等</td>
<td>字符串</td>
</tr>
</tbody>
</table>
<p>下面是例子：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="keyword">var</span> ctx = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>).getContext(<span class="string">"2d"</span>);</div><div class="line">        ctx.fillStyle = <span class="string">"steelblue"</span>;</div><div class="line">        ctx.strokeStyle = <span class="string">"lightgrey"</span>;</div><div class="line">        <span class="comment">//必须先设置字体大小再设置字体</span></div><div class="line">        ctx.font = <span class="string">"100px sans-serif"</span>;</div><div class="line">        ctx.textBaseline = <span class="string">"top"</span>;</div><div class="line">        ctx.fillText(<span class="string">"hello"</span>,<span class="number">10</span>,<span class="number">10</span>);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="使用特效和变换"><a href="#使用特效和变换" class="headerlink" title="使用特效和变换"></a>使用特效和变换</h3><ul>
<li>使用阴影<br>  可以用四种绘制状态属性来给我们在画布上绘制的图形和文本添加阴影。<br>  <img src="index_files/2db2ce9b-257c-498c-8c84-cde930d11fc9.jpg" alt=""><br>  下面是例子：<br>  <img src="index_files/8121521f-3350-443f-aa34-3e00d9f90c00.jpg" alt=""></li>
<li>使用透明度<br>  可以用两种方式来给我们绘制的文本和图形设置透明度。第一种使用rgba函数指定一个fillStyle或strokeStyle值，另一种是使用绘制属性globalAlpha。globalAlpha属性的值可以从0（完全透明）到1（完全不透明，这是默认值）。<br>  <img src="index_files/95061caa-c49c-4399-88c2-27552765a893.jpg" alt=""><br>  下面是代码效果：<br>  <img src="index_files/ebe29e5f-da5b-4387-af8a-889b16a73d28.jpg" alt=""></li>
<li>使用合成<br>  可以将透明度与globalCompositeOperation属性结合使用，来控制图形和文本在画布上绘制的方式。</li>
<li>使用变换<br>  我们可以给画布应用变换，它会应用到后续所有的绘图操作上。<br>  <img src="index_files/adf8c417-7d62-47c7-81cf-c0b35abe43e3.jpg" alt=""><br>  <img src="index_files/70331c2f-2d6b-4994-8a24-a674ef0db510.jpg" alt=""><br>  在这个例子里，我填充并描边了一些文本，然后缩放、平移和旋转了画布，这些操作影响了我接下来绘制的空心矩形和实心矩形。<br>  <img src="index_files/80b1643c-4488-4f6e-9e09-26fb2637210d.jpg" alt=""></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;canvas是HTML5定义的一种可供绘图的元素，我们用JavaScript对它进行配置和操作。它很灵活，相对容易使用，并且提供了足够多的功能来代替flash制作某些类型的富内容。&lt;/p&gt;
    
    </summary>
    
      <category term="HTML5" scheme="http://heji.website/categories/HTML5/"/>
    
    
      <category term="web前端" scheme="http://heji.website/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://heji.website/tags/JavaScript/"/>
    
      <category term="canvas" scheme="http://heji.website/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>HTML5多媒体</title>
    <link href="http://heji.website/2016/12/28/HTML5%E5%A4%9A%E5%AA%92%E4%BD%93/"/>
    <id>http://heji.website/2016/12/28/HTML5多媒体/</id>
    <published>2016-12-28T13:30:01.419Z</published>
    <updated>2016-12-28T13:32:46.847Z</updated>
    
    <content type="html"><![CDATA[<p>插件是令浏览器崩溃的主要原因之一，特别是flash。幸运的是HTML5支持直接在浏览器中播放音频和视频文件。</p>
<a id="more"></a>
<h3 id="使用video元素"><a href="#使用video元素" class="headerlink" title="使用video元素"></a>使用video元素</h3><p>可以使用video元素在网页里嵌入视频内容。video元素有许多属性，下表列出了它们。</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>autoplay</td>
<td>如果存在，此属性会使浏览器尽可能立刻开始播放视频</td>
</tr>
<tr>
<td>preload</td>
<td>告诉浏览器是否要预先载入视频</td>
</tr>
<tr>
<td>controls</td>
<td>该属性告诉浏览器添加控制面板</td>
</tr>
<tr>
<td>loop</td>
<td>如果此属性存在，浏览器会反复播放视频</td>
</tr>
<tr>
<td>poster</td>
<td>指定在视频数据载入时显示的图片</td>
</tr>
<tr>
<td>height</td>
<td>视频的高度</td>
</tr>
<tr>
<td>width</td>
<td>视频的宽度</td>
</tr>
<tr>
<td>muted</td>
<td>如果此属性存在，视频将静音播放</td>
</tr>
<tr>
<td>src</td>
<td>指定要显示的视频</td>
</tr>
</tbody>
</table>
<ul>
<li>预先加载视频（重要）<br>  preload属性告诉浏览器：当它加载完包含video元素的网页后，是否应该积极地去下载资源。预先加载视频减少了用户播放时的延迟，但如果用户不观看视频会造成网络带宽的浪费。下面是preload属性允许设置的值：<br>  <table><tr><td>none</td><td>用户开始播放之前不会载入视频</td></tr><tr><td>metadata（最有用）</td><td>载入视频的元数据（宽度、高度、第一帧等）</td></tr><tr><td>auto</td><td>让浏览器尽快下载整个视频。</td></tr></table><strong>metadata值向用户提供了漂亮的预览画面，但需要谨慎点，有些浏览器实际上会预先下载整个视频</strong></li>
<li><p>指定视频来源<br>  指定视频来源的最简单的方式是使用src属性，并提供所需视频文件的URL。也可以使用source元素指定多个视频来源。例如：</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span> <span class="attr">width</span>=<span class="string">"360"</span> <span class="attr">height</span>=<span class="string">"240"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">""</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">""</span>/&gt;</span></div><div class="line">	Video cannot be displayed</div><div class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></div></pre></td></tr></table></figure>
<p>  浏览器会沿着列表顺序寻找它能播放的视频文件。当都不支持时，显示video标签内的文本。</p>
</li>
</ul>
<h3 id="使用audio元素"><a href="#使用audio元素" class="headerlink" title="使用audio元素"></a>使用audio元素</h3><p>audio元素允许你在HTML文档里嵌入音频内容。audio元素和video元素有许多共同点。下面以例子说明：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span> <span class="attr">autolpay</span>&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">""</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">""</span>/&gt;</span></div><div class="line">		Audio cannot be displayed</div><div class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="通过DOM操作嵌入式媒体"><a href="#通过DOM操作嵌入式媒体" class="headerlink" title="通过DOM操作嵌入式媒体"></a>通过DOM操作嵌入式媒体</h3><p>audio和video元素有很大的相似性，所有HTMLMediaElement对象在DOM里为它们统一定义了核心功能。audio元素在DOM里面由HTMLMediaElement对象所代表，这个对象没有定义不同于<br>HTMLMediaElement对象的额外功能。video元素由HTMLVideoElement对象所代表，而它相对于HTMLMediaElement对象定义了一些额外的属性。</p>
<ul>
<li><p>获得媒体信息<br>  <img src="index_files/1a392a83-d4bf-4fca-9a46-2c95ce19b716.jpg" alt=""><br>  HTMLVideoElement对象定义了下表中展示的额外属性<br>  <img src="index_files/d49974d3-c2b2-4cd7-bb17-352743dc8d1e.jpg" alt=""><br>  获取媒体元素的基本信息示例：</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">"video"</span> <span class="attr">width</span>=<span class="string">"800"</span> <span class="attr">height</span>=<span class="string">"600"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"myvideo.mp4"</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span>&gt;</span><span class="tag">&lt;/<span class="name">source</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"myvideo.ogv"</span> <span class="attr">type</span>=<span class="string">"video/ogg"</span>&gt;</span><span class="tag">&lt;/<span class="name">source</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"myvideo.webm"</span> <span class="attr">type</span>=<span class="string">"video/webm"</span>&gt;</span><span class="tag">&lt;/<span class="name">source</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">object</span> <span class="attr">width</span>=<span class="string">""</span> <span class="attr">height</span>=<span class="string">""</span> <span class="attr">type</span>=<span class="string">"application/x-shockwave-flash"</span> <span class="attr">data</span>=<span class="string">"myvideo.swf"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"movie"</span> <span class="attr">value</span>=<span class="string">"myvideo.swf"</span> /&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"flashvars"</span> <span class="attr">value</span>=<span class="string">"autostart=true&amp;amp;file=myvideo.swf"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">object</span>&gt;</span></div><div class="line">		当前浏览器不支持 video直接播放，点击这里下载视频： <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"myvideo.webm"</span>&gt;</span>下载视频<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">video</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">id</span>=<span class="string">"info"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>属性<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>值<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">		<span class="keyword">var</span> video = <span class="built_in">document</span>.getElementById(<span class="string">"video"</span>);</div><div class="line">		<span class="keyword">var</span> propertyNames = [<span class="string">"autoplay"</span>,<span class="string">"currentSrc"</span>,<span class="string">"controls"</span>,<span class="string">"loop"</span>,<span class="string">"muted"</span>,<span class="string">"preload"</span>,<span class="string">"src"</span>,<span class="string">"volume"</span>];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; propertyNames.length ; i++)&#123;</div><div class="line">			<span class="keyword">var</span> trObj = <span class="built_in">document</span>.createElement(<span class="string">"tr"</span>);</div><div class="line">			<span class="keyword">var</span> td1 = <span class="built_in">document</span>.createElement(<span class="string">"td"</span>);</div><div class="line">			<span class="keyword">var</span> td2 = <span class="built_in">document</span>.createElement(<span class="string">"td"</span>);</div><div class="line">			<span class="keyword">var</span> propertyName = <span class="built_in">document</span>.createTextNode(propertyNames[i]);</div><div class="line">			<span class="keyword">var</span> propertyValue = <span class="built_in">document</span>.createTextNode(video[propertyNames[i]]);</div><div class="line">			td1.appendChild(propertyName);</div><div class="line">			td2.appendChild(propertyValue);</div><div class="line">			trObj.appendChild(td1);</div><div class="line">			trObj.appendChild(td2);</div><div class="line">			<span class="built_in">document</span>.getElementById(<span class="string">"info"</span>).appendChild(trObj);</div><div class="line">		&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>评估播放能力<br>  canPlayType方法可以用来了解浏览器是否能够播放特定的媒体格式。这个方法会返回空（不能播放）或maybe（或许能播放）或probably（相当有把握播放）。<br>  <img src="index_files/d738d28b-f513-4ea4-935e-e19d6d45c87e.jpg" alt=""><br>  使用这个方法需要注意的是不同浏览器评估自身格式播放能力的方法各不相同。</p>
</li>
<li>控制媒体回放<br>  HTMLMediaElement对象定义了许多成员，它们让你能够控制回放和获得回放信息，这些属性和方法如下：<br>  <img src="index_files/0a9f7559-774f-46d4-8605-b6ca7fdb77cc.jpg" alt=""><br>  脚本控制多媒体暂停/播放：<br>  <img src="index_files/1155e847-4069-4df0-9f64-747beed58072.jpg" alt=""></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;插件是令浏览器崩溃的主要原因之一，特别是flash。幸运的是HTML5支持直接在浏览器中播放音频和视频文件。&lt;/p&gt;
    
    </summary>
    
      <category term="HTML5" scheme="http://heji.website/categories/HTML5/"/>
    
    
      <category term="web前端" scheme="http://heji.website/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="HTML5" scheme="http://heji.website/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>Ajax</title>
    <link href="http://heji.website/2016/12/28/Ajax/"/>
    <id>http://heji.website/2016/12/28/Ajax/</id>
    <published>2016-12-28T03:02:11.415Z</published>
    <updated>2016-12-28T03:03:59.093Z</updated>
    
    <content type="html"><![CDATA[<p>Ajax是现代Web应用程序开发的一项关键工具。它让你能想服务器异步发送和接收数据，然后用JavaScript解析。</p>
<a id="more"></a>
<p>Ajax是异步JavaScript和XML的缩写，这个名称诞生于XML还是数据传输首选格式的时期，但现在基本不用XML传输数据了。<br>Ajax核心规范的名称继承于你用来建立和发起请求的JavaScript对象：XMLHttpRequest。这个规范有两个等级。所有浏览器都实现了第一级（Level1）。它代表了基础级别的功能。第二级别（Level2）扩展了最初的规范，纳入了额外的事件和一些功能来让它更容易与form元素协作，并且支持一些相关的规范（例如CORS）。</p>
<h3 id="Ajax起步"><a href="#Ajax起步" class="headerlink" title="Ajax起步"></a>Ajax起步</h3><p>Ajax的关键在于XMLHttpRequest对象，而理解这个对象的最佳方式就是看个例子。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">button</span>&gt;</span>apples<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">button</span>&gt;</span>bananas<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">button</span>&gt;</span>cherries<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"target"</span>&gt;</span>Press a button<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="xml"></span></div><div class="line">            var buttons = document.getElementsByTagName("button");</div><div class="line">            for(var i = 0 ; i <span class="tag">&lt; <span class="attr">buttons.length</span> ; <span class="attr">i</span>++)&#123;</span></div><div class="line">                <span class="attr">buttons</span>[<span class="attr">i</span>]<span class="attr">.addEventListener</span>('<span class="attr">click</span>',<span class="attr">function</span>(<span class="attr">e</span>)&#123;</div><div class="line">                    //创建<span class="attr">XMLHttpRequest</span>对象</div><div class="line">                    <span class="attr">var</span> <span class="attr">httpRequest</span> = <span class="string">new</span> <span class="attr">XMLHttpRequest</span>();</div><div class="line">                    //给<span class="attr">readystatechange</span>事件设置一个事件处理器，这个事件会在请求过程中被多次触发，向你提供事情的进展情况</div><div class="line">                    <span class="attr">httpRequest.onreadystatechange</span> = <span class="string">handleResponse;</span></div><div class="line">                    //<span class="attr">open</span>指定<span class="attr">HTTP</span>方法和需要请求的<span class="attr">URL</span>，<span class="attr">open</span>(<span class="attr">method</span>,<span class="attr">url</span>,<span class="attr">async</span>,<span class="attr">user</span>,<span class="attr">password</span>);第三个参数指定是否异步,默认<span class="attr">true</span>，最后两个可选参数是应该给服务器的用户名和密码</div><div class="line">                    <span class="attr">httpRequest.open</span>("<span class="attr">GET</span>",<span class="attr">e.target.innerHTML</span>+"<span class="attr">.html</span>");</div><div class="line">                    //发送请求。因没有向服务器发送任何数据，所有没有参数可用</div><div class="line">                    <span class="attr">httpRequest.send</span>();</div><div class="line">                &#125;,<span class="attr">false</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="attr">function</span> <span class="attr">handleResponse</span>(<span class="attr">e</span>)&#123;</div><div class="line">                //<span class="attr">e.target</span>表示当前<span class="attr">XMLHttpRequest</span>对象</div><div class="line">                //读取<span class="attr">XMLHttpRequest</span>对象的<span class="attr">readyState</span>属性来确定当前处理的阶段。</div><div class="line">                <span class="attr">if</span>(<span class="attr">e.target.readyState</span>==<span class="string">XMLHttpRequest.LOADING</span> &amp;&amp; <span class="attr">e.target.status</span>==<span class="string">200)&#123;</span></div><div class="line">                    <span class="attr">document.getElementById</span>("<span class="attr">target</span>")<span class="attr">.innerHTML</span> = <span class="string">e.target.responseText;</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<ul>
<li>处理响应<br>  一旦脚本调用了send方法，浏览器会在后台发送请求到服务器。因为请求实在后台处理的，所有Ajax依靠readystatechange事件来通知你这个请求的进展情况。当readystatechange事件被触发后，浏览器会把一个Event对象传递给指定的处理函数。Event对象的target属性会被设定为与此事件关联的XMLHttpRequest。<br>  可以读取<strong>XMLHttpRequest.readyState</strong>属性的值确定当前请求到了哪个阶段。下面是这个属性的值<br>  <table><thead><tr><th>值</th><th>数值</th><th>说明</th></tr></thead><tbody><tr><td>UNSENT</td><td>0</td><td>已创建XMLHttpRequest对象</td></tr><tr><td>OPENED</td><td>1</td><td>已调用open方法</td></tr><tr><td>HEADERS_RECEIVED</td><td>2</td><td>已收到服务器响应的标头</td></tr><tr><td>LOADING</td><td>3</td><td>已收到服务器响应</td></tr><tr><td>DONE</td><td>4</td><td>响应完成或已失败</td></tr></tbody></table><br>  DONE状态并不意味着请求成功，它只代表请求已完成。可以通过status属性获得HTTP状态码，它会返回一个数值（比如200表示成功）。只有结合readyState和status属性的值才能够确定某个请求的结果。<br>  <strong>responseText</strong>属性会返回一个字符串，代表从服务器上取回的数据</li>
<li>主流中的异类：应对Opera<br>  Opera浏览器的XMLHttpRequest标准实现得不太一样。<br>  第一个问题是readystatechange事件不会返回一个Event对象，这意味着要把XMLHttpRequest对象指派给一个全局变量。<br>  第二个问题是Opera没有在XMLHttpRequest对象上定义就绪状态的常量，这意味着<code>XMLHttpRequest.readyState==XMLHttpRequest.DONE</code>要修改为<code>XMLHttpRequest.readyState==4</code></li>
</ul>
<h3 id="使用Ajax事件"><a href="#使用Ajax事件" class="headerlink" title="使用Ajax事件"></a>使用Ajax事件</h3><p>现在，我们来详细地看看XMLHttpRequest对象支持的功能以及如何在你的请求中使用它们。</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
<th>事件类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>abort</td>
<td>在请求被中止时触发</td>
<td>ProgressEvent</td>
</tr>
<tr>
<td>error</td>
<td>在请求失败时触发</td>
<td>ProgressEvent</td>
</tr>
<tr>
<td>load</td>
<td>在请求成功完成时触发</td>
<td>ProgressEvent</td>
</tr>
<tr>
<td>loadend</td>
<td>在请求完成时触发，不管成功还是失败</td>
<td>ProgressEvent</td>
</tr>
<tr>
<td>loadstart</td>
<td>在请求开始时触发</td>
<td>ProgressEvent</td>
</tr>
<tr>
<td>progress</td>
<td>触发以提示请求的进度</td>
<td>ProgressEvent</td>
</tr>
<tr>
<td>readystatechange</td>
<td>在请求生命周期的不同阶段触发</td>
<td>Event</td>
</tr>
<tr>
<td>timeout</td>
<td>如果请求超时时则触发</td>
<td>ProgressEvent</td>
</tr>
</tbody>
</table>
<p>这些事件大多数会在请求的某一个特定点上触发。readystatechange和progress这两个事件是例外，它们可以多次触发以提供进度更新。<br>除了readystatechange（XMLHttpRequest规范Level 1）之外，表中展示的其他事件都定义于XMLHttpRequest规范Level 2。<br>调用这些事件时，浏览器会对readystatechange事件使用常规的Event对象，对其他事件则使用ProgressEvent对象。ProgressEvent对象定义了Event对象的所有成员，并增加了一些成员。</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
<th>返回值</th>
</tr>
</thead>
<tbody>
<tr>
<td>lengthComputable</td>
<td>如果能够计算数据流的总长度则返回true</td>
<td>布尔值</td>
</tr>
<tr>
<td>loaded</td>
<td>返回当前已载入的数据量</td>
<td>数值</td>
</tr>
<tr>
<td>total</td>
<td>返回可用的数据总量</td>
<td>数值</td>
</tr>
</tbody>
</table>
<p>下面是使用这些事件的一个综合例子：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"shortcut icon"</span> <span class="attr">href</span>=<span class="string">"images/favicon.ico"</span> <span class="attr">type</span>=<span class="string">"image/x-icon"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">        table&#123;</div><div class="line">            margin:10px;</div><div class="line">            border-collapse: collapse;</div><div class="line">            float: left;</div><div class="line">        &#125;</div><div class="line">        th,td&#123;</div><div class="line">            padding: 4px;</div><div class="line">        &#125;</div><div class="line">        div&#123;</div><div class="line">            margin: 10px;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>apples<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>cherries<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>bananas<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"target"</span>&gt;</span></div><div class="line">        加载内容</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">"events"</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">        //使用XMLHttpRequest定义的一次性事件</div><div class="line">        var buttons=document.getElementsByTagName("button");</div><div class="line">        for(var i=0;i&lt;buttons.length;i++)&#123;</div><div class="line">            buttons[i].onclick=handleButtonPress;</div><div class="line">        &#125;</div><div class="line">        var httpRequest;</div><div class="line">        function handleButtonPress(e)&#123;</div><div class="line">            clearEventDetails();</div><div class="line">            httpRequest=new XMLHttpRequest();</div><div class="line">            httpRequest.onreadystatechange=handleResponse;</div><div class="line">            httpRequest.onerror=handleError;</div><div class="line">            httpRequest.onload=handleLoad;</div><div class="line">            httpRequest.onloadend=handleLoadEnd;</div><div class="line">            httpRequest.onloadstart=handleLoadStart;</div><div class="line">            httpRequest.onprogress=handleProgress;</div><div class="line">            httpRequest.open("GET", e.target.innerHTML+".html");</div><div class="line">            httpRequest.send();</div><div class="line">        &#125;</div><div class="line">        function handleResponse(e)&#123;</div><div class="line">            displayEventDetails("readystate("+ httpRequest.readyState +")");</div><div class="line">            //处理响应</div><div class="line">            if(httpRequest.readyState==4 &amp;&amp; httpRequest.status==200)&#123;</div><div class="line">                document.getElementById("target").innerHTML= httpRequest.responseText;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        function handleError(e)&#123;displayEventDetails("error",e);&#125;</div><div class="line">        function handleLoad(e)&#123;displayEventDetails("load",e);&#125;</div><div class="line">        function handleLoadEnd(e)&#123;displayEventDetails("loadend",e);&#125;</div><div class="line">        function handleLoadStart(e)&#123;displayEventDetails("loadstart",e);&#125;</div><div class="line">        function handleProgress(e)&#123;displayEventDetails("progress",e);&#125;</div><div class="line">        function clearEventDetails()&#123;</div><div class="line">            document.getElementById("events").innerHTML="&lt;tr&gt;&lt;th&gt;Event&lt;/th&gt;&lt;th&gt;lengthComputable&lt;/th&gt;&lt;th&gt;loaded&lt;/th&gt;&lt;th&gt;total&lt;/th&gt;&lt;/tr&gt;"</div><div class="line">        &#125;</div><div class="line">        function displayEventDetails(eventName,e)&#123;</div><div class="line">            if(e)&#123;</div><div class="line">                document.getElementById("events").innerHTML+="&lt;tr&gt;&lt;td&gt;"+eventName+"&lt;/td&gt;&lt;td&gt;"+ e.lengthComputable+"&lt;/td&gt;&lt;td&gt;"+ e.loaded+"&lt;/td&gt;&lt;td&gt;"+ e.total+"&lt;/td&gt;&lt;/tr&gt;";</div><div class="line">            &#125;else&#123;</div><div class="line">                document.getElementById("events").innerHTML+="&lt;tr&gt;&lt;td&gt;"+eventName+"&lt;/td&gt;&lt;td&gt;NA&lt;/td&gt;&lt;td&gt;NA&lt;/td&gt;&lt;td&gt;NA&lt;/td&gt;&lt;/tr&gt;";</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="处理错误"><a href="#处理错误" class="headerlink" title="处理错误"></a>处理错误</h3><p>使用Ajax时必须留心两类错误。它们之间的区别源于视角不同。<br>第一类错误是从XMLHttpRequest对象的角度看到的问题：某些因素阻止了请求发送到服务器，例如DNS无法解析主机名或者URL无效等。<br>第二类问题是从应用程序的角度看到的问题。它们发生于请求成功发送到服务器，服务器接收请求，进行处理并生成相应，但该响应不是你期望的内容。例如请求的URL不存在等。</p>
<ul>
<li>处理设置错误<br>  使用try…catch语句来围住请求的代码。在catch子句对错误进行处理</li>
<li>处理应用程序错误<br>  这种错误发生于请求成功完成（从XMLHttpRequest对象角度看），但没有返回你想要的数据时，可以根据status属性来确定发生了什么。200表示请求成功完成。  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">if</span>(e.target.status==<span class="number">200</span>)&#123;</div><div class="line">        target.innerHTML = e.target.responseText;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="built_in">console</span>.error(<span class="string">"Status:"</span>+e.target.status+<span class="string">","</span>+e.target.statusText);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="获取和设置标头"><a href="#获取和设置标头" class="headerlink" title="获取和设置标头"></a>获取和设置标头</h3><p>XMLHTTPRequest对象让你可以设置发送给服务器的请求标头（Header）和读取服务器响应里的标头。通常不需要添加或修改Ajax请求里的标头。浏览器知道需要发送什么，服务器也知道如何进行响应。不过，有几种情况是例外。<br>下面是有关标头的方法：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
<th>返回</th>
</tr>
</thead>
<tbody>
<tr>
<td>setRequestHeader(header,value)</td>
<td>用指定值设置标头</td>
<td>void</td>
</tr>
<tr>
<td>getResponseHeader(header)</td>
<td>获取指定标头的值</td>
<td>字符串</td>
</tr>
<tr>
<td>getAllResponseHeaders()</td>
<td>以单个字符串的形式获取所有的标头</td>
<td>字符串</td>
</tr>
</tbody>
</table>
<ul>
<li><p>覆盖请求的HTTP方法<br>  HTTP发送请求的方法除了GET和POST之外，还存在一些其他方法（比如PUT、DELETE）这些方法用来向服务器请求的URL赋予意义，而且这种用法正在呈现上升趋势。例如，如果想删除数据，可以这么写：</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    httpRequest.open(<span class="string">"DELETE"</span>,<span class="string">"http://myserver/records/person/1"</span>);</div></pre></td></tr></table></figure>
<p>  此处的关键在于通过HTTP方法表达出你想让服务器做什么，而不是把它用某种方式编码进URL。这是一种被称为RESTful API的趋势的一部分。<br>  以这种方式使用HTTP方法的问题在于：许多主流浏览器只支持GET和POST。而且不少防火墙只允许GET和POST请求通过。有一种惯用的做法可以规避这个限制，就是使用X-HTTP-Method-Override标头来指定想要使用的HTTP方法，但形式上是再发送一个POST请求(两个请求，第一个是OPTIONS请求，第二个是POST请求)。下面是示例代码:</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">handleButtonPress</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> httpRequest = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">        httpRequest.onreadystatechange = handleResponse;</div><div class="line">        httpRequest.open(<span class="string">"GET"</span>,e.target.innerHTML+<span class="string">".html"</span>);</div><div class="line">        <span class="comment">//注意：一定要在open方法之后设置，否则会报错</span></div><div class="line">        httpRequest.setRequestHeader(<span class="string">"X-HTTP-Method-Override"</span>,<span class="string">"DELETE"</span>);</div><div class="line">        httpRequest.send();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>  <strong>注意：覆盖HTTP方法需要服务器端的Web应用程序框架能理解X-HTTP-Method-Override这个惯例，且能理解和支持那些用得较少的HTTP方法。对于Servlet，为支持X-HTTP-Method-Override，需要给响应添加一个标头<code>resp.setHeader(&quot;Access-Control-Allow-Headers&quot;, &quot;X-HTTP-Method-Override&quot;);</code>以及重写<code>doOptions</code>方法</strong></p>
</li>
<li><p>禁用内容缓存<br>  第二个可以添加到Ajax请求上的有用标头是Cache-Control。一些浏览器会缓存通过Ajax请求所获得的内容，导致若请求的内容发生改变时，不能立刻反映到页面上。可以设置Cache-Control标头让浏览器不缓存Ajax请求获取的内容。例如：</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">handleButtonPress</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> httpRequest = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">        httpRequest.onreadystatechange = handleResponse;</div><div class="line">        httpRequest.open(<span class="string">"GET"</span>,e.target.innerHTML+<span class="string">".html"</span>);</div><div class="line">        <span class="comment">//注意：一定要在open方法之后设置，否则会报错</span></div><div class="line">        httpRequest.setRequestHeader(<span class="string">"Cache-Control"</span>,<span class="string">"no-cache"</span>);</div><div class="line">        httpRequest.send();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>获取响应标头<br>  可以通过getResponseHeader和getAllResponseHeaders方法来读取服务器响应某个Ajax请求时发送的HTTP标头。大多数情况下，不需要关心标头里有什么，因为它们是浏览器和服务器之间交互事务的组成部分。下面是例子：</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">handleResponse</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(httpRequest.readyState == <span class="number">2</span>)&#123;</div><div class="line">           <span class="built_in">console</span>.log(httpRequest.getAllResponseHeaders);</div><div class="line">           <span class="built_in">console</span>.log(httpRequest.getResponseHeader(<span class="string">"Content-Type"</span>));</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(httpRequest.readyState == <span class="number">4</span> &amp;&amp; httpRequest.status == <span class="number">200</span>)&#123;</div><div class="line">        <span class="comment">//成功完成响应的处理</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>  响应标头在readyState变成HEADERS_RECEIVED(值为2)时就可以使用了。标头是服务器在响应时首先发送回来的消息，因此可以在内容本身就绪前先读取它们。</p>
</li>
</ul>
<h3 id="生成跨源Ajax请求"><a href="#生成跨源Ajax请求" class="headerlink" title="生成跨源Ajax请求"></a>生成跨源Ajax请求</h3><p>默认情况下，浏览器限制脚本在它们所属文档的来源内生成Ajax请求，来源由URL中的协议、主机名和端口号组成。从一个来源到另一个来源的Ajax请求被称为跨源请求。浏览器不支持Ajax请求跨源的目的是降低跨站脚本攻击（Cross-site scripting，简称CSS）的风险。<br>为实现跨源请求，服务器返回浏览器的响应信息添加一个标头（这里以Java的Servlet示例）：<br><figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//允许跨源请求</span></div><div class="line">        resp.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"http://127.0.0.1:8030"</span>);</div><div class="line">        <span class="comment">//支持X-HTTP-Method-Override请求头</span></div><div class="line">        resp.setHeader(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"X-HTTP-Method-Override"</span>);</div></pre></td></tr></table></figure></p>
<ul>
<li><p>使用Origin请求标头<br>  作为CORS的一部分，浏览器会给请求添加一个Origin标头以注明当前文档的来源。可以通过它更灵活地设置Access-Control-Allow-Origin的值：</p>
  <figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">    String origin = req.getHeader(<span class="string">"Origin"</span>);</div><div class="line">        <span class="comment">//如果是来源包含127.0.0.1</span></div><div class="line">        <span class="keyword">if</span>(origin.indexOf(<span class="string">"127.0.0.1"</span>)&gt;-<span class="number">1</span>)&#123;</div><div class="line">            <span class="comment">//允许跨源请求</span></div><div class="line">            resp.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, origin);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//支持X-HTTP-Method-Override请求头</span></div><div class="line">        resp.setHeader(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"X-HTTP-Method-Override"</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>高级CORS功能</p>
</li>
</ul>
<h3 id="中止请求"><a href="#中止请求" class="headerlink" title="中止请求"></a>中止请求</h3><p>XMLHttpRequest对象定义了一个让你可以中止请求的方法。如下表：</p>
<table>
<thead>
<tr>
<th>成员</th>
<th>说明</th>
<th>返回</th>
</tr>
</thead>
<tbody>
<tr>
<td>abort()</td>
<td>中断当前请求</td>
<td>void</td>
</tr>
</tbody>
</table>
<p>注意，当调用abort()方法时会触发XMLHttpRequest的onabort事件，可以在onabort事件里进行一些中断请求后的处理。</p>
<h3 id="发送表单数据"><a href="#发送表单数据" class="headerlink" title="发送表单数据"></a>发送表单数据</h3><p>Ajax最常见的一大用途是向服务器发送数据。最典型的情况是从客户端发送表单数据<br><img src="index_files/203b97a6-5332-4cb6-b4ff-e0104fcade3a.jpg" alt=""></p>
<h4 id="表单编码"><a href="#表单编码" class="headerlink" title="表单编码"></a>表单编码</h4><p><code>Content-Type</code>指定向服务器发送的数据格式，等价于表单元素的<code>enctype</code>属性。</p>
<ul>
<li><p><code>application/x-www-form-urlencoded</code>格式编码<br>  <code>application/x-www-form-urlencoded</code>是表单编码的默认格式。但由于不是Ajax编码的默认格式，所以需要手动指定。例如，下面有个表单：</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">&lt;!--这是默认编码，可省略--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">form</span>  <span class="attr">method</span>=<span class="string">'post'</span> <span class="attr">enctype</span>=<span class="string">'application/x-www-form-urlencoded'</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">'title'</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">'subtitle'</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p>  提交表单之后，通过控制台可以查看到下面信息：<br>  请求头（这里只给出了<code>Content-Type</code>字段）：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">    POST http://www.example.com HTTP/1.1</div><div class="line">    Content-Type: application/x-www-form-urlencoded</div></pre></td></tr></table></figure>
<p>  请求体：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    title=test&amp;subtitle=%E4%B8%AD%E5%9B%BD</div></pre></td></tr></table></figure>
<p>  这里你看到的<code>%E4%B8%AD%E5%9B%BD</code>即是<code>中国</code>按照base64编码（url通用的编码方式）后的结果。可以在Chrome Console中通过<code>decodeURI(&#39;%E4%B8%AD%E5%9B%BD&#39;)</code>来解码。<br>  由此可见，<code>application/x-www-form-urlencoded</code>编码的格式就是参数使用<code>&amp;</code>符号连接，发送前对字符进行编码，空格会转换成”+”加号。</p>
</li>
<li>multipart编码<br>  multipart编码方式则需要设置<code>enctype</code>为<code>multipart/form-data</code>。当表单需要上传附件时，必须设置该编码。</li>
<li>text/plain编码<br>  除了<code>application/x-www-form-urlencoded</code>和<code>multipart/form-data</code>，HTML的<code>&lt;form&gt;</code>还支持<code>text/plain</code>。这种编码方式需要谨慎使用，Chrome使用与<code>application/x-www-form-urlencoded</code>一样的编码方案，而Firefox又不一样。</li>
</ul>
<h4 id="使用FormData对象发送表单数据"><a href="#使用FormData对象发送表单数据" class="headerlink" title="使用FormData对象发送表单数据"></a>使用FormData对象发送表单数据</h4><p>另一种更简洁的表单数据收集方式是使用一个FormData对象，它是在XMLHttpRequest第二级规范中定义的。</p>
<ul>
<li><p>创建FormData对象<br>  创建FormData对象可以传递一个HTMLFormElement对象，这样表单里的所有元素的值都会被自动收集起来。下面是综合例子：</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">    <span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">id</span>=<span class="string">"myForm"</span>&gt;</span></div><div class="line">            用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">id</span>=<span class="string">"username"</span> /&gt;</span></div><div class="line">            密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"password"</span>  /&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">id</span>=<span class="string">"submitBtn"</span> <span class="attr">value</span>=<span class="string">"提交"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">            <span class="keyword">var</span> httpRequest;</div><div class="line">            <span class="built_in">document</span>.getElementById(<span class="string">"submitBtn"</span>).addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">                e.preventDefault();</div><div class="line">                <span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">"myForm"</span>);</div><div class="line">                <span class="comment">//FormData对象默认的编码方式multipart/form-data;</span></div><div class="line">                <span class="keyword">var</span> formData = <span class="keyword">new</span> FormData(form);</div><div class="line">                <span class="comment">//还能添加参数</span></div><div class="line">                formData.append(<span class="string">"参数1"</span>,<span class="string">"谁看见啊"</span>);</div><div class="line">                httpRequest = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">                httpRequest.onreadystatechange = handleResponse;</div><div class="line">                httpRequest.open(<span class="string">'POST'</span>,form.action);</div><div class="line">                httpRequest.send(formData);</div><div class="line">            &#125;);</div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">handleResponse</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="built_in">console</span>.log(httpRequest.readyState);</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>发送JSON数据<br>  Ajax不止用来发送表单数据，几乎可以发送任何东西，运用最多的是JSON数据，下面是综合例子：</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">    <span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">id</span>=<span class="string">"myForm"</span>&gt;</span></div><div class="line">            用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">id</span>=<span class="string">"username"</span> /&gt;</span></div><div class="line">            密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"password"</span>  /&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"submitBtn"</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">            <span class="keyword">var</span> httpRequest;</div><div class="line">            <span class="built_in">document</span>.getElementById(<span class="string">"submitBtn"</span>).addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">                e.preventDefault();</div><div class="line">                <span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">"myForm"</span>);</div><div class="line">                <span class="keyword">var</span> inputElements = form.getElementsByTagName(<span class="string">"input"</span>);</div><div class="line">                <span class="keyword">var</span> formData = &#123;&#125;;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; inputElements.length ; i++)&#123;</div><div class="line">                    formData[inputElements[i].name] = inputElements[i].value;</div><div class="line">                &#125;</div><div class="line">                httpRequest = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">                httpRequest.onreadystatechange = handleResponse;</div><div class="line">                httpRequest.open(<span class="string">'POST'</span>,form.action);</div><div class="line">                httpRequest.setRequestHeader(<span class="string">"Content-Type"</span>,<span class="string">"application/json"</span>);</div><div class="line">                httpRequest.send(<span class="built_in">JSON</span>.stringify(formData));</div><div class="line">            &#125;);</div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">handleResponse</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="built_in">console</span>.log(httpRequest.readyState);</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>  <strong>注意：发送JSON数据需要设置Content-Type标头</strong><br>  用JSON对象JSON格式进行相互的转换。JSON对象提供了两个方法，如下表：<br>  <table><thead><tr><th>方法</th><th>说明</th><th>返回</th></tr></thead><tbody><tr><td>parse(str)</td><td>解析用JSON编码的字符串并创建一个JSON对象</td><td>对象</td></tr><tr><td>stringify(object)</td><td>把JSON格式的对象转换为字符串</td><td>字符串</td></tr></tbody></table>在例子中，我使用了stringify方法，然后传递给XMLHttpRequest对象的send方法。</p>
</li>
</ul>
<h3 id="发送文件"><a href="#发送文件" class="headerlink" title="发送文件"></a>发送文件</h3><p>可以使用FormData对象和type属性为file的input元素向服务器发送文件。<br><strong>注意：因为FormData对象是XMLHttpRequest第二级规范中定义的，所以有些老版本的浏览器并不支持，在没有FormData对象的浏览器里使用Ajax上传文件几乎不能实现。但有许多修补和变通的方法可供使用：Flash或者提交表单到隐藏的iframe里，这些方法都有较严重的缺陷，应谨慎使用。</strong><br>使用方法：在form表单添加类型为file的input元素，然后在脚本获取form元素作为参数传进FormData的构造方法，再把FormData对象作为参数传递给XMLHttpRequest的send方法。</p>
<h4 id="追踪文件上传进度"><a href="#追踪文件上传进度" class="headerlink" title="追踪文件上传进度"></a>追踪文件上传进度</h4><p>可以在数据发送到服务器时追踪它的进度。具体做法是使用XMLHTtpRequest对象的upload属性，该属性返回一个可用于监控进度的对象。<br>upload属性返回的XMLHttpRequest对象只定义了注册事件处理器所需的属性：onprogress和onload等。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">   <span class="keyword">var</span> upload = httpRequest.upload;</div><div class="line">   upload.onprogress = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">       <span class="built_in">console</span>.log(e.total,e.loaded);</div><div class="line">   &#125;</div><div class="line">   upload.onload = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">       <span class="built_in">console</span>.log(<span class="string">"上传完成"</span>);</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<h3 id="请求并处理不同内容类型（以JavaServlet为例）"><a href="#请求并处理不同内容类型（以JavaServlet为例）" class="headerlink" title="请求并处理不同内容类型（以JavaServlet为例）"></a>请求并处理不同内容类型（以JavaServlet为例）</h3><ul>
<li><p>返回HTML片段</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//返回html文档</span></div><div class="line">response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</div><div class="line">response.setHeader(<span class="string">"Cache-control"</span>, <span class="string">"no-cache"</span>);</div><div class="line">String res=<span class="string">"&lt;font size='2' color='blue'&gt;"</span>+name+pwd+<span class="string">"&lt;/font&gt;"</span>;</div><div class="line">PrintWriter out = response.getWriter();</div><div class="line">out.println(res);</div><div class="line">out.close();</div></pre></td></tr></table></figure>
<p>  <strong>可以用XMLHttpRequest对象的overrideMimeType方法指定服务器返回数据的MIME类型。该方法必须在<code>send()</code>之前调用。但这种方式较麻烦，在XMLHttpRequest版本升级以后，一般采用指定<code>responseType</code>的方法</strong></p>
</li>
<li><p>接收XML数据<br>  Servlet：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//返回xml文档</span></div><div class="line">response.setContentType(<span class="string">"text/xml;charset=utf-8"</span>);</div><div class="line">response.setHeader(<span class="string">"Cache-control"</span>, <span class="string">"no-cache"</span>);</div><div class="line">String res=<span class="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;"</span>+</div><div class="line">           <span class="string">"&lt;fruitorder total=\"27\"&gt;"</span>+</div><div class="line">		    <span class="string">"&lt;/fruitorder&gt;"</span>;</div><div class="line">PrintWriter out = response.getWriter();</div><div class="line">out.println(res);</div><div class="line">out.close();</div></pre></td></tr></table></figure>
<p>  HTML：</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleResponse</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(httpRequest.readyState==<span class="number">4</span> &amp;&amp; httpRequest.status==<span class="number">200</span>)&#123;</div><div class="line">	    <span class="comment">//httpRequest.overrideMimeType("application/xml");这句要在send方法之前调用</span></div><div class="line">		<span class="keyword">var</span> xmlDoc = httpRequest.responseXML;</div><div class="line">		<span class="keyword">var</span> total = xmlDoc.getElementsByTagName(<span class="string">"fruitorder"</span>)[<span class="number">0</span>].getAttribute(<span class="string">'total'</span>);</div><div class="line">		<span class="built_in">console</span>.log(total);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>接收JSON数据<br>  Servlet需要设置<code>response.setContentType(&quot;application/json; charset=utf-8&quot;);</code>向页面输出JSON格式的字符串，前端页面需要使用JSON对象的parse方法解析成JSON对象。</p>
</li>
</ul>
<h3 id="response属性和responseType属性"><a href="#response属性和responseType属性" class="headerlink" title="response属性和responseType属性"></a>response属性和responseType属性</h3><p>response和responseType是XMLHttpRequest二级规范定义的属性，使用它们可以指定服务器返回的数据类型，并进行自动转换<br><code>responseType</code>属性用来指定服务器返回数据（<code>xhr.response</code>）的类型。取值如下：<table><tr><td>值</td><td>说明</td></tr><tr></tr><tr><td>‘’(空字符串)</td><td>response属性返回字符串（默认）</td></tr><td>text</td><td>response属性返回字符串</td><tr><td>arraybuffer</td><td>response属性返回ArrayBuffer对象</td></tr><tr><td>blob</td><td>response属性返回Bolb对象</td></tr><tr><td>document</td><td>response属性返回Document对象</td></tr><tr><td>json</td><td>response属性返回JSON对象</td></tr></table><br>text类型适合大多数情况，而且直接处理文本也比较方便，document类型适合返回XML或HTML文档的情况，blob类型适合读取二进制数据，比如图片文件。如果将这个属性设为“json”，支持JSON的浏览器（Firefox&gt;9，chrome&gt;30），就会自动对返回数据调用<code>JSON.parse()</code>方法。下面是例子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'/path/to/image.png'</span>, <span class="literal">true</span>);</div><div class="line">xhr.responseType = <span class="string">'blob'</span>;</div><div class="line">xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.status == <span class="number">200</span>) &#123;</div><div class="line">    <span class="keyword">var</span> blob = <span class="keyword">new</span> Blob([<span class="keyword">this</span>.response], &#123;type: <span class="string">'image/png'</span>&#125;);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">xhr.send();</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Ajax是现代Web应用程序开发的一项关键工具。它让你能想服务器异步发送和接收数据，然后用JavaScript解析。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://heji.website/categories/JavaScript/"/>
    
    
      <category term="web前端" scheme="http://heji.website/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://heji.website/tags/JavaScript/"/>
    
      <category term="Ajax" scheme="http://heji.website/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>Emmet-让你的代码飞起来</title>
    <link href="http://heji.website/2016/12/22/Emmet-%E8%AE%A9%E4%BD%A0%E7%9A%84%E4%BB%A3%E7%A0%81%E9%A3%9E%E8%B5%B7%E6%9D%A5/"/>
    <id>http://heji.website/2016/12/22/Emmet-让你的代码飞起来/</id>
    <published>2016-12-22T04:22:27.751Z</published>
    <updated>2016-12-22T04:26:14.922Z</updated>
    
    <content type="html"><![CDATA[<p>Emmet是一款编辑器插件，必须要基于某个编辑器使用，能快速完成代码的编写。</p>
<a id="more"></a>
<h2 id="语法-使用tab键补全"><a href="#语法-使用tab键补全" class="headerlink" title="语法(使用tab键补全)"></a>语法(使用tab键补全)</h2><ul>
<li><p>后代<code>nav&gt;ul&gt;li</code></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">    &lt;nav&gt;</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    &lt;<span class="regexp">/nav&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>兄弟<code>div+p+bq</code></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">    &lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">    &lt;p&gt;<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></div><div class="line">    &lt;blockquote&gt;<span class="xml"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span></div></pre></td></tr></table></figure>
</li>
<li><p>上级<code>div+div&gt;p&gt;span+em^bq</code></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">    &lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">    &lt;div&gt;</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></div><div class="line">        &lt;blockquote&gt;<span class="xml"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span></div><div class="line">    &lt;<span class="regexp">/div&gt;</span></div></pre></td></tr></table></figure>
<p>  例二<code>div+div&gt;p&gt;span+em^^bq</code>：</p>
  <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">    &lt;div&gt;&lt;/div&gt;</div><div class="line">    &lt;div&gt;</div><div class="line">        &lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;em&gt;&lt;/em&gt;&lt;/p&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;blockquote&gt;&lt;/blockquote&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>分组<code>div&gt;(header&gt;ul&gt;li*2&gt;a)+footer&gt;p</code></p>
  <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">    &lt;div&gt;</div><div class="line">    &lt;header&gt;</div><div class="line">        &lt;ul&gt;</div><div class="line">            &lt;li&gt;&lt;a href=""&gt;&lt;/a&gt;&lt;/li&gt;</div><div class="line">            &lt;li&gt;&lt;a href=""&gt;&lt;/a&gt;&lt;/li&gt;</div><div class="line">        &lt;/ul&gt;</div><div class="line">    &lt;/header&gt;</div><div class="line">    &lt;footer&gt;</div><div class="line">        &lt;p&gt;&lt;/p&gt;</div><div class="line">    &lt;/footer&gt;</div><div class="line">    &lt;/div&gt;</div></pre></td></tr></table></figure>
<p>  例二<code>(div&gt;dl&gt;(dt+dd)*3)+footer&gt;p</code>:</p>
  <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">    &lt;div&gt;</div><div class="line">        &lt;dl&gt;</div><div class="line">            &lt;dt&gt;&lt;/dt&gt;</div><div class="line">            &lt;dd&gt;&lt;/dd&gt;</div><div class="line">            &lt;dt&gt;&lt;/dt&gt;</div><div class="line">            &lt;dd&gt;&lt;/dd&gt;</div><div class="line">            &lt;dt&gt;&lt;/dt&gt;</div><div class="line">            &lt;dd&gt;&lt;/dd&gt;</div><div class="line">        &lt;/dl&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;footer&gt;</div><div class="line">        &lt;p&gt;&lt;/p&gt;</div><div class="line">    &lt;/footer&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>乘法<code>ul&gt;li*5</code>:</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">    &lt;ul&gt;</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line">        &lt;li&gt;<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line">        &lt;li&gt;<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line">        &lt;li&gt;<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line">        &lt;li&gt;<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line">    &lt;<span class="regexp">/ul&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>自增符号:<br>  例一<code>ul&gt;li.item$*5</code>:</p>
  <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">    &lt;ul&gt;</div><div class="line">        &lt;li class="item1"&gt;&lt;/li&gt;</div><div class="line">        &lt;li class="item2"&gt;&lt;/li&gt;</div><div class="line">        &lt;li class="item3"&gt;&lt;/li&gt;</div><div class="line">        &lt;li class="item4"&gt;&lt;/li&gt;</div><div class="line">        &lt;li class="item5"&gt;&lt;/li&gt;</div><div class="line">    &lt;/ul&gt;</div><div class="line">    ``` </div><div class="line">    例二 `h$[title=item$]&#123;Header $&#125;*3`:</div><div class="line">    ```javascript</div><div class="line">    &lt;h1 title="item1"&gt;Header 1&lt;/h1&gt;</div><div class="line">    &lt;h2 title="item2"&gt;Header 2&lt;/h2&gt;</div><div class="line">    &lt;h3 title="item3"&gt;Header 3&lt;/h3&gt;</div><div class="line">    ```    例三`ul&gt;li.item$@-*5`(负号表示反向):</div><div class="line">    ```javascript</div><div class="line">    &lt;ul&gt;</div><div class="line">        &lt;li class="item5"&gt;&lt;/li&gt;</div><div class="line">        &lt;li class="item4"&gt;&lt;/li&gt;</div><div class="line">        &lt;li class="item3"&gt;&lt;/li&gt;</div><div class="line">        &lt;li class="item2"&gt;&lt;/li&gt;</div><div class="line">        &lt;li class="item1"&gt;&lt;/li&gt;</div><div class="line">    &lt;/ul&gt;</div></pre></td></tr></table></figure>
<p>  例四<code>ul&gt;li.item$@3*5</code>:</p>
  <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">    &lt;ul&gt;</div><div class="line">        &lt;li class="item3"&gt;&lt;/li&gt;</div><div class="line">        &lt;li class="item4"&gt;&lt;/li&gt;</div><div class="line">        &lt;li class="item5"&gt;&lt;/li&gt;</div><div class="line">        &lt;li class="item6"&gt;&lt;/li&gt;</div><div class="line">        &lt;li class="item7"&gt;&lt;/li&gt;</div><div class="line">    &lt;/ul&gt;</div><div class="line">    ```* ID和类属性</div><div class="line">    缩写`div#header`</div><div class="line">    ```javascript</div><div class="line">    &lt;div id="header"&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>  缩写<code>div.title</code></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"title"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>  缩写<code>form#search.wide</code></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    &lt;form id=<span class="string">"search"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"wide"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>  缩写p.class1.class2.class3</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    &lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">"class1 class2 class3"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></div></pre></td></tr></table></figure>
</li>
<li><p>自定义属性<br>  缩写<code>p[title=&quot;Hello World&quot;]</code></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">        &lt;p title=<span class="string">"Hello World"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></div><div class="line">    缩写<span class="string">`td[rowspan=2 colspan=3]`</span></div><div class="line">    <span class="string">``</span><span class="string">`javascript</span></div><div class="line">    &lt;td rowspan="2" colspan="3"&gt;&lt;/td&gt;</div></pre></td></tr></table></figure>
<p>  缩写<code>div[a=&quot;value1&quot; b=&quot;value2&quot;]</code></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    &lt;div a=<span class="string">"value1"</span> b=<span class="string">"value2"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div></pre></td></tr></table></figure>
</li>
<li><p>文本<br>  缩写<code>a{click me}</code></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    &lt;a&gt;click me&lt;<span class="regexp">/a&gt;</span></div></pre></td></tr></table></figure>
<p>  缩写<code>p&gt;{Click }+a{here}+{ to continue}</code></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    &lt;p&gt;Click &lt;a&gt;here&lt;<span class="regexp">/a&gt; to continue&lt;/</span>p&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="HTML-使用tab键补全"><a href="#HTML-使用tab键补全" class="headerlink" title="HTML(使用tab键补全)"></a>HTML(使用tab键补全)</h2><p><strong>所有未知的缩写都会转换为标签，例如，foo—-&gt;<foo></foo></strong></p>
<ul>
<li>缩写<code>!</code></li>
<li>缩写<code>a:link</code></li>
<li>缩写<code>link:css</code></li>
<li>缩写<code>meta:vp</code>（响应式标签）</li>
<li>缩写<code>style</code></li>
<li>缩写<code>script:src</code></li>
<li>缩写<code>img</code></li>
<li>缩写<code>iframe</code></li>
<li>缩写<code>form:get</code></li>
<li>缩写<code>form:post</code></li>
<li>缩写<code>input:text</code></li>
<li>缩写<code>input:hidden</code></li>
<li>缩写<code>input:xxx</code></li>
<li>缩写<code>btn</code></li>
</ul>
<h2 id="CSS-使用tab键补全"><a href="#CSS-使用tab键补全" class="headerlink" title="CSS(使用tab键补全)"></a>CSS(使用tab键补全)</h2><ul>
<li><p>单位缩写及多值缩写</p>
  <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">    <span class="selector-tag">m10</span> → <span class="selector-tag">margin</span>: 10<span class="selector-tag">px</span>;</div><div class="line">    <span class="selector-tag">m10-20</span> → <span class="selector-tag">margin</span>: 10<span class="selector-tag">px</span> 20<span class="selector-tag">px</span>;</div><div class="line">    <span class="selector-tag">m-10--20</span> → <span class="selector-tag">margin</span>: <span class="selector-tag">-10px</span> <span class="selector-tag">-20px</span>;</div><div class="line">    <span class="selector-tag">m0-a</span> → <span class="selector-tag">margin</span>: 0 <span class="selector-tag">auto</span>;</div><div class="line">    <span class="selector-tag">m1</span><span class="selector-class">.5em</span> → <span class="selector-tag">margin</span>: 1<span class="selector-class">.5em</span>;</div><div class="line">    <span class="selector-tag">m1</span><span class="selector-class">.5ex</span> → <span class="selector-tag">margin</span>: 1<span class="selector-class">.5ex</span>;</div><div class="line">    <span class="selector-tag">m10</span>% → <span class="selector-tag">margin</span>: 10%;</div><div class="line">    <span class="selector-tag">m10p30e5x</span> → <span class="selector-tag">margin</span>: 10% 30<span class="selector-tag">em</span> 5<span class="selector-tag">ex</span></div></pre></td></tr></table></figure>
<p>  Tips：</p>
<ol>
<li>一些单位的简便写法：（p → %，e → em，x → ex，r → rem）</li>
<li>以下情况可以省略单位，Emmet会自动为其添加单位：若是整数，则添加px为单位，若是浮点数，则添加em为单位；</li>
<li>类似margin这样属性值可以有多位数值的情况，在填写多位数值时，中间加个连字符“-”作为分隔符，如果附带了单位，则附带单位的那个值后面就不再加连字符，因为Emmet可以将单位识别为分隔符，此处若再添加连字符，则Emmet认为你是要将下一个值设置为负值，例如：m10p-30e-5x → margin: 10% -30em -5ex;</li>
</ol>
</li>
<li><p>颜色值<br>  Emmet支持16进制的颜色值。</p>
  <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">    <span class="selector-tag">c</span><span class="selector-id">#3</span> → <span class="selector-tag">color</span>: <span class="selector-id">#333</span>;</div><div class="line">    <span class="selector-id">#1</span> → <span class="selector-id">#111111</span></div><div class="line">    <span class="selector-id">#e0</span> → <span class="selector-id">#e0e0e0</span></div><div class="line">    <span class="selector-id">#fc0</span> → <span class="selector-id">#ffcc00</span></div><div class="line">    <span class="selector-tag">bd5</span><span class="selector-id">#0s</span> → <span class="selector-tag">border</span>: 5<span class="selector-tag">px</span> <span class="selector-id">#000</span> <span class="selector-tag">solid</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>需要单位的属性值</p>
  <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    <span class="selector-tag">lh2px</span>→ <span class="selector-tag">line-height</span><span class="selector-pseudo">:2px</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>添加!important<br>  只要在任何要添加“!important”的CSS缩写代码后面添加“!”后缀就可以啦！</p>
  <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    <span class="selector-tag">p</span>!+<span class="selector-tag">m10e</span>!</div></pre></td></tr></table></figure>
<p>  生成</p>
  <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">    <span class="selector-tag">padding</span>: !<span class="selector-tag">important</span>;</div><div class="line">    <span class="selector-tag">margin</span>: 10<span class="selector-tag">em</span> !<span class="selector-tag">important</span>;</div></pre></td></tr></table></figure>
<p>  Tip：<br>  +不仅在HTML中有作用哦，在CSS中，如果要你连续写多个属性值对，也可以用+进行连接。</p>
</li>
<li><p>自动前缀</p>
  <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    <span class="selector-tag">bdrs</span></div></pre></td></tr></table></figure>
<p>  生成</p>
  <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">    <span class="selector-tag">-webkit-border-radius</span>: ;</div><div class="line">    <span class="selector-tag">-moz-border-radius</span>: ;</div><div class="line">    <span class="selector-tag">border-radius</span>: ;</div></pre></td></tr></table></figure>
<p>  生成指定的某个前缀</p>
  <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    <span class="selector-tag">-wm-trf</span></div></pre></td></tr></table></figure>
<p>  生成</p>
  <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">    <span class="selector-tag">-webkit-transform</span>: ;</div><div class="line">    <span class="selector-tag">-moz-transform</span>: ;</div><div class="line">    <span class="selector-tag">transform</span>: ;</div></pre></td></tr></table></figure>
<p>  各个前缀的缩写如下：</p>
  <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">    <span class="selector-tag">w</span>: <span class="selector-tag">webkit</span></div><div class="line">    <span class="selector-tag">m</span>: <span class="selector-tag">moz</span></div><div class="line">    <span class="selector-tag">s</span>: <span class="selector-tag">ms</span></div><div class="line">    <span class="selector-tag">o</span>: <span class="selector-tag">o</span></div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Emmet是一款编辑器插件，必须要基于某个编辑器使用，能快速完成代码的编写。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://heji.website/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="web前端" scheme="http://heji.website/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="工具" scheme="http://heji.website/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>HTML-DOM教程</title>
    <link href="http://heji.website/2016/12/20/HTML-DOM%E6%95%99%E7%A8%8B/"/>
    <id>http://heji.website/2016/12/20/HTML-DOM教程/</id>
    <published>2016-12-20T11:47:21.732Z</published>
    <updated>2016-12-21T08:53:30.804Z</updated>
    
    <content type="html"><![CDATA[<p>DOM是W3C的标准，是与语言无关的通用的用于操作文档的一种技术规范。</p>
<a id="more"></a>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="什么是DOM"><a href="#什么是DOM" class="headerlink" title="什么是DOM"></a>什么是DOM</h3><p>DOM是W3C的标准。DOM定义了访问HTML和XML文档的标准：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;W3C 文档对象模型 （DOM） 是中立于平台和语言的接口，它允许程序和脚本动态地访问和更新文档的内容、结构和样式。&quot;</div></pre></td></tr></table></figure></p>
<p>W3C DOM标准被分为3个不同的部分：</p>
<ul>
<li>核心DOM-针对任何结构化文档的标准模型</li>
<li>XMLDOM-针对XML文档的标准模型</li>
<li>HTMLDOM-针对HTML文档的标准模型</li>
</ul>
<p><strong>注：DOM是Document Object Model(文档对象模型)的缩写</strong></p>
<h3 id="理解DOM-Level以及兼容性"><a href="#理解DOM-Level以及兼容性" class="headerlink" title="理解DOM Level以及兼容性"></a>理解DOM Level以及兼容性</h3><h4 id="DOM-Level"><a href="#DOM-Level" class="headerlink" title="DOM Level"></a>DOM Level</h4><p>DOM的标准化不是一蹴而就的，而是一步步地改进完善。DOM Level本质上是DOM标准化过程中的不同版本。分为1级DOM、2级DOM、3级DOM以及“0级”DOM。</p>
<ul>
<li>1级DOM<br>1级DOM在1998年10月份成为W3C的提议，由DOM核心与DOM HTML两个模块组成。DOM核心能映射以XML为基础的文档结构，允许获取和操作文档的任意部分。DOM HTML通过添加HTML专用的对象与函数对DOM核心进行了扩展。</li>
<li>2级DOM<br>鉴于1级DOM仅以映射文档结构为目标，DOM 2级面向更为宽广。通过对原有DOM的扩展，2级DOM通过对象接口增加了对鼠标和用户界面事件（DHTML长期支持鼠标与用户界面事件）、范围、遍历（重复执行DOM文档）和层叠样式表（CSS）的支持。同时也对DOM 1的核心进行了扩展，从而可支持XML命名空间。</li>
<li>3级DOM<br>3级DOM通过引入统一方式载入和保存文档和文档验证方法对DOM进行进一步扩展，DOM3包含一个名为“DOM载入与保存”的新模块，DOM核心扩展后可支持XML1.0的所有内容，包括XML Infoset、 XPath、和XML Base。</li>
<li>“0级”DOM<br>当阅读与DOM有关的材料时，可能会遇到参考0级DOM的情况。需要注意的是并没有标准被称为0级DOM，它仅是DOM历史上一个参考点（0级DOM被认为是在Internet Explorer 4.0 与Netscape Navigator4.0支持的最早的DHTML）。</li>
</ul>
<h4 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h4><p>每一个DOM Level都有描述它的标准和文档，但他们并没有被完整地实现，浏览器只是简单地挑选了其中的有用功能，而且，已经实现的功能之间还存在某种程度的不一致性。<br>有多种方式应对DOM功能的多变性：</p>
<ol>
<li>使用JavaScript库<br>JavaScript库消除了浏览器之间实现方式的差别，优点是其一致性，缺点是只能使用库支持的那些功能。</li>
<li>保守方式<br>只使用你所知的被广泛支持的那些功能。</li>
<li><p>测试DOM功能<br> 第三种方式是测试与某一功能相关的DOM对象属性或方法是否存在。</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">var</span> images;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">document</span>.querySelectorAll)&#123;</div><div class="line">      images = <span class="built_in">document</span>.querySelectorAll(<span class="string">"#paratext &gt; img"</span>);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">      images = <span class="built_in">document</span>.getElementById(<span class="string">"paratext"</span>).getElementsByTagName(<span class="string">"img"</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p> 缺陷是充斥大量测试代码，且并不总是存在另一种方式能实现某个给定功能的效果。</p>
</li>
</ol>
<p><strong>在这篇文章，我们主要学习的是HTMLDOM，HTML DOM 定义了所有 HTML 元素的<em>对象</em>和<em>属性</em>，以及访问它们的<em>方法</em>。</strong></p>
<h2 id="使用Document对象"><a href="#使用Document对象" class="headerlink" title="使用Document对象"></a>使用Document对象</h2><p>DOM的一个关键组成部分就是Document对象。Document对象是通往DOM功能的入口，它向你提供了当前文档的信息，以及一组可供探索、导航、搜索或操作结构与内容的功能。<br>我们通过变量document访问Document对象，它是浏览器为我们创建的关键对象之一。</p>
<h3 id="使用Document元数据"><a href="#使用Document元数据" class="headerlink" title="使用Document元数据"></a>使用Document元数据</h3><p>Document对象的用途之一是向你提供关于文档的信息。下表介绍了你可以用来获取文档元数据的属性。<br><img src="index_files/2a3d6ac2-be28-4a8c-993d-53638e53871f.jpg" alt=""></p>
<ul>
<li><p>获取文档信息</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">    <span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">            <span class="built_in">document</span>.writeln(<span class="string">"&lt;pre&gt;"</span>);</div><div class="line">            <span class="built_in">document</span>.writeln(<span class="string">"characterSet:"</span>+<span class="built_in">document</span>.characterSet); <span class="comment">//只读</span></div><div class="line">            <span class="built_in">document</span>.writeln(<span class="string">"charset:"</span>+<span class="built_in">document</span>.charset); <span class="comment">//读取</span></div><div class="line">            <span class="built_in">document</span>.writeln(<span class="string">"compatMode:"</span>+<span class="built_in">document</span>.compatMode); </div><div class="line">            <span class="built_in">document</span>.writeln(<span class="string">"defaultCharset:"</span>+<span class="built_in">document</span>.defaultCharset);</div><div class="line">            <span class="built_in">document</span>.writeln(<span class="string">"domain:"</span>+<span class="built_in">document</span>.domain);</div><div class="line">            <span class="built_in">document</span>.writeln(<span class="string">"referrer:"</span>+<span class="built_in">document</span>.referrer);</div><div class="line">            <span class="built_in">document</span>.writeln(<span class="string">"lastModified:"</span>+<span class="built_in">document</span>.lastModified);</div><div class="line">            <span class="built_in">document</span>.writeln(<span class="string">"cookie:"</span>+<span class="built_in">document</span>.cookie);</div><div class="line">            <span class="built_in">document</span>.writeln(<span class="string">"&lt;/pre&gt;"</span>);</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>  理解怪异模式<br>  compatMode属性告诉你浏览器是如何处理文档内容的。现如今存在着大量的非标准HTML，浏览器则试图显示这类网页，哪怕它们并不遵循HTML规范。一些这样的内容依赖于浏览器的特殊功能，而这些功能来源于浏览器依靠自身特点（而非遵循标准）进行竞争的年代。compatMode属性会返回两个值中的一个。</p>
  <table><thead><tr><th>值</th><th>说明</th></tr><thead><tbody><tr><td> CSS1Compat </td><td>此文档遵循某个有效的HTML规范（不必是HTML5规范）</td></tr><tr><td> BackCompat </td><td>此文档含有非标准功能，已触发怪异模式</td></tr></tbody></thead></thead></table>
</li>
<li><p>使用Location对象<br>  document.location属性返回一个Location对象，这个对象给你提供了细粒度的文档地址信息，也允许你导航到其他文档上。<br>  <img src="index_files/44115d5b-91d5-446a-a0b2-7a4f02d79d20.jpg" alt=""><br>  使用Location对象导航到其他地方</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">    <span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"bananaBtn"</span>&gt;</span>链接到香蕉<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"testAssign"</span>&gt;</span>assign页面跳转<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"testReplace"</span>&gt;</span>replace页面跳转<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"banana"</span> <span class="attr">style</span>=<span class="string">"position: relative;top: 2000px;"</span>&gt;</span></div><div class="line">        此处应该有香蕉</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">            <span class="comment">//等价于&lt;a href="#banana"&gt;链接到香蕉&lt;/a&gt;</span></div><div class="line">            <span class="built_in">document</span>.getElementById(<span class="string">"bananaBtn"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="built_in">document</span>.location.hash = <span class="string">"banana"</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">document</span>.getElementById(<span class="string">"testAssign"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="built_in">document</span>.location.assign(<span class="string">"https://www.google.com.hk"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">document</span>.getElementById(<span class="string">"testReplace"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="comment">//使用replace在浏览历史找不到，无法返回上一个页面</span></div><div class="line">                <span class="built_in">document</span>.location.replace(<span class="string">"https://www.google.com.hk"</span>);</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>读取和写入cookie<br>  cookie属性让你可以读取、添加和更新文档所关联的cookie。当读取cookie属性的值时，会得到与文档相关联的所有cookie。cookie的形式为name=value，如果存在多个cookie，以分号相隔。操作cookie的方法是直接给cookie属性赋值，如果要添加的cookie在现有cookie集合中没有，则添加的cookie新增到现有的cookie集合，否则会更新现有cookie。下面是完整示例：</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">    &lt;!DOCTYPE html&gt;</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"cookieData"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"addCookie"</span>&gt;</span>添加cookie<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"updateCookie"</span>&gt;</span>更新最后一个cookie<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">            <span class="keyword">var</span> counter = <span class="number">0</span>;</div><div class="line">            readCookie();</div><div class="line">            <span class="built_in">document</span>.getElementById(<span class="string">"addCookie"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                counter++;</div><div class="line">                <span class="built_in">document</span>.cookie = <span class="string">"cookie_"</span>+counter+<span class="string">"=value_"</span>+counter;</div><div class="line">                readCookie();</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">document</span>.getElementById(<span class="string">"updateCookie"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="built_in">document</span>.cookie = <span class="string">"cookie_"</span>+counter+<span class="string">"=update_"</span>+counter;</div><div class="line">                readCookie();</div><div class="line">            &#125;</div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">readCookie</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="built_in">document</span>.getElementById(<span class="string">"cookieData"</span>).innerHTML = <span class="built_in">document</span>.cookie;</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>  虽然添加cookie的默认形式是name=value，但可以额外应用一些数据改变cookie的处理方式<br>  <img src="index_files/ce20ba02-a003-4b34-b9ae-660cd08030e0.jpg" alt=""></p>
</li>
<li>理解就绪状态<br>  document.readyState属性向你提供了加载和解析HTML文档过程中当前处于哪个阶段的信息。了解浏览器加载和处理HTML到了哪个阶段可能会很有用。readyState属性会返回三个不同的值。<br>  <table><thead><tr><th>值</th><th>说明</th></tr><thead><tbody><tr><td> loading </td><td>浏览器正在加载和处理此文档</td></tr><tr><td> interactive </td><td>文档已被解析，但浏览器还在加载其中链接的资源（图像媒体文件等）</td></tr><tr><td> complete </td><td>文档解析完，资源也加载完</td></tr></tbody></thead></thead></table><br>  这个属性和readystatechange事件结合使用时用处最大，该事件会在每次readyState属性的值发生变化时触发。  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">    &lt;!DOCTYPE html&gt;</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">            <span class="built_in">document</span>.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="built_in">document</span>.readyState);</div><div class="line">                <span class="keyword">if</span>(<span class="built_in">document</span>.readyState==<span class="string">"interactive"</span>)&#123;</div><div class="line">                    <span class="built_in">document</span>.getElementById(<span class="string">"pressme"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                        <span class="built_in">document</span>.getElementById(<span class="string">"results"</span>).innerHTML = <span class="string">"Button Pressed"</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"pressme"</span>&gt;</span>Press me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">pre</span> <span class="attr">id</span>=<span class="string">"results"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">pre</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>获取DOM的实现情况<br>document.implementation属性提供了浏览器对DOM功能的实现信息，这个属性返回一个DOMImplementation对象，对象有一个hasFeature方法，这个方法可以用来判断哪些DOM功能已实现。</li>
</ul>
<h3 id="获取HTML元素对象"><a href="#获取HTML元素对象" class="headerlink" title="获取HTML元素对象"></a>获取HTML元素对象</h3><ul>
<li><p>使用属性获取元素对象<br>  Document对象提供了一组属性，它们会返回文档中特定元素或元素类型的对象。<br>  <img src="index_files/c8bf8a8a-63d9-46f3-884a-763dbb18d481.jpg" alt=""><br>  使用namedItem方法<br>  namedItem方法会返回集合里带有指定id或name属性值的项目。例如：</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">//返回id或name属性值为apple的图片的src。优先返回匹配id属性的元素，如果没有匹配id的元素，则返回第一个匹配name属性的元素，如果还是没有，返回null</span></div><div class="line">    <span class="built_in">document</span>.images.namedItem(<span class="string">"apple"</span>).src;</div></pre></td></tr></table></figure>
</li>
<li><p>搜索元素<br>  Document对象定义了很多方法，可以用他们搜索文档里的元素。</p>
  <table><thead><tr><th> 属性 </th><th>说明</th><th> 返回 </th></tr><thead><tbody><tr><td>getElementById(id)</td><td>返回带有指定id值的元素</td><td> HTMLElement </td></tr><tr><td>getElementsByClassName(class)</td><td>返回带有指定class类的元素</td><td> 数组 </td></tr><tr><td>getElementsByName(name)</td><td> 返回带有指定name值的元素 </td><td> 数组 </td></tr><tr><td>getElementsByTagName(tag)</td><td> 返回指定类型的元素 </td><td> 数组 </td></tr><tr><td>getElementsByName(name)</td><td> 返回带有指定name值的元素 </td><td> 数组 </td></tr><tr><td>querySelector(selector)</td><td> 返回匹配指定CSS选择器的第一个元素 </td><td>HTMLElement</td></tr><tr><td>querySelectorAll(selector)</td><td>返回匹配指定CSS选择器的所有元素</td><td> 数组 </td></tr></tbody></thead></thead></table>
</li>
<li><p>合并进行链式搜索<br>  DOM的一个使用功能是几乎所有的Document对象实现的搜索方法同时也能被HTMLElement对象实现（一个例外），这让你可以合并进行链式搜索。唯一的例外是getElementById方法，只有Document对象才能使用它。例如：</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"tblock"</span>).getElementsByTagName(<span class="string">"span"</span>);</div><div class="line">    <span class="comment">//等价于</span></div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"tblock"</span>).querySelectorAll(<span class="string">"span"</span>);</div><div class="line">    <span class="comment">//等价于</span></div><div class="line">    <span class="built_in">document</span>.querySelectorAll(<span class="string">"#tblock &gt; span"</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="在DOM树里导航"><a href="#在DOM树里导航" class="headerlink" title="在DOM树里导航"></a>在DOM树里导航</h3><p>另一种搜索元素的方法是将DOM视为一棵树，然后在它的层级结构里导航。所有的DOM对象都支持一组属性和方法来让我们做到这一点。<br><img src="index_files/1c7d1dc8-2ea0-4e46-8835-2cde3613fc34.jpg" alt=""></p>
<h2 id="使用Window对象"><a href="#使用Window对象" class="headerlink" title="使用Window对象"></a>使用Window对象</h2><h3 id="获取window对象"><a href="#获取window对象" class="headerlink" title="获取window对象"></a>获取window对象</h3><p>可以用两种方式获得window对象。正规的HTML5方式是在Document对象上使用defaultView属性。另一种是使用所有浏览器都支持的全局变量window。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.outerWidth);</div><div class="line"><span class="comment">//等价于</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.defaultView.outerHeight);</div></pre></td></tr></table></figure></p>
<h3 id="获取窗口信息"><a href="#获取窗口信息" class="headerlink" title="获取窗口信息"></a>获取窗口信息</h3><p>顾名思义，Window对象的基本功能涉及到当前文档所显示的窗口。下表列出了这些功能的属性和方法。</p>
<p><img src="index_files/d32ac75b-3743-4788-b758-d09d56200b6d.jpg" alt=""><br><img src="index_files/7726888c-bc8a-40f0-9185-c7fe050088e2.jpg" alt=""></p>
<p>screen对象的宽高取决于屏幕大小，与浏览器窗口大小无关，window对象的宽高取决于浏览器窗口的大小。</p>
<h3 id="与窗口进行交互"><a href="#与窗口进行交互" class="headerlink" title="与窗口进行交互"></a>与窗口进行交互</h3><p>Window对象提供了一组方法，可以用它们与包含文档的窗口进行交互。</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
<th>返回</th>
</tr>
</thead>
<tbody>
<tr>
<td>blur()</td>
<td>让窗口失去键盘焦点</td>
<td>void</td>
</tr>
<tr>
<td>close()</td>
<td>关闭窗口</td>
<td>void</td>
</tr>
<tr>
<td>focus()</td>
<td>让窗口获得键盘焦点</td>
<td>void</td>
</tr>
<tr>
<td>print()</td>
<td>提示用户打印页面</td>
<td>void</td>
</tr>
<tr>
<td>scrollBy(x,y)</td>
<td>让文档相对于当前位置进行滚动</td>
<td>void</td>
</tr>
<tr>
<td>scrollTo(x,y)</td>
<td>滚动到指定的位置</td>
<td>void</td>
</tr>
<tr>
<td>stop()</td>
<td>停止加载文档</td>
<td>void</td>
</tr>
</tbody>
</table>
<p>这些方法应该谨慎使用，因为它们会让用户失去对浏览器窗口的控制。</p>
<h3 id="对用户进行提示"><a href="#对用户进行提示" class="headerlink" title="对用户进行提示"></a>对用户进行提示</h3><p>Window对象包含一组方法，能以不同的方式对用户进行提示。<br><img src="index_files/943ed4c3-746d-435b-b55f-1788c5eea0fc.jpg" alt=""></p>
<p>下面是例子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">            <span class="keyword">var</span> confirmd = <span class="built_in">window</span>.confirm(<span class="string">"哈哈哈"</span>);</div><div class="line">            <span class="built_in">console</span>.log(confirmd); <span class="comment">//true or false</span></div><div class="line">            <span class="keyword">var</span> responseText = <span class="built_in">window</span>.prompt(<span class="string">"Enter a word"</span>,<span class="string">"hello"</span>);</div><div class="line">            <span class="built_in">console</span>.log(responseText);  <span class="comment">//hello是默认值</span></div><div class="line">            <span class="comment">//window.showModalDialog("animation.html"); //已不支持</span></div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="获取基本信息"><a href="#获取基本信息" class="headerlink" title="获取基本信息"></a>获取基本信息</h3><p>Window对象让你能访问某些返回基本信息的对象。下表是返回的对象：<br><img src="index_files/bea626a9-00bd-435d-8ae3-980365be7e8a.jpg" alt=""><br>Document对象和Location对象之前已经讲过，下面介绍History对象。</p>
<h3 id="使用浏览器历史"><a href="#使用浏览器历史" class="headerlink" title="使用浏览器历史"></a>使用浏览器历史</h3><p>window.history属性返回一个History对象，你可以用它对浏览器历史进行一些基本的操作。<br><img src="index_files/003ae2a2-7539-4629-b109-234a6c42ee1e.jpg" alt=""></p>
<ul>
<li>在浏览历史中导航<br>back、forward和go这三个方法告诉浏览器该导航到浏览历史中的哪个URL上。back/forward方法的效果和浏览器的后退/前进按钮是一致的。go方法会导航至当前文档的某个浏览历史位置。正值表示浏览器应该在浏览历史中前进，负值则表示后退。</li>
<li><p>在浏览历史里插入条目<br>  History.pushState方法允许我们给浏览器历史添加一个URL，但有一些约束条件。URL的服务器名称和端口号必须与当前文档的相同。例：</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    <span class="built_in">window</span>.history.push(<span class="string">""</span>,<span class="string">""</span>,<span class="string">"?#"</span>+event.target.id);</div></pre></td></tr></table></figure>
<p>  当向浏览器历史添加条目时，不需要局限于当前页面，可以指定任何URL，只需要来源和当前文档相同即可。例如：</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">    <span class="built_in">window</span>.history.push(<span class="string">""</span>,<span class="string">""</span>,<span class="string">"otherpage.html?#"</span>+event.target.id);</div></pre></td></tr></table></figure>
<p>  添加条目之后，导航框显示的是另一个文档的URL，但文档本身没有变化。如果用户导航至别的文档，然后点击后退时，浏览器会自行选择显示原来的文档还是指定的文档（otherpage.html）</p>
</li>
</ul>
<h3 id="使用跨文档消息传递（重要）"><a href="#使用跨文档消息传递（重要）" class="headerlink" title="使用跨文档消息传递（重要）"></a>使用跨文档消息传递（重要）</h3><p>Window对象还为另一种名为“跨文档消息传递”的HTML5新功能提供了入口。通常，不同来源（协议不同或主机不同或端口不同）的脚本是不允许进行通信的。但HTML5通过Window里的方法为这类通信提供了一种规范。</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
<th>返回</th>
</tr>
</thead>
<tbody>
<tr>
<td>postMessage(msg,origin)</td>
<td>给另一个文档发送指定的消息</td>
<td>void</td>
</tr>
</tbody>
</table>
<p>下面是详细例子：</p>
<ul>
<li><p>postMessage.html文档</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">    <span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"satus"</span>&gt;</span>Ready<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"send"</span>&gt;</span>Send message<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--不同源文档通信,这里端口号不同,本文档使用8030端口--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">"main"</span> <span class="attr">name</span>=<span class="string">"main"</span> <span class="attr">src</span>=<span class="string">"http://127.0.0.1:8888/otherpage.html"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">            <span class="built_in">document</span>.getElementById(<span class="string">"send"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="comment">//window对象的postMessage方法,第一个参数是数据,第二个参数是origin</span></div><div class="line">                <span class="built_in">window</span>[<span class="string">"main"</span>].postMessage(<span class="string">"I like apples"</span>,<span class="string">"http://127.0.0.1:8888"</span>);</div><div class="line">                <span class="built_in">document</span>.getElementById(<span class="string">"satus"</span>).innerHTML = <span class="string">"Message sent"</span>;</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>otherpage.html文档</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">    <span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">            <span class="built_in">window</span>.addEventListener(<span class="string">"message"</span>,receiveMessage,<span class="literal">false</span>);</div><div class="line">            <span class="comment">//接收消息</span></div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">receiveMessage</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">                <span class="comment">//e.orgin表示消息来源</span></div><div class="line">                <span class="keyword">if</span>(e.origin==<span class="string">"http://127.0.0.1:8030"</span>)&#123;</div><div class="line">                    <span class="comment">//e.data表示接收的数据</span></div><div class="line">                    displayMessage(e.data);</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    displayMessage(<span class="string">"Message discarded!"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//显示消息</span></div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">displayMessage</span>(<span class="params">msg</span>)</span>&#123;</div><div class="line">                <span class="built_in">document</span>.getElementById(<span class="string">"message"</span>).innerHTML = msg;</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>注意上例中，window[“main”]可以获取到name属性为main的iframe的window对象。此外，Window对象还提供了其他寻找嵌入文档所需的支持，见下表：<br><img src="index_files/e7a361ef-86e9-43c1-b0b8-28e839998c72.jpg" alt=""><br><code>message</code>事件返回的MessageEvent对象的属性：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
<th>返回</th>
</tr>
</thead>
<tbody>
<tr>
<td>data</td>
<td>返回别的脚本发送的消息</td>
<td>对象</td>
</tr>
<tr>
<td>origin</td>
<td>返回发送消息脚本的来源</td>
<td>字符串</td>
</tr>
<tr>
<td>source</td>
<td>返回发送消息脚本所关联的窗口</td>
<td>Window</td>
</tr>
</tbody>
</table>
<h3 id="使用计时器"><a href="#使用计时器" class="headerlink" title="使用计时器"></a>使用计时器</h3><p>Window对象提供了一个有用功能是可以设置一次性和循环的计时器。这些计时器被用于在预设的时间段后执行某个函数。</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
<th>返回</th>
</tr>
</thead>
<tbody>
<tr>
<td>clearInterval(id)</td>
<td>撤销某个时间间隔计时器</td>
<td>void</td>
</tr>
<tr>
<td>clearTimeout(id)</td>
<td>撤销某个超时计时器</td>
<td>void</td>
</tr>
<tr>
<td>setInterval(function,time)</td>
<td>创建一个计时器，每隔time毫秒循环调用指定函数</td>
<td>计时器的id</td>
</tr>
<tr>
<td>setTimeout(function,time)</td>
<td>创建一个计时器，等待time毫秒之后调用指定的函数</td>
<td>计时器的id</td>
</tr>
</tbody>
</table>
<h2 id="使用DOM元素"><a href="#使用DOM元素" class="headerlink" title="使用DOM元素"></a>使用DOM元素</h2><h3 id="使用对象元素"><a href="#使用对象元素" class="headerlink" title="使用对象元素"></a>使用对象元素</h3><p>HTMLElement对象提供了一组属性，你可以用它们来读取和修改被代表元素的数据。<br><img src="index_files/5fbc7630-3d65-4785-9f68-d8873fcbfaaf.jpg" alt=""><br><strong>注意：诸如element.id之类获取元素属性的方法是HTML-DOM的内容，也就是说，这种写法只在HTML文档中能正常使用</strong></p>
<ul>
<li><p>使用类<br>  有两种方式处理某个元素所属的类。第一种方式是使用className属性。它会返回一个字符串形式的类列表。通过改变这个字符串的值，你就能添加或移除类。</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">//在原有基础上添加一个newClass的类</span></div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"textBlock"</span>).className += <span class="string">" newClass"</span>;</div></pre></td></tr></table></figure>
<p>  当想要快速给某个元素添加类时，使用className属性很方便，但如果想移除一个类时，用classList属性更方便，它返回一个DOMTokenList对象，这个对象定义了一些有用的属性和方法来管理类列表。<br>  <img src="index_files/5f47e41e-49c4-4f92-b439-8bc2adbf859e.jpg" alt=""></p>
</li>
<li>使用元素属性<br>  HTMLElement对象既有一些属性来对应最重要的HTML全局属性，又支持对单个元素的任意属性进行读取和设置。<br>  <img src="index_files/2bbc15b4-4a5b-41a3-803b-c5323dd4f6b5.jpg" alt=""><ol>
<li>使用以data-开头的自定义属性<br>使用HTMLElement对象的dataset属性返回的是一个由所有data-开头的属性值组成的数组，其索引根据的是名称的自定义部分。如果要获取elem元素的data-fruit属性的值，可以使用<code>elem.dataset[&quot;fruit&quot;]</code></li>
<li>使用所有属性<br>可以通过attributes属性获取一个包含元素所有属性的集合。它会返回一个由Attr对象组成的数组。Attr对象包含name属性和value属性，分别对应属性名和属性值。下面是例子：<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">    &lt;!DOCTYPE html&gt;</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">            <span class="keyword">var</span> attrs = <span class="built_in">document</span>.getElementById(<span class="string">"text"</span>).attributes;</div><div class="line">            <span class="built_in">console</span>.log(attrs);</div><div class="line">            <span class="built_in">console</span>.log(attrs[<span class="string">"id"</span>].name,attrs[<span class="string">"id"</span>].value);</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
<h3 id="使用Text对象"><a href="#使用Text对象" class="headerlink" title="使用Text对象"></a>使用Text对象</h3><p>元素的文本内容是由Text对象代表的。它在文档模型里表现为元素的子对象。当文本中包含元素时，如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">            测试Text对象及文本中的<span class="tag">&lt;<span class="name">b</span>&gt;</span>元素<span class="tag">&lt;/<span class="name">b</span>&gt;</span>.Text对象</div><div class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">            <span class="keyword">var</span> pElement = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"p"</span>)[<span class="number">0</span>];</div><div class="line">            <span class="comment">//3个子节点,包含两个文本节点,一个元素节点</span></div><div class="line">            <span class="built_in">console</span>.log(pElement.childNodes.length);</div><div class="line">            <span class="comment">//打印"测试Text对象及文本中的",注意,包含空格和换行符。</span></div><div class="line">            <span class="built_in">console</span>.log(pElement.firstChild.nodeValue);</div><div class="line">            <span class="comment">//打印".Text对象",注意,包含空格和换行符。</span></div><div class="line">            <span class="built_in">console</span>.log(pElement.lastChild.nodeValue);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; pElement.childNodes.length ; i++)&#123;</div><div class="line">                <span class="comment">//元素节点的nodeType是1</span></div><div class="line">                <span class="keyword">if</span>(pElement.childNodes[i].nodeType==<span class="number">1</span>)&#123;</div><div class="line">                    <span class="comment">//打印"元素"</span></div><div class="line">                    <span class="built_in">console</span>.log(pElement.childNodes[i].firstChild.nodeValue);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>DOM模型如下图：<br><img src="index_files/04215fe1-e392-4048-89ea-a012c1e88f6d.jpg" alt=""><br>Text对象包含了一些操作对象的方法或属性：<br><img src="index_files/f26d0172-46dc-49d9-afe8-b382e67ff534.jpg" alt=""></p>
<h3 id="修改模型"><a href="#修改模型" class="headerlink" title="修改模型"></a>修改模型</h3><p>在前面的章节中，我们之所以能修改元素的属性和文本，是因为文档自身和DOM之间有着实时的连接。一旦你对DOM做了改动，浏览器就会让文档发生相应的变化。你也可以利用这一点改变DOM的层级结构，因为连接是实时的，你对DOM层级结构的修改会立即反映到浏览器中。<br>下面介绍了可用于修改DOM层级结构的属性和方法：</p>
<table>
<thead>
<tr>
<th>成员</th>
<th>说明</th>
<th>返回</th>
</tr>
</thead>
<tbody>
<tr>
<td>appendChild(HTMLElement)</td>
<td>将指定元素添加为当前元素的子元素</td>
<td>添加的HTMLElement</td>
</tr>
<tr>
<td>cloneNode(boolean)</td>
<td>复制一个元素，参数指定是否复制子元素</td>
<td>复制出来的HTMLElement</td>
</tr>
<tr>
<td>innerHTML</td>
<td>获取或设置元素的内容</td>
<td>内容字符串</td>
</tr>
<tr>
<td>insertAdjacentHTML(pos,HTML片段)</td>
<td>相对于元素插入HTML片段</td>
<td>void</td>
</tr>
<tr>
<td>insertBefore(newElem,childElem)</td>
<td>在第二个子元素之前插入第一个元素</td>
<td>被插入的HTMLElement</td>
</tr>
<tr>
<td>isEqualNode(HTMLElement)</td>
<td>判断参数指定的元素是否与当前元素相同</td>
<td>布尔值</td>
</tr>
<tr>
<td>isSameNode(HTMLElement)</td>
<td>判断指定元素是否就是当前元素</td>
<td>布尔值</td>
</tr>
<tr>
<td>outerHTML</td>
<td>获取或设置元素的HTML和内容</td>
<td>元素及其内容字符串</td>
</tr>
<tr>
<td>removeChild(HTMLElement)</td>
<td>从当前元素上移除指定的子元素</td>
<td>返回移除的HTMLElement</td>
</tr>
<tr>
<td>replaceChild(newElem,oldElem)</td>
<td>替换当前元素的某个子元素</td>
<td>返回被替换的HTMLElement</td>
</tr>
</tbody>
</table>
<p>这些属性和方法对所有的元素对象都是适用的，另外，<strong>document对象</strong>定义了两个用于创建新元素的方法：</p>
<table>
<thead>
<tr>
<th>成员</th>
<th>说明</th>
<th>返回</th>
</tr>
</thead>
<tbody>
<tr>
<td>createElement(tag)</td>
<td>创建一个属于指定标签类型的HTMLElement对象</td>
<td>HTMLElement</td>
</tr>
<tr>
<td>createTextNode(text)</td>
<td>创建一个带有指定内容的新的Text对象</td>
<td>Text</td>
</tr>
</tbody>
</table>
<ul>
<li><p>创建和删除元素<br>  你需要通过document对象创建新的元素，然后找到一个现存的HTMLElement，通过之前介绍的方法来插入它们。</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">    &lt;!DOCTYPE html&gt;</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>banana<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>yellow<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>apple<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>red/green<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"add"</span>&gt;</span>add<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"remove"</span>&gt;</span>remove<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">            <span class="keyword">var</span> tbody = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"tbody"</span>)[<span class="number">0</span>];</div><div class="line">            <span class="built_in">document</span>.getElementById(<span class="string">"add"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> newTr = <span class="built_in">document</span>.createElement(<span class="string">"tr"</span>);</div><div class="line">                newTr.setAttribute(<span class="string">"id"</span>,<span class="string">"newTr"</span>);</div><div class="line">                <span class="comment">//appendChild方法返回的是被插入的元素</span></div><div class="line">                newTr.appendChild(<span class="built_in">document</span>.createElement(<span class="string">"td"</span>))</div><div class="line">                .appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">"orange"</span>));</div><div class="line">                newTr.appendChild(<span class="built_in">document</span>.createElement(<span class="string">"td"</span>))</div><div class="line">                .appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">"orange"</span>));</div><div class="line">                tbody.appendChild(newTr);</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">document</span>.getElementById(<span class="string">"remove"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                tbody.removeChild(<span class="built_in">document</span>.getElementById(<span class="string">"newTr"</span>));</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>复制元素<br>  可以使用cloneNode方法来复制现有元素，cloneNode方法的布尔值参数指定了是否应该同时复制该元素的所有子元素，方法返回复制出来的元素。</p>
</li>
<li><p>移动元素<br>  要把元素从文档的一处移动到另一处，需要做的仅仅是把待移动的元素关联到新的父元素上，而不需要让该元素脱离它的初始位置。例如，把一张表格id为apple的行移动到另一张id为others的表格：</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">var</span> elem = <span class="built_in">document</span>.getElementById(<span class="string">"apple"</span>);</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"others"</span>).appendChild(elem);</div></pre></td></tr></table></figure>
</li>
<li><p>比较元素对象<br>  可以通过两种方式比较元素对象。第一种方式是比较他们是否是同一个元素，使用isSameNode方法。另一种方式是使用isEqualNode方法测试元素对象是否相同。如果多个元素具有相同的类型，带有相同的属性，其子元素也相同并且排列顺序一致，那么他们就是相同元素。</p>
</li>
<li>使用HTML片段<br>  innerHTML属性，outerHTML属性和insertAdjacentHTML方法都是便利的语法捷径，它们让你能够使用HTML片段，从而不再需要创建元素和文本对象的详细层级结构。<ol>
<li>innerHTML和outerHTML<br>outerHTML属性返回一个字符串，它包含定义这个元素及其所有子元素的HTML。innerHTML属性只返回子元素的HTML。也可以通过设置outerHTML和innerHTML属性改变文档结构。</li>
<li>使用insertAdjacentHTML插入HTML片段（重要）<br>innerHTML和outerHTML属性对于替换现有的元素而言是很有用的，但是如果想要用HTML片段来插入新元素，就必须使用insertAdjacentHTML方法。方法接受两个参数，第一个参数是片段应该插入到相当当前元素哪个位置，第二个参数是要插入的片段。<br>第一个参数取值如下：<table><thead><tr><th> 值 </th><th>说明</th></tr><thead><tbody><tr><td> afterbegin </td><td>将片段作为当前元素的第一个子元素插入</td></tr><tr><td> afterend </td><td>将片段插入当前元素之后</td></tr><tr><td> beforebegin </td><td> 将片段插入当前元素之前 </td></tr><tr><td> beforeend </td><td> 将片段作为当前元素最后一个子元素插入 </td></tr></tbody></thead></thead></table></li>
</ol>
</li>
<li>向文本块插入元素<br>  修改模型的另一种重要方式是向由Text对象代表的文本块添加元素。下面是一个复杂的例子：  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">    &lt;!DOCTYPE html&gt;</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"textblock"</span>&gt;</span>There are lots of different kinds of fruits.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"insert"</span>&gt;</span>Insert Element<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">            <span class="comment">//将一个元素插入文本块</span></div><div class="line">            <span class="built_in">document</span>.getElementById(<span class="string">"insert"</span>).onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> textBlock = <span class="built_in">document</span>.getElementById(<span class="string">"textblock"</span>);</div><div class="line">                <span class="comment">//返回lots of different kinds of fruits.</span></div><div class="line">                textBlock.firstChild.splitText(<span class="number">10</span>);</div><div class="line">                <span class="comment">//textBlock.childNodes[1]即lots of different kinds of fruits.</span></div><div class="line">                <span class="comment">//textBlock.childNodes[1].splitText(4)返回 of different kinds of fruits.</span></div><div class="line">                <span class="comment">//newText即lots</span></div><div class="line">                <span class="keyword">var</span> newText=textBlock.childNodes[<span class="number">1</span>].splitText(<span class="number">4</span>).previousSibling;</div><div class="line">                <span class="built_in">console</span>.log(textBlock,newText);</div><div class="line">                <span class="comment">//下面这句相当于创建了一个b元素并插入到lots节点之前，然后把lots节点移动到b元素内。</span></div><div class="line">                textBlock.insertBefore(<span class="built_in">document</span>.createElement(<span class="string">"b"</span>),newText).appendChild(newText);</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="为DOM元素设置样式"><a href="#为DOM元素设置样式" class="headerlink" title="为DOM元素设置样式"></a>为DOM元素设置样式</h2><p>这一章，展示如何使用DOM操作文档中的CSS样式，包括显示定义的，也包括浏览器用来实际显示元素的计算样式（computed style)。但不少DOM处理样式规范没被实现，这里只把焦点放在浏览器实际使用的那些上，并非本章所有内容都能在各种主流浏览器上运行。</p>
<h3 id="使用样式表"><a href="#使用样式表" class="headerlink" title="使用样式表"></a>使用样式表</h3><p>可以通过document.styleSheets属性访问文档中可用的CSS样式表，它会返回一组对象集合，这些对象代表了与文档关联的各个样式表。每个样式表（包括使用style元素定义和使用link元素定义的）都由一个CSSStyleSheet对象代表，它提供了一组属性和方法来操作文档里的样式表(部分属性没列举)：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
<th>返回</th>
</tr>
</thead>
<tbody>
<tr>
<td>disabled</td>
<td>获取或设置样式表的禁用状态</td>
<td>void</td>
</tr>
<tr>
<td>href</td>
<td>返回链接样式表的href,如果是style元素，返回null</td>
<td>字符串</td>
</tr>
<tr>
<td>media</td>
<td>返回应用到样式表上的媒介限制集合</td>
<td>MediaList</td>
</tr>
<tr>
<td>ownerNode</td>
<td>返回样式所定义的元素</td>
<td>HTMLElement（style或link）</td>
</tr>
<tr>
<td>title</td>
<td>返回title属性的值</td>
<td>字符串</td>
</tr>
<tr>
<td>type</td>
<td>返回type属性的值</td>
<td>字符串</td>
</tr>
</tbody>
</table>
<ul>
<li>获得样式表的基本信息<br>  使用CSSStyleSheet对象即可获取相应样式表的基本信息</li>
<li>使用媒介限制<br>  当定义样式表时，可以使用media属性来限制样式应用的场合。可以使用CSSStyleSheet.media属性访问这些限制，它会返回一个MediaList对象。下面是MediaList对象的方法和属性。  <table><thead><tr><th> 成员 </th><th>说明</th><th> 返回 </th></tr><thead><tbody><tr><td>appendMedium(medium)</td><td>添加一个新媒介到列表中</td><td>void</td></tr><tr><td>deleteMedium(medium)</td><td>从列表中移除一个媒介</td><td>void</td></tr><tr><td>item(pos)</td><td>返回指定索引的媒介</td><td> 字符串 </td></tr><tr><td> length </td><td>返回媒介的数量</td><td>数值</td></tr><tr><td> mediaText </td><td>返回media属性的文本值</td><td>字符串</td></tr></tbody></thead></thead></table></li>
<li><p>禁用样式表<br>  CSSStyleSheet.disabled属性可用来一次性启用和禁用某个样式表里的所有样式。</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"pressme"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">     <span class="built_in">document</span>.stylesheet[<span class="number">0</span>].disabled = !<span class="built_in">document</span>.stylesheet[<span class="number">0</span>].disabled;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>CSSRuleList对象的成员<br>  CSSStyleSheet.cssRules属性会返回一个CSSRuleList对象，它允许你访问样式表里的各种样式。下面是CSSRuleList对象的成员：<br>  <table><thead><tr><th> 成员 </th><th>说明</th><th> 返回 </th></tr><thead><tbody><tr><td>item(pos)</td><td>返回指定索引的CSS样式（花括号包裹的即为一个CSSStyleRule）</td><td> CSSStyleRule </td></tr><tr><td> length </td><td>返回样式表里的样式数量</td><td>数值</td></tr></tbody></thead></thead></table><br>  样式表里每一种样式都由一个CSSStyleRule对象代表，下面是CSSStyleRule对象的成员。<br>  <table><thead><tr><th> 成员 </th><th>说明</th><th> 返回 </th></tr><thead><tbody><tr><td> cssText </td><td>获取或设置样式的文本</td><td>字符串</td></tr><tr><td> parentStyleSheet </td><td>获取此样式所属的样式表</td><td> CSSStyleSheet </td></tr><tr><td> selectorText </td><td> 获取或设置样式的选择器文本 </td><td> 字符串 </td></tr><tr><td> style </td><td> 获取一个代表具体样式属性的对象 </td><td> CSSStyleDeclaration </td></tr></tbody></thead></thead></table><br>  下面是综合例子：</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">    <span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">            <span class="selector-id">#test</span>&#123;</div><div class="line">                <span class="attribute">color</span>: black;</div><div class="line">                <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="selector-id">#test</span> <span class="selector-tag">b</span>&#123;</div><div class="line">                <span class="attribute">color</span>: red;</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"test"</span> <span class="attr">style</span>=<span class="string">"font-weight: 400;"</span>&gt;</span></div><div class="line">            哈哈哈哈<span class="tag">&lt;<span class="name">b</span>&gt;</span>嘿嘿<span class="tag">&lt;/<span class="name">b</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">            <span class="keyword">var</span> CSSRule1 = <span class="built_in">document</span>.styleSheets[<span class="number">0</span>].cssRules.item(<span class="number">0</span>);</div><div class="line">            <span class="keyword">var</span> CSSRule2 = <span class="built_in">document</span>.styleSheets[<span class="number">0</span>].cssRules.item(<span class="number">1</span>);</div><div class="line">            <span class="comment">//#test &#123; color: black; background-color: rgb(204, 204, 204); &#125;</span></div><div class="line">            <span class="built_in">console</span>.log(CSSRule1.cssText);</div><div class="line">            <span class="comment">//#test b &#123; color: red; &#125;</span></div><div class="line">            <span class="built_in">console</span>.log(CSSRule2.cssText);</div><div class="line">            <span class="comment">//CSSRule1.style返回一个CSSStyleDeclaration对象</span></div><div class="line">            <span class="built_in">console</span>.log(CSSRule1.style.backgroundColor);</div><div class="line">            <span class="keyword">var</span> pObj = <span class="built_in">document</span>.getElementById(<span class="string">"test"</span>);</div><div class="line">            <span class="comment">//HTMLElement.style返回一个CSSStyleDeclaration对象，表示的是用style属性声明的样式</span></div><div class="line">            <span class="built_in">console</span>.log(pObj.style.fontWeight);</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="使用元素样式"><a href="#使用元素样式" class="headerlink" title="使用元素样式"></a>使用元素样式</h3><p>元素的style属性返回一个CSSStyleDeclaration对象，它表示通过元素style属性定义的样式。我们可以通过读取或设置cssText属性来读取或设置元素的样式，但这并不是一个很好的方法，下一节将会学习更健壮的方法。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"textblock"</span> <span class="attr">style</span>=<span class="string">"color:red;font-size:22px;"</span>&gt;</span>哈哈哈哈哈<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">            <span class="comment">//表示通过元素style属性定义的样式</span></div><div class="line">            <span class="keyword">var</span> styleDeclaration = <span class="built_in">document</span>.getElementById(<span class="string">"textblock"</span>).style;</div><div class="line">            <span class="built_in">console</span>.log(styleDeclaration.cssText);</div><div class="line">            <span class="comment">//这样设置会覆盖原有所有样式</span></div><div class="line">            styleDeclaration.cssText = <span class="string">"color:green;border:1px solid #ccc;"</span>;</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="使用CSSStyleDeclaration对象"><a href="#使用CSSStyleDeclaration对象" class="headerlink" title="使用CSSStyleDeclaration对象"></a>使用CSSStyleDeclaration对象</h3><p>你处理的是样式表还是某个元素的style属性并不重要。要通过DOM完全控制CSS，必须使用CSSStyleDeclaration对象。下面是这个重要对象的成员：</p>
<table>
<thead>
<tr>
<th>成员</th>
<th>说明</th>
<th>返回</th>
</tr>
</thead>
<tbody>
<tr>
<td>cssText</td>
<td>获取或设置样式的文本</td>
<td>字符串</td>
</tr>
<tr>
<td>getPropertyCSSValue(name)</td>
<td>获取指定的属性</td>
<td>CSSPrimitiveValue</td>
</tr>
<tr>
<td>getPropertyPriority(name)</td>
<td>获取指定属性的优先级</td>
<td>字符串</td>
</tr>
<tr>
<td>getPropertyValue(name)</td>
<td>获取字符串形式的指定值</td>
<td>字符串</td>
</tr>
<tr>
<td>item(pos)</td>
<td>获取指定位置的项目</td>
<td>字符串</td>
</tr>
<tr>
<td>parentRule</td>
<td>如果存在样式规则就获取它</td>
<td>CSSStyleRule</td>
</tr>
<tr>
<td>removeProperty(name)</td>
<td>移除指定的属性</td>
<td>字符串</td>
</tr>
<tr>
<td>setProperty(name,value,priority)</td>
<td>设置指定属性的值和优先级</td>
<td>void</td>
</tr>
<tr>
<td><code>&lt;style&gt;</code></td>
<td>获取或设置指定CSS属性的便捷属性</td>
<td>字符串</td>
</tr>
</tbody>
</table>
<ul>
<li><p>使用便捷属性</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">    <span class="built_in">document</span>.styleSheets[<span class="number">0</span>].cssRules.item(<span class="number">1</span>).style.color = <span class="string">"#f00"</span>;</div><div class="line">    <span class="built_in">document</span>.styleSheets[<span class="number">0</span>].cssRules.item(<span class="number">1</span>).style.backgroundColor = <span class="string">"#ccc"</span>;</div></pre></td></tr></table></figure>
<p>  color、border等没有连接符的CSS属性对应的便捷属性就是本身。padding-top、background-color等带连接符的CSS属性对应的便捷属性即使用驼峰式命名之后的CSS属性。</p>
</li>
<li><p>使用常规属性<br>  如果明确知道需要处理的CSS属性名称，而且存在相应的便捷属性，那么使用便捷属性是件很简单的事。如果需要以程序方式探索CSS属性或者需要获取/设置某个没有对应便捷属性的CSS属性，那么CSSStyleDeclaration对象的其他成员可能会派上用场。下面是综合例子：</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">    <span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"test"</span> <span class="attr">style</span>=<span class="string">"font-weight: 400;padding: 4px !important;"</span>&gt;</span></div><div class="line">            哈哈哈哈<span class="tag">&lt;<span class="name">b</span>&gt;</span>嘿嘿<span class="tag">&lt;/<span class="name">b</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">            <span class="keyword">var</span> pObjCSS = <span class="built_in">document</span>.getElementById(<span class="string">"test"</span>).style;</div><div class="line">            <span class="comment">//使用DOM操作便捷CSS属性</span></div><div class="line">            <span class="built_in">console</span>.log(pObjCSS.fontWeight);</div><div class="line">            <span class="comment">//使用DOM操作常规CSS属性</span></div><div class="line">            <span class="built_in">console</span>.log(pObjCSS.getPropertyValue(<span class="string">"font-weight"</span>));</div><div class="line">            pObjCSS.setProperty(<span class="string">"font-weight"</span>,<span class="string">"bold"</span>);</div><div class="line">            <span class="comment">//使用程序方式探索元素的CSS属性</span></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; pObjCSS.length ; i++)&#123;</div><div class="line">                <span class="comment">//getPropertyPriority获取相应CSS属性的优先级，返回"!important"或者空字符串</span></div><div class="line">                <span class="built_in">console</span>.log(pObjCSS[i],pObjCSS.getPropertyValue(pObjCSS[i]),pObjCSS.getPropertyPriority(pObjCSS[i]));</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>使用细粒度的CSSDOM对象<br>  使用CSSStyleDeclaration.getPropertyCSSValue方法可以获取CSSPrimitiveValue对象，使用该对象能读取/设置更细粒度的属性，如属性值的单位、属性值的类型等。有兴趣可以自己找资料看。</p>
</li>
</ul>
<h3 id="使用计算样式"><a href="#使用计算样式" class="headerlink" title="使用计算样式"></a>使用计算样式</h3><p>之前我们都把焦点放在样式表或style属性中指定的CSS属性值上，但浏览器会从多个来源汇聚样式以计算出该用哪个值来显示某一元素。浏览器用于显示某个元素的CSS属性值集合被称为计算样式。可以通过document.defaultView.getComputedStyle（targetElem）方法获取某一元素计算样式的 CSSStyleDeclaration对象，这个对象包含了浏览器用来显示元素的所有属性细节。<br><strong>注意：获取到的计算样式都是只读属性，不能修改计算样式</strong><br>下面是例子：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">            <span class="selector-id">#test</span>&#123;</div><div class="line">                <span class="attribute">color</span>: red;</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"test"</span> <span class="attr">style</span>=<span class="string">"margin: 2px;padding: 2px;"</span>&gt;</span>测试段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">            <span class="keyword">var</span> pTag = <span class="built_in">document</span>.getElementById(<span class="string">"test"</span>);</div><div class="line">            <span class="keyword">var</span> styleDeclaration = <span class="built_in">document</span>.defaultView.getComputedStyle(pTag);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; styleDeclaration.length ; i++)&#123;</div><div class="line">                <span class="comment">//console.log(styleDeclaration[i],styleDeclaration.getPropertyValue(styleDeclaration[i]))</span></div><div class="line">            &#125;</div><div class="line">            <span class="built_in">console</span>.log(styleDeclaration.getPropertyValue(<span class="string">"padding-top"</span>));</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="使用事件"><a href="#使用事件" class="headerlink" title="使用事件"></a>使用事件</h2><h3 id="使用简单事件处理器"><a href="#使用简单事件处理器" class="headerlink" title="使用简单事件处理器"></a>使用简单事件处理器</h3><p>元素为它们支持的事件都定义了一个事件属性。例如onmouseover事件属性对应于全局事件mouseover，后者会在用户把光标移动到元素占据的浏览器屏幕区域上方时触发。（这是一种通用模式：大多数事件都有一个对应的事件属性，其名称定义为<code>on&lt;enentname&gt;</code>）<br><strong>注意：这种简单的事件处理器是DOM 1级规范的内容，这样绑定事件只能绑定一个事件，后面绑定的会把前面绑定的事件覆盖</strong></p>
<ul>
<li><p>实现简单的内联事件处理器</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">    <span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">onmouseover</span>=<span class="string">"this.style.color = '#f00';this.style.setProperty('border','1px solid #ccc');"</span> <span class="attr">onmouseout</span>=<span class="string">"this.style.removeProperty('color');this.style.removeProperty('border');"</span>&gt;</span> </div><div class="line">            测试简单的事件处理器</div><div class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>  内联事件处理器存在两个问题：其一是HTML与JavaScript混在一起，HTML代码难以阅读；其二是如果有多个具有相同行为的p元素，需要重复添加这些语句。</p>
</li>
<li>实现一个简单的事件处理函数<br>  其实就是把内联事件处理器的代码取出来封装在一个函数。</li>
</ul>
<h3 id="使用DOM和事件对象"><a href="#使用DOM和事件对象" class="headerlink" title="使用DOM和事件对象"></a>使用DOM和事件对象</h3><p>为实现事件与HTML代码分离，更优雅地定义事件处理器，需要使用DOM和JavaScript的Event对象。见下例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>测试段落1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>测试段落2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">            <span class="keyword">var</span> pTags = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"p"</span>);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> pTags)&#123;</div><div class="line">                pTags[i].onmouseover = handleMouseOver;</div><div class="line">                pTags[i].onmouseout = handleMouseOut;</div><div class="line">            &#125;</div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">handleMouseOver</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">                e.target.style.setProperty(<span class="string">"border"</span>,<span class="string">"1px solid #ccc"</span>);</div><div class="line">                e.target.style.setProperty(<span class="string">"padding"</span>,<span class="string">"2px"</span>);</div><div class="line">                e.target.style.setProperty(<span class="string">"color"</span>,<span class="string">"red"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">handleMouseOut</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">                e.target.style.removeProperty(<span class="string">"border"</span>);</div><div class="line">                e.target.style.removeProperty(<span class="string">"padding"</span>);</div><div class="line">                e.target.style.removeProperty(<span class="string">"color"</span>);</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>事件触发时会有一个Event对象，这个对象提供了所发生的的事件信息。在详细讲解事件对象之前，先演示另一种使用addEventListener方法指定事件处理函数的方式，这是DOM2级定义的规范。例子如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>测试段落1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>测试段落2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"unbind"</span>&gt;</span>解除事件绑定<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">            <span class="keyword">var</span> pTags = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"p"</span>);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt;  pTags.length ; i++)&#123;</div><div class="line">                <span class="comment">//下面这种遍历方式遍历的是对象的属性，对于pTags而言，遍历的就是数组pTags的属性，除了索引外，数组还有length属性，pTags[length]就是2.绑定事件就会出现异常</span></div><div class="line">                <span class="comment">//for(var i in pTags)&#123;</span></div><div class="line">                pTags[i].addEventListener(<span class="string">'mouseover'</span>,handleMouseOver);</div><div class="line">                pTags[i].addEventListener(<span class="string">'mouseout'</span>,handleMouseOut);</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">document</span>.getElementById(<span class="string">"unbind"</span>).addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="comment">//解除事件绑定</span></div><div class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt;  pTags.length ; i++)&#123;</div><div class="line">                    pTags[i].removeEventListener(<span class="string">'mouseover'</span>,handleMouseOver);</div><div class="line">                    pTags[i].removeEventListener(<span class="string">'mouseout'</span>,handleMouseOut);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">handleMouseOver</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">                e.target.style.setProperty(<span class="string">"border"</span>,<span class="string">"1px solid #ccc"</span>);</div><div class="line">                e.target.style.setProperty(<span class="string">"padding"</span>,<span class="string">"2px"</span>);</div><div class="line">                e.target.style.setProperty(<span class="string">"color"</span>,<span class="string">"red"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">handleMouseOut</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">                e.target.style.removeProperty(<span class="string">"border"</span>);</div><div class="line">                e.target.style.removeProperty(<span class="string">"padding"</span>);</div><div class="line">                e.target.style.removeProperty(<span class="string">"color"</span>);</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>addEventListener方法的优点在于它让你能够访问某些高级事件特性，后面会谈到。<br>下面来介绍Event事件对象：<br><img src="index_files/2969d766-689b-4cc2-9f13-2e8db2c57ae1.jpg" alt=""></p>
<ul>
<li><p>按类型区分事件<br>  event对象的type属性告诉你正在处理的事件是哪种类型的事件，这个值是以字符串的形式提供，比如mouseover。有了探测事件类型的能力，就可以用一个函数处理多个类型的事件，如下例：</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">    <span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>测试段落1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>测试段落2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"unbind"</span>&gt;</span>解除事件绑定<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">            <span class="keyword">var</span> pTags = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"p"</span>);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt;  pTags.length ; i++)&#123;</div><div class="line">                pTags[i].addEventListener(<span class="string">'mouseover'</span>,handleMouseEvent);</div><div class="line">                pTags[i].addEventListener(<span class="string">'mouseout'</span>,handleMouseEvent);</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">document</span>.getElementById(<span class="string">"unbind"</span>).addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="comment">//解除事件绑定</span></div><div class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt;  pTags.length ; i++)&#123;</div><div class="line">                    pTags[i].removeEventListener(<span class="string">'mouseover'</span>,handleMouseEvent);</div><div class="line">                    pTags[i].removeEventListener(<span class="string">'mouseout'</span>,handleMouseEvent);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">handleMouseEvent</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">                <span class="keyword">if</span>(e.type==<span class="string">"mouseover"</span>)&#123;</div><div class="line">                    e.target.style.setProperty(<span class="string">"border"</span>,<span class="string">"1px solid #ccc"</span>);</div><div class="line">                    e.target.style.setProperty(<span class="string">"padding"</span>,<span class="string">"2px"</span>);</div><div class="line">                    e.target.style.setProperty(<span class="string">"color"</span>,<span class="string">"red"</span>);</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    e.target.style.removeProperty(<span class="string">"border"</span>);</div><div class="line">                    e.target.style.removeProperty(<span class="string">"padding"</span>);</div><div class="line">                    e.target.style.removeProperty(<span class="string">"color"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>理解事件流<br>  一个事件的生命周期包括三个阶段：捕捉(capture)、目标（target）和冒泡（bubbling）。</p>
<ol>
<li><p>理解捕捉阶段<br>当某个事件被触发时，浏览器会找出事件涉及的元素（直接触发事件的元素），它被称为该事件的目标。浏览器会找出body元素和目标之间的所有元素并分别检查它们，看看它们是否带有事件处理器且是否要求获得其后代元素触发的事件。浏览器会先触发这些元素上的事件处理器，然后才轮到目标自身的处理器，这个阶段称为捕捉阶段。下面是具体例子：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">    <span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"pblock"</span>&gt;</span></div><div class="line">            哈哈哈哈，我又回来了。现在来测试下<span class="tag">&lt;<span class="name">b</span> <span class="attr">id</span>=<span class="string">"btext"</span>&gt;</span>事件捕捉阶段<span class="tag">&lt;/<span class="name">b</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">            <span class="keyword">var</span> btext = <span class="built_in">document</span>.getElementById(<span class="string">"btext"</span>);</div><div class="line">            <span class="keyword">var</span> pblock = <span class="built_in">document</span>.getElementById(<span class="string">"pblock"</span>);</div><div class="line">            btext.addEventListener(<span class="string">'mouseover'</span>,handleMouseEvent);</div><div class="line">            btext.addEventListener(<span class="string">'mouseout'</span>,handleMouseEvent);</div><div class="line">            <span class="comment">//第三个参数告诉浏览器我想让p元素在捕捉阶段触发p元素的事件</span></div><div class="line">            pblock.addEventListener(<span class="string">'mouseover'</span>,handleDescendantEvent,<span class="literal">true</span>);</div><div class="line">            pblock.addEventListener(<span class="string">'mouseout'</span>,handleDescendantEvent,<span class="literal">true</span>);</div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">handleDescendantEvent</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">                <span class="built_in">console</span>.log(e.eventPhase); <span class="comment">//值为1,表示捕获阶段</span></div><div class="line">                <span class="comment">//只处理捕获阶段捕捉到的子元素的事件,不处理本身事件（目标阶段事件）,即鼠标悬停在p元素其他区域时不处理</span></div><div class="line">                <span class="keyword">if</span>(e.type==<span class="string">"mouseover"</span> &amp;&amp; e.eventPhase==Event.CAPTURING_PHASE)&#123;</div><div class="line">                    <span class="comment">//currentTarget表示的是当前被触发事件监听器的元素,target是事件涉及的元素(理解为直接触发事件的元素,该例鼠标悬停在b元素时才触发事件,所依target就表示b元素)</span></div><div class="line">                    e.target.style.border = <span class="string">'1px solid red'</span>;</div><div class="line">                    e.currentTarget.style.border = <span class="string">'1px solid black'</span>;</div><div class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(e.type==<span class="string">"mouseout"</span> &amp;&amp; e.eventPhase==Event.CAPTURING_PHASE)&#123;</div><div class="line">                    e.target.style.removeProperty(<span class="string">"border"</span>);</div><div class="line">                    e.currentTarget.style.removeProperty(<span class="string">"border"</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//下面这句代码可以阻止事件流向目标元素,且跳过目标和冒泡阶段,即加了下面这句代码后,b元素的mouseover和mouseout事件将不会触发</span></div><div class="line">                <span class="comment">//e.stopPropagation();</span></div><div class="line">            &#125;</div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">handleMouseEvent</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">                <span class="built_in">console</span>.log(e.eventPhase); <span class="comment">//值为2,表示目标阶段</span></div><div class="line">                <span class="keyword">if</span>(e.type==<span class="string">"mouseover"</span>)&#123;</div><div class="line">                    e.target.style.setProperty(<span class="string">"color"</span>,<span class="string">"red"</span>);</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    e.target.style.removeProperty(<span class="string">"color"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p> 另，event对象的eventPhase属性会返回表示事件当前阶段的值</p>
<p> <img src="index_files/5536f2e2-c453-4140-848b-d83e72bae4ce.jpg" alt=""></p>
</li>
<li>理解目标阶段<br>目标阶段是三个阶段中最简单的。当捕捉阶段完成后，事件传递到目标，触发绑定在目标上的相应事件，在目标绑定的事件上使用Event.eventPhase获取到的即为表示目标阶段的值。<br><img src="index_files/0db62014-617d-4f64-9a94-a6defc5b3597.jpg" alt=""><br>需要注意的是，如果目标绑定多个事件（使用多个addEventListener绑定多个事件），那么会指定所有的事件处理方法。如果在目标阶段调用event.stopPropagation()，相当于终止了事件流，不再进入冒泡阶段。</li>
<li><p>理解冒泡阶段<br>完成目标阶段之后，浏览器开始转而沿着上级元素链朝body元素前进。在沿途的每个元素上，浏览器都会检查是否存在针对该事件类型但没有启用捕捉的监听器（addEventListener方法第三个参数设置为false，或不设置，默认是false），如果有，则触发元素上该事件。这就是事件冒泡。下面是具体例子：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">    <span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"pblock"</span>&gt;</span></div><div class="line">            哈哈哈哈，我又回来了。现在来测试下<span class="tag">&lt;<span class="name">b</span> <span class="attr">id</span>=<span class="string">"btext"</span>&gt;</span>事件捕捉阶段<span class="tag">&lt;/<span class="name">b</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">            <span class="keyword">var</span> btext = <span class="built_in">document</span>.getElementById(<span class="string">"btext"</span>);</div><div class="line">            <span class="keyword">var</span> pblock = <span class="built_in">document</span>.getElementById(<span class="string">"pblock"</span>);</div><div class="line">            btext.addEventListener(<span class="string">'mouseover'</span>,handleMouseEvent);</div><div class="line">            btext.addEventListener(<span class="string">'mouseout'</span>,handleMouseEvent);</div><div class="line">            <span class="comment">//省略第三个参数,默认是false,表示冒泡阶段触发事件</span></div><div class="line">            pblock.addEventListener(<span class="string">'mouseover'</span>,handleDescendantEvent);</div><div class="line">            pblock.addEventListener(<span class="string">'mouseout'</span>,handleDescendantEvent);</div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">handleDescendantEvent</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">                <span class="built_in">console</span>.log(e.eventPhase); <span class="comment">//值为3,表示冒泡阶段</span></div><div class="line">                <span class="comment">//只处理冒泡阶段捕捉到的子元素的事件,不处理本身事件(目标阶段事件),即鼠标悬停在p元素其他区域时不处理</span></div><div class="line">                <span class="keyword">if</span>(e.type==<span class="string">"mouseover"</span> &amp;&amp; e.eventPhase==Event.BUBBLING_PHASE)&#123;</div><div class="line">                    <span class="comment">//currentTarget表示的是当前被触发事件监听器的元素,target是事件涉及的元素(理解为直接触发事件的元素,该例鼠标悬停在b元素时才触发事件,所依target就表示b元素)</span></div><div class="line">                    e.target.style.border = <span class="string">'1px solid red'</span>;</div><div class="line">                    e.currentTarget.style.border = <span class="string">'1px solid black'</span>;</div><div class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(e.type==<span class="string">"mouseout"</span> &amp;&amp; e.eventPhase==Event.BUBBLING_PHASE)&#123;</div><div class="line">                    e.target.style.removeProperty(<span class="string">"border"</span>);</div><div class="line">                    e.currentTarget.style.removeProperty(<span class="string">"border"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">handleMouseEvent</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">                <span class="built_in">console</span>.log(e.eventPhase); <span class="comment">//值为2,表示目标阶段</span></div><div class="line">                <span class="keyword">if</span>(e.type==<span class="string">"mouseover"</span>)&#123;</div><div class="line">                    e.target.style.setProperty(<span class="string">"color"</span>,<span class="string">"red"</span>);</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    e.target.style.removeProperty(<span class="string">"color"</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//e.stopPropagation();//目标阶段停止事件传播,则不进行冒泡阶段</span></div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="index_files/01f1aca7-c699-40d5-86a3-78864fc305e0.jpg" alt=""></p>
<p><strong>注意：并非所有事件都支持冒泡，可以用bubbles属性来检查某个事件能否冒泡</strong></p>
</li>
</ol>
</li>
<li><p>使用可撤销事件<br>  有些事件定义了一种默认行为，会在事件被触发时执行。例如，a元素被点击时默认行为是浏览器会载入href属性所指定URL的内容。当某一事件拥有默认行为时，event.cancelable属性就是true。你可以调用<code>event.preventDefault();</code>来阻止默认行为的执行。下面是例子：</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">    <span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">            <span class="keyword">var</span> aLink = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"a"</span>)[<span class="number">0</span>];</div><div class="line">            aLink.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">                <span class="keyword">if</span>(!confirm(<span class="string">"Do you want to visit "</span>+e.target.href+<span class="string">" ?"</span>))&#123;</div><div class="line">                    <span class="comment">//如果取消,则不访问链接</span></div><div class="line">                    e.preventDefault();</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>  <strong>注意：调用preventDefault函数不会阻止事件流经捕获、目标和冒泡阶段</strong></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DOM是W3C的标准，是与语言无关的通用的用于操作文档的一种技术规范。&lt;/p&gt;
    
    </summary>
    
      <category term="DOM" scheme="http://heji.website/categories/DOM/"/>
    
    
      <category term="web前端" scheme="http://heji.website/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="DOM" scheme="http://heji.website/tags/DOM/"/>
    
      <category term="HTML-DOM" scheme="http://heji.website/tags/HTML-DOM/"/>
    
  </entry>
  
  <entry>
    <title>windows平台Nginx的安装和配置</title>
    <link href="http://heji.website/2016/12/20/window%E5%B9%B3%E5%8F%B0Nginx%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/"/>
    <id>http://heji.website/2016/12/20/window平台Nginx的安装和配置/</id>
    <published>2016-12-20T11:44:29.419Z</published>
    <updated>2016-12-20T11:47:03.578Z</updated>
    
    <content type="html"><![CDATA[<p>Nginx是一个轻量级的高性能Http WebServer，以事件驱动方式编写，因此相比Apache而言，Nginx更加稳定，性能更好，而且配置简单，资源占用率低。</p>
<a id="more"></a>
<h2 id="Windows下Nginx基本安装和配置"><a href="#Windows下Nginx基本安装和配置" class="headerlink" title="Windows下Nginx基本安装和配置"></a>Windows下Nginx基本安装和配置</h2><h3 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h3><p>在官网下载<a href="http://nginx.org/download/nginx-1.10.2.zip" target="_blank" rel="external">nginx/Windows-1.10.2</a>解压即可，解压之后把安装目录添加到环境变量。</p>
<h3 id="启动Nginx"><a href="#启动Nginx" class="headerlink" title="启动Nginx"></a>启动Nginx</h3><p>运行命令<code>start nginx</code>启动nginx。默认启用80端口。用过Tomcat的人都希望能在控制台看到启动日志，nginx的日志却不得不查看logs目录下的相应log文件。</p>
<h3 id="停止Nginx"><a href="#停止Nginx" class="headerlink" title="停止Nginx"></a>停止Nginx</h3><p>Ctrl+C没反应。于是关闭控制台窗口。可是再访问<code>http://localhost</code>依然有效。查看进程，发现nginx根本没有被关闭。因此如果想彻底关闭nginx，应该是<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nginx <span class="_">-s</span> stop</div></pre></td></tr></table></figure></p>
<h3 id="访问欢迎html页"><a href="#访问欢迎html页" class="headerlink" title="访问欢迎html页"></a>访问欢迎html页</h3><p>在浏览器中访问<code>http://localhost</code>，可以看到默认的欢迎页。</p>
<h3 id="Ngnix常用配置"><a href="#Ngnix常用配置" class="headerlink" title="Ngnix常用配置"></a>Ngnix常用配置</h3><p>Nginx的所有配置都默认使用<code>conf/nginx.conf</code>文件。<br>常用配置如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">http &#123;</div><div class="line">  server &#123;</div><div class="line">    #1.侦听80端口 </div><div class="line">    listen  80; </div><div class="line">    location / &#123;</div><div class="line">        # 2. 默认主页目录在nginx安装目录的html子目录。</div><div class="line">        root   html;</div><div class="line">        index  index.html index.htm;</div><div class="line">        # 3. 没有索引页时，罗列文件和子目录</div><div class="line">        autoindex on;</div><div class="line">        autoindex_exact_size on;</div><div class="line">        autoindex_localtime on;</div><div class="line">    &#125;</div><div class="line">    # 4.指定虚拟目录</div><div class="line">    location /tshirt &#123;</div><div class="line">    alias D:\programs\Apache2\htdocs\tshirt;</div><div class="line">    index index.html index.htm;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  # 5.虚拟主机www.emb.info配置</div><div class="line">  server &#123;</div><div class="line">    listen          80;</div><div class="line">    server_name     www.emb.info;</div><div class="line">    access_log emb.info/logs/access.log;</div><div class="line">    location / &#123;</div><div class="line">      index index.html;</div><div class="line">      root  emb.info/htdocs;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Nginx是一个轻量级的高性能Http WebServer，以事件驱动方式编写，因此相比Apache而言，Nginx更加稳定，性能更好，而且配置简单，资源占用率低。&lt;/p&gt;
    
    </summary>
    
      <category term="Nginx" scheme="http://heji.website/categories/Nginx/"/>
    
    
      <category term="工具" scheme="http://heji.website/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Nginx" scheme="http://heji.website/tags/Nginx/"/>
    
      <category term="web服务器" scheme="http://heji.website/tags/web%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>浮动元素如何撑开父元素</title>
    <link href="http://heji.website/2016/12/14/%E6%B5%AE%E5%8A%A8%E5%85%83%E7%B4%A0%E5%A6%82%E4%BD%95%E6%92%91%E5%BC%80%E7%88%B6%E5%85%83%E7%B4%A0/"/>
    <id>http://heji.website/2016/12/14/浮动元素如何撑开父元素/</id>
    <published>2016-12-14T12:51:03.557Z</published>
    <updated>2016-12-14T12:55:17.123Z</updated>
    
    <content type="html"><![CDATA[<p>经常遇到这样的问题：子元素的内容超出父元素，引起很多其他的样式问题。出现该问题是因为父元素没有预先设置高度，所以父元素的高度由其包含的子元素高度决定。而子元素设置了浮动，脱离了正常文档流，所以设置了浮动的子元素不计算高度，就会产生父元素高度塌陷现象。<br><a id="more"></a></p>
<h2 id="理解浮动与清除浮动"><a href="#理解浮动与清除浮动" class="headerlink" title="理解浮动与清除浮动"></a>理解浮动与清除浮动</h2><p>浮动实际上就相当于设置元素<code>display:inline-block;</code>且让元素脱离正常文档流.</p>
<h3 id="文字环绕效果的实现"><a href="#文字环绕效果的实现" class="headerlink" title="文字环绕效果的实现"></a>文字环绕效果的实现</h3><p>因为父元素高度塌陷，所以文字会按正常顺序排列，无视浮动图片高度。而图片宽带又还在，所以实现了文字环绕效果。</p>
<h3 id="为何clear属性能清除浮动"><a href="#为何clear属性能清除浮动" class="headerlink" title="为何clear属性能清除浮动"></a>为何clear属性能清除浮动</h3><p>clear 属性规定元素的哪一侧不允许其他浮动元素。当给元素设置浮动时，浮动元素A会产生空白空间，空间长宽等于A的长宽，后面的浮动元素会自动补空缺。当给A元素之后的元素B设置<code>clear:both</code>时，元素B不仅不会去补空缺，而且会把元素A因浮动而产生的空白空间填充为实际空间。实际空间被计算高度，父元素被撑开。</p>
<h3 id="浮动元素撑开父元素的集中方法"><a href="#浮动元素撑开父元素的集中方法" class="headerlink" title="浮动元素撑开父元素的集中方法"></a>浮动元素撑开父元素的集中方法</h3><ul>
<li><p>父元素设置<code>overflow</code>以及<code>zoom</code>，样式如下</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"> </span></div><div class="line">	<span class="comment">/*zoom是设置缩放*/</span></div><div class="line">	<span class="selector-id">#div1</span>&#123;<span class="attribute">border</span>:<span class="number">1px</span> solid red;<span class="attribute">overflow</span>:hidden;<span class="attribute">zoom</span>:<span class="number">1</span>;&#125; </div><div class="line">	<span class="selector-id">#div2</span>,<span class="selector-id">#div3</span>&#123;<span class="attribute">float</span>:right;<span class="attribute">border</span>:<span class="number">1px</span> solid blue;&#125; </div><div class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span> </div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div2"</span>&gt;</span>two<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div3"</span>&gt;</span>one<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>父元素也设置浮动</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"> </span></div><div class="line">	<span class="selector-id">#div1</span>&#123;<span class="attribute">border</span>:<span class="number">1px</span> solid red;<span class="attribute">float</span>: left;<span class="attribute">width</span>: <span class="number">100%</span>;&#125; </div><div class="line">	<span class="selector-id">#div2</span>,<span class="selector-id">#div3</span>&#123;<span class="attribute">float</span>:right;<span class="attribute">border</span>:<span class="number">1px</span> solid blue;&#125; </div><div class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span> </div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div2"</span>&gt;</span>two<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div3"</span>&gt;</span>one<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>添加一个子元素，并设置clear样式</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">   <span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"> </span></div><div class="line">	<span class="selector-id">#div1</span>&#123;<span class="attribute">border</span>:<span class="number">1px</span> solid red;&#125; </div><div class="line">	<span class="selector-id">#div2</span>,<span class="selector-id">#div3</span>&#123;<span class="attribute">float</span>:right;<span class="attribute">border</span>:<span class="number">1px</span> solid blue;&#125; </div><div class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span> </div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div2"</span>&gt;</span>two<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div3"</span>&gt;</span>one<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div4"</span> <span class="attr">style</span>=<span class="string">"clear: both;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;经常遇到这样的问题：子元素的内容超出父元素，引起很多其他的样式问题。出现该问题是因为父元素没有预先设置高度，所以父元素的高度由其包含的子元素高度决定。而子元素设置了浮动，脱离了正常文档流，所以设置了浮动的子元素不计算高度，就会产生父元素高度塌陷现象。&lt;br&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://heji.website/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://heji.website/tags/CSS/"/>
    
      <category term="web前端" scheme="http://heji.website/tags/web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>CSS3过渡、动画和变换</title>
    <link href="http://heji.website/2016/12/13/CSS3%E8%BF%87%E6%B8%A1%E3%80%81%E5%8A%A8%E7%94%BB%E5%92%8C%E5%8F%98%E6%8D%A2/"/>
    <id>http://heji.website/2016/12/13/CSS3过渡、动画和变换/</id>
    <published>2016-12-13T08:52:48.769Z</published>
    <updated>2016-12-14T12:58:26.720Z</updated>
    
    <content type="html"><![CDATA[<p>这三个效果都是CSS3中新增的。但因为会消耗计算机的处理能力和分散注意力，所以需要谨慎使用<br><a id="more"></a></p>
<h2 id="过渡、动画和变换"><a href="#过渡、动画和变换" class="headerlink" title="过渡、动画和变换"></a>过渡、动画和变换</h2><h3 id="使用过渡"><a href="#使用过渡" class="headerlink" title="使用过渡"></a>使用过渡</h3><p>过渡效果一般是由浏览器直接改变元素的CSS属性实现的。例如，使用:hover选择器，一旦用户将鼠标悬停在元素之上，浏览器就会应用跟选择器关联的属性。但CSS过渡特性允许我们控制应用新属性值的速度。过渡属性取值及说明如下：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
<th>值</th>
</tr>
</thead>
<tbody>
<tr>
<td>transition-delay</td>
<td>指定过渡开始之前的延迟时间</td>
<td>&lt;时间&gt;</td>
</tr>
<tr>
<td>transition-duration</td>
<td>指定过渡的持续时间</td>
<td>&lt;时间&gt;</td>
</tr>
<tr>
<td>transition-property</td>
<td>指定应用过渡的属性</td>
<td>&lt;字符串&gt;</td>
</tr>
<tr>
<td>transition-timing-function</td>
<td>指定过渡期间计算中间值的方式</td>
<td>ease(默认值)、linear、ease-in、ease-out、ease-in-out</td>
</tr>
<tr>
<td>transition</td>
<td>过渡的简写属性</td>
<td>-</td>
</tr>
</tbody>
</table>
<p>transition简写属性语法：<code>transition:&lt;transition-property&gt;  &lt;transition-property&gt; &lt;transition-duration&gt; &lt;transition-timing-function&gt;  &lt;transition-delay&gt;</code></p>
<p>示例代码：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#banana</span>&#123;</div><div class="line">  <span class="attribute">font-size</span>: large;</div><div class="line">  <span class="attribute">border</span>: medium solid black;</div><div class="line">  <span class="comment">/*创建反向过渡，即鼠标移开时应用，没有指定过渡属性，默认应用所有*/</span></div><div class="line">  <span class="attribute">-webkit-transition-delay</span>:<span class="number">10ms</span>;</div><div class="line">  <span class="attribute">-webkit-transition-duration</span>:<span class="number">500ms</span>;</div><div class="line">  <span class="attribute">outline</span>:none;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#banana</span><span class="selector-pseudo">:hover</span>&#123;</div><div class="line"> <span class="attribute">font-size</span>: x-large;</div><div class="line"> <span class="attribute">border</span>: medium solid white;</div><div class="line"> <span class="attribute">color</span>: white;</div><div class="line"> <span class="attribute">-webkit-transition-delay</span>: <span class="number">100ms</span>;</div><div class="line"> <span class="attribute">-webkit-transition-property</span>: background-color,color,padding,font-size,border;</div><div class="line"> <span class="attribute">-webkit-transition-duration</span>: <span class="number">500ms</span>;</div><div class="line"> <span class="comment">/*等价于,all表示应用所有属性*/</span></div><div class="line"> <span class="attribute">-webkit-transition</span>: all <span class="number">500ms</span> <span class="number">100ms</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>效果请参看<a href="http://sandbox.runjs.cn/show/br1rdo3d" title="Demo" target="_blank" rel="external">Demo</a></p>
<h3 id="使用动画"><a href="#使用动画" class="headerlink" title="使用动画"></a>使用动画</h3><p>CSS动画本质上是增强的过渡。在如何从一种CSS样式过渡到另一种样式的过程中，你具有了更多选择、更多控制，以及更多灵活性。动画属性如下：</p>
<table>
<thead>
<tr>
<th>属性（要加厂商前缀）</th>
<th>说明</th>
<th>值</th>
</tr>
</thead>
<tbody>
<tr>
<td>animation-delay</td>
<td>设置动画开始前的延迟</td>
<td>&lt;时间&gt;</td>
</tr>
<tr>
<td>animation-direction</td>
<td>设置动画循环播放的时候是否反向播放</td>
<td>normal、alternate</td>
</tr>
<tr>
<td>animation-duration</td>
<td>设置动画播放的持续时间</td>
<td>&lt;时间&gt;</td>
</tr>
<tr>
<td>animation-iteration-count</td>
<td>设置动画的播放次数</td>
<td>infinite、&lt;数值&gt;</td>
</tr>
<tr>
<td>animation-name</td>
<td>指定动画名称</td>
<td>none、&lt;字符串&gt;</td>
</tr>
<tr>
<td>animation-play-state</td>
<td>允许动画暂停和重新播放</td>
<td>running、paused</td>
</tr>
<tr>
<td>animation-timing-function</td>
<td>指定如何计算中间动画值</td>
<td>参考过渡的动画函数可选值</td>
</tr>
<tr>
<td>animation</td>
<td>简写属性</td>
<td>-</td>
</tr>
</tbody>
</table>
<p>animation简写属性语法：<code>animation: &lt;animation-name&gt; &lt;animation-duration&gt; &lt;animation-timing-function&gt; &lt;animation-delay&gt; &lt;animation-iteration-count&gt;</code></p>
<p>动画是在两部分定义的，第一部分包含在样式声明中，使用上表列出的属性。第二部分使用@key-frames规则创建，用来定义应用动画的属性。<br>完整示例代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>RunJS<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">            <span class="selector-tag">button</span>&#123;</div><div class="line">                <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#ccc</span>;</div><div class="line">                <span class="attribute">cursor</span>:pointer;</div><div class="line">                  <span class="attribute">display</span>:block;</div><div class="line">                  <span class="attribute">margin</span>:auto;</div><div class="line">                  <span class="attribute">position</span>:relative;</div><div class="line">                  <span class="attribute">top</span>:<span class="number">100px</span>;</div><div class="line">                <span class="attribute">font-size</span>:large;</div><div class="line">                <span class="comment">/*初始化动画,移开之后重新应用样式所以会再次执行*/</span></div><div class="line">                <span class="attribute">-webkit-animation-duration</span>: <span class="number">1000ms</span>;</div><div class="line">                <span class="attribute">-webkit-animation-delay</span>:<span class="number">10ms</span>;</div><div class="line">                <span class="comment">/*不允许反向播放*/</span></div><div class="line">                <span class="attribute">-webkit-animation-direction</span>: normal;</div><div class="line">                <span class="comment">/*只播放一次*/</span></div><div class="line">                <span class="attribute">-webkit-animation-iteration-count</span>: <span class="number">1</span>;</div><div class="line">                <span class="attribute">-webkit-animation-timing-function</span>: linear;</div><div class="line">                <span class="comment">/*动画名字*/</span></div><div class="line">                <span class="attribute">-webkit-animation-name</span>: <span class="string">"initAnimation"</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="selector-tag">button</span><span class="selector-pseudo">:hover</span>&#123;</div><div class="line">                <span class="attribute">-webkit-animation-duration</span>:<span class="number">2000ms</span>;</div><div class="line">                <span class="attribute">-webkit-animation-delay</span>:<span class="number">50ms</span>;</div><div class="line">                <span class="comment">/*允许反向播放*/</span></div><div class="line">                <span class="attribute">-webkit-animation-direction</span>:alternate;</div><div class="line">                <span class="comment">/*播放次数,重复两次*/</span></div><div class="line">                <span class="attribute">-webkit-animation-iteration-count</span>: <span class="number">2</span>;</div><div class="line">                <span class="attribute">-webkit-animation-timing-function</span>: linear;</div><div class="line">                <span class="comment">/*动画名字*/</span></div><div class="line">                <span class="attribute">-webkit-animation-name</span>: <span class="string">"myAnimation"</span>;</div><div class="line">            &#125;</div><div class="line">            @<span class="keyword">keyframes</span> myAnimation&#123;</div><div class="line">                  <span class="selector-tag">from</span>&#123;</div><div class="line">                    <span class="attribute">background-color</span>: red;</div><div class="line">                &#125;</div><div class="line">                50% &#123;</div><div class="line">                    <span class="attribute">background-color</span>: yellow;</div><div class="line">                    <span class="attribute">padding</span>: <span class="number">2px</span>;</div><div class="line">                &#125;</div><div class="line">                75% &#123;</div><div class="line">                    <span class="attribute">color</span>:green;</div><div class="line">                    <span class="attribute">padding</span>:<span class="number">4px</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="selector-tag">to</span>&#123;</div><div class="line">                      <span class="attribute">font-size</span>: x-large;</div><div class="line">                    <span class="attribute">padding</span>:<span class="number">8px</span>;</div><div class="line">                    <span class="attribute">color</span>: red;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            @<span class="keyword">keyframes</span> initAnimation&#123;</div><div class="line">                <span class="selector-tag">from</span>&#123;</div><div class="line">                    <span class="attribute">top</span>:<span class="number">0</span>;</div><div class="line">                &#125;</div><div class="line">                50%&#123;</div><div class="line">                    <span class="attribute">top</span>:<span class="number">50px</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="selector-tag">to</span>&#123;</div><div class="line">                      <span class="attribute">top</span>:<span class="number">100px</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>Animation!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>效果请参看<a href="http://sandbox.runjs.cn/show/6vzt80qe" title="CSS3动画demo" target="_blank" rel="external">CSS3动画demo</a></p>
<ul>
<li>为多个元素应用多个关键帧<br><img src="index_files/a40b7ba4-a040-47a6-a9c0-8fa7b5252b78.jpg" alt=""></li>
<li>停止和启动动画<br>animation-play-state属性可以用来停止和启动动画。如果这个属性的值为paused，动画就会停止。如果换成playing，动画就会播放。这里距离如果使用JS改变这个值<br><img src="index_files/bf92483c-3741-4091-9569-e39ea4725eb1.jpg" alt=""></li>
</ul>
<h3 id="应用变换"><a href="#应用变换" class="headerlink" title="应用变换"></a>应用变换</h3><p>我们可以使用CSS变换为元素应用线性变换，也就是说你可以旋转、缩放、倾斜和平移某个元素。变换的属性有：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
<th>值</th>
</tr>
</thead>
<tbody>
<tr>
<td>transform</td>
<td>指定应用的变换功能</td>
<td>取值见后表</td>
</tr>
<tr>
<td>transform-origin</td>
<td>指定变换的起点</td>
<td>取值见后表</td>
</tr>
</tbody>
</table>
<ul>
<li>应用变换<br>我们通过transform属性为元素应用变换。这个属性允许的值是一组预定义的函数<br><img src="index_files/66b232dd-f38a-43d6-a484-64145716c373.jpg" alt=""></li>
<li>指定元素变换的起点<br>transform-origin属性允许我们指定应用变换的起点。默认情况下，使用元素的中心作为起点，也可以选择其他值<br><img src="index_files/53444dde-e7c5-41c6-bd9a-b1968796916c.jpg" alt=""></li>
<li><p>将变换作为动画和过渡处理<br>  我们可以为变换应用动画和过渡，下面是一个综合例子：</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">    <span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>RunJS<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">            <span class="selector-tag">span</span>&#123;</div><div class="line">                <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#000</span>;</div><div class="line">                <span class="attribute">display</span>: inline-block;</div><div class="line">            &#125;</div><div class="line">            <span class="selector-tag">span</span><span class="selector-pseudo">:hover</span>&#123;</div><div class="line">              <span class="comment">/* Rotate div */</span></div><div class="line">                <span class="attribute">transform</span>:<span class="built_in">rotate</span>(9deg);</div><div class="line">                <span class="attribute">-ms-transform</span>:<span class="built_in">rotate</span>(9deg); <span class="comment">/* Internet Explorer */</span></div><div class="line">                <span class="attribute">-moz-transform</span>:<span class="built_in">rotate</span>(9deg); <span class="comment">/* Firefox */</span></div><div class="line">                <span class="attribute">-webkit-transform</span>:<span class="built_in">rotate</span>(9deg); <span class="comment">/* Safari 和 Chrome */</span></div><div class="line">                <span class="attribute">-o-transform</span>:<span class="built_in">rotate</span>(9deg); <span class="comment">/* Opera */</span></div><div class="line">                <span class="attribute">transition</span>: all <span class="number">1s</span> <span class="number">100ms</span>;</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>transform<span class="tag">&lt;/<span class="name">span</span>&gt;</span>的属性包括：rotate() / skew() / scale() / translate(,) ，分别还有x、y之分，比如：rotatex() 和 rotatey() ，以此类推。</div><div class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>  效果请参看<a href="http://sandbox.runjs.cn/show/mx3ifawg" title="CSS3变换demo" target="_blank" rel="external">CSS3变换demo</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这三个效果都是CSS3中新增的。但因为会消耗计算机的处理能力和分散注意力，所以需要谨慎使用&lt;br&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://heji.website/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://heji.website/tags/CSS/"/>
    
      <category term="CSS3" scheme="http://heji.website/tags/CSS3/"/>
    
      <category term="web前端" scheme="http://heji.website/tags/web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>SQLServer常用知识点</title>
    <link href="http://heji.website/2016/12/13/SQLServer%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://heji.website/2016/12/13/SQLServer知识点/</id>
    <published>2016-12-13T08:51:01.207Z</published>
    <updated>2016-12-13T11:27:24.323Z</updated>
    
    <content type="html"><![CDATA[<p>SQLServer自带的工具不好用，所以这里主要介绍使用Navicat操作SQLserver以及SQLserver的一些常用知识点。<br><a id="more"></a></p>
<h2 id="使用Navicat新建数据库、用户及权限赋予"><a href="#使用Navicat新建数据库、用户及权限赋予" class="headerlink" title="使用Navicat新建数据库、用户及权限赋予"></a>使用Navicat新建数据库、用户及权限赋予</h2><h3 id="新建数据库"><a href="#新建数据库" class="headerlink" title="新建数据库"></a>新建数据库</h3><ol>
<li>启动Navicat，点击建立SQLserver连接。<br><img src="index_files/b5d39e4e-9191-4a65-b4e2-8dfe83ee93a8.png" alt=""></li>
<li>右键数据库服务器，选择“新建数据库”，输入数据库名，在文件选项卡还能选择数据库存放的位置。点击“确定”即完成数据库的创建<br><img src="index_files/8ac41406-696d-41e5-bf62-bfabead4a46a.png" alt=""></li>
</ol>
<h3 id="新建登录用户"><a href="#新建登录用户" class="headerlink" title="新建登录用户"></a>新建登录用户</h3><ol>
<li>双击新建的数据库，点击“用户”，下拉选择“登录”，点击新建登录。<br><img src="index_files/44b7acd2-600f-42fb-8deb-bc66008146b1.jpg" alt=""></li>
<li>先设置“常规”选项卡<br><img src="index_files/c1f57c95-940b-43a8-94d7-752a8cc7be9f.jpg" alt=""></li>
<li>设置完“常规”选项卡之后，设置用户对应选项卡，勾选刚才新建的数据库。<br><img src="index_files/5afeb88a-9d3d-400b-a31e-275cd465d7b7.png" alt=""></li>
<li>完成“常规”和“用户对应”选项卡的设置之后，点击“保存”即完成登录用户的创建。</li>
</ol>
<h3 id="用户授权"><a href="#用户授权" class="headerlink" title="用户授权"></a>用户授权</h3><ol>
<li>双击打开新建的数据库，点击“用户”，下拉选择“数据库角色”，选择“db_owner”，双击进去。<br><img src="index_files/c8f34637-9d91-43e1-824d-756ecd1ae02d.jpg" alt=""></li>
<li>点击选择我们刚刚新建的用户“U_HJXF”，点击保存即可。</li>
<li>使用新建的用户登录测试。<br><img src="index_files/5e816ac7-145e-4681-9f2f-403becbfb04a.png" alt=""></li>
</ol>
<h2 id="SQLServer常用知识点"><a href="#SQLServer常用知识点" class="headerlink" title="SQLServer常用知识点"></a>SQLServer常用知识点</h2><ul>
<li><p>查看表字段注释</p>
  <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span></div><div class="line">    A.name <span class="keyword">AS</span> table_name,</div><div class="line">    B.name <span class="keyword">AS</span> column_name,</div><div class="line">    C.VALUE <span class="keyword">AS</span> column_description</div><div class="line"><span class="keyword">FROM</span> sys.tables A        <span class="keyword">INNER</span> <span class="keyword">JOIN</span> sys.columns B <span class="keyword">ON</span> B.object_id = A.object_id</div><div class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> sys.extended_properties C <span class="keyword">ON</span> C.major_id = B.object_id</div><div class="line"><span class="keyword">AND</span> C.minor_id = B.column_id</div><div class="line"><span class="keyword">WHERE</span></div><div class="line">    A.name = <span class="string">'T_XYPJ_XXTB_ZBTB'</span></div></pre></td></tr></table></figure>
</li>
<li><p>数据库的备份与还原</p>
<ul>
<li>备份<br><img src="index_files/ace784a8-5391-4b7a-8a3b-ca0d28d905bd.jpg" alt=""><br><img src="index_files/5df7e65f-b0f4-4ceb-88b5-c54d03df9077.png" alt=""></li>
<li>还原<br><img src="index_files/e226dad2-81c5-45ab-adf2-f6b116fa9b04.jpg" alt=""><br><img src="index_files/28c138bb-565e-467d-9628-0b7834b0e813.png" alt=""></li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SQLServer自带的工具不好用，所以这里主要介绍使用Navicat操作SQLserver以及SQLserver的一些常用知识点。&lt;br&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://heji.website/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="http://heji.website/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="SQL" scheme="http://heji.website/tags/SQL/"/>
    
      <category term="SQLServer" scheme="http://heji.website/tags/SQLServer/"/>
    
  </entry>
  
</feed>
