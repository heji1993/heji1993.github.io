<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>何机的技术博客</title>
  <subtitle>No pains,no gains</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://heji.website/"/>
  <updated>2017-06-15T10:26:53.519Z</updated>
  <id>http://heji.website/</id>
  
  <author>
    <name>何机</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>jsonp的实现原理</title>
    <link href="http://heji.website/2017/06/15/jsonp%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <id>http://heji.website/2017/06/15/jsonp的实现原理/</id>
    <published>2017-06-15T10:15:20.785Z</published>
    <updated>2017-06-15T10:26:53.519Z</updated>
    
    <content type="html"><![CDATA[<p>每次使用jsonp时都会忍不住感叹作者巧妙的设计思路。</p>
<a id="more"></a>
<ul>
<li><p>jsonp原理</p>
<p>  在同源策略下，在某个服务器下的页面是无法获取到该服务器以外的数据的，但img、iframe、script等标签是个例外，这些标签可以通过src属性请求到其他服务器上的数据。<br>而JSONP就是通过script节点src调用跨域的请求。<br>当我们通过JSONP模式请求跨域资源时，服务器返回给客户端一段javascript代码，这段javascript代码自动调用客户端回调函数。</p>
</li>
<li><p>例子</p>
<p>  客户端<code>http://localhost:8080</code>访问服务器<code>http://localhost:9090/test</code>，正常情况下，这是不允许的。因为这两个URL是不同域的。</p>
<p>  若我们使用JSONP格式发送请求的话？<code>http://localhost:9090/test/testjsonp.do?cb=jsonpCallback&amp;a=12&amp;b=3</code></p>
<p>  则服务器返回的数据如下：</p>
<p>  <code>jsonpCallback(15)</code></p>
<p>  仔细看看服务器返回的数据，其实就是一段javascript代码，这就是函数名（参数）格式。</p>
<p>  服务器返回数据后，浏览器执行jsonpCallback函数。</p>
<p>  因此，客户端需要jsonpCallback函数。</p>
<p>  <strong>注意：其中url地址中的cb和jsonpCallback是随意命名的</strong></p>
</li>
<li><p>代码实现</p>
<p>  js代码：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> url = <span class="string">"http://localhost:9090/test/testjsonp.do?cb=jsonpCallback&amp;a=12&amp;b=3"</span>;   </div><div class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);   </div><div class="line">script.setAttribute(<span class="string">'src'</span>, url);  <span class="comment">//load javascript    </span></div><div class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>].appendChild(script);   </div><div class="line">      </div><div class="line"><span class="comment">//回调函数  </span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonpCallback</span>(<span class="params">data</span>)</span>&#123;  </div><div class="line">    alert(data);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  服务器代码Java为例：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">   Integer a = Integer.parseInt(request.getParameter(<span class="string">"a"</span>));</div><div class="line">Integer b = Integer.parseInt(request.getParameter(<span class="string">"b"</span>));</div><div class="line">String jsonp=request.getParameter(<span class="string">"cb"</span>);  </div><div class="line">   response.getWriter().println(jsonp+<span class="string">"("</span>+(a+b)+<span class="string">")"</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>jQuery的jsonp</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">    url: <span class="string">'http://localhost:9090/test/testjsonp.do'</span>, <span class="comment">//不同的域</span></div><div class="line">    type: <span class="string">'GET'</span>, <span class="comment">// jsonp模式只有GET 是合法的</span></div><div class="line">    data: &#123;</div><div class="line">        <span class="string">'a'</span>: <span class="number">12</span>,</div><div class="line">        <span class="string">'b'</span>: <span class="number">3</span></div><div class="line">    &#125;,</div><div class="line">    dataType: <span class="string">'jsonp'</span>, <span class="comment">// 数据类型</span></div><div class="line">    jsonp: <span class="string">'cb'</span>, <span class="comment">// 指定回调函数名，与服务器端接收的一致，并回传回来</span></div><div class="line">    success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line"> 	alert(data);</div><div class="line"> &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<pre><code>其实jquery 内部会转化成`http://localhost:9090/test/testjsonp.do?cb=jQuery2030038573939353227615_1402643146875&amp;a=12&amp;b=3`

然后动态加载`&lt;script type=&quot;text/javascript&quot;src=&quot;http://localhost:9090/test/testjsonp.do?cb=jQuery2030038573939353227615_1402643146875&amp;a=12&amp;b=3&quot;&gt;&lt;/script&gt;`

然后后端就会返回`jQuery2030038573939353227615_1402643146875(传递参数 )`。

在这个过程，jQuery自动帮你生成jQuery2030038573939353227615_1402643146875回调函数并把数据取出来供success属性方法来调用。执行完毕后就 `&lt;script&gt;`会被移除
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每次使用jsonp时都会忍不住感叹作者巧妙的设计思路。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://heji.website/categories/JavaScript/"/>
    
    
      <category term="web前端" scheme="http://heji.website/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://heji.website/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>sublime3使用指南</title>
    <link href="http://heji.website/2017/06/08/sublime3%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <id>http://heji.website/2017/06/08/sublime3使用指南/</id>
    <published>2017-06-08T06:37:38.695Z</published>
    <updated>2017-06-15T10:27:33.421Z</updated>
    
    <content type="html"><![CDATA[<p>正所谓 工欲善其事，必先利其器。牢记一些前端开发工具的使用技巧能大大提高我们的效率。</p>
<a id="more"></a>
<h3 id="插件备份"><a href="#插件备份" class="headerlink" title="插件备份"></a>插件备份</h3><p>优雅使用Sublime Text，插件则是不可缺少的存在；而插件的备份就显得非常的重要（譬如：各平台同步；更换系统/电脑，迅速使用已安装的插件）。这事儿也很简单，只需将<code>Packages</code>（Preferences &gt; Browse Packages）中内容拷贝一份，同步云端即可；至于存储何处，云盘，Github，皆无不可；譬如先前有存一份于sublime_packages，每有所需只要 Down 下来，替换掉原<code>Packages</code>下内容就好。</p>
<h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><ul>
<li><p>插件安装方式一：直接安装：</p>
<blockquote>
<p>安装Sublime text 3插件很方便，可以直接下载安装包解压缩到Packages目录（菜单-&gt;preferences-&gt;packages）。</p>
</blockquote>
</li>
<li><p>插件安装方式二：使用Package Control组件安装：</p>
<blockquote>
<p>按 Ctrl+` 调出console（注：安装有QQ输入法的这个快捷键会有冲突的，输入法属性设置-输入法管理-取消热键切换至QQ拼音）粘贴以下代码到底部命令行并回车：</p>
</blockquote>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib.request,os,hashlib; h = <span class="string">'df21e130d211cfc94d9b0905775a7c0f'</span> + <span class="string">'1e3d39e33b79698005270310898eea76'</span>; pf = <span class="string">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( <span class="string">'http://packagecontrol.io/'</span> + pf.replace(<span class="string">' '</span>, <span class="string">'%20'</span>)).read(); dh = hashlib.sha256(by).hexdigest(); print(<span class="string">'Error validating download (got %s instead of %s), please try manual install'</span> % (dh, h)) <span class="keyword">if</span> dh != h <span class="keyword">else</span> open(os.path.join( ipp, pf), <span class="string">'wb'</span> ).write(by)</div></pre></td></tr></table></figure>
<p>  重启Sublime Text 3。如果在Perferences-&gt;package settings中看到package control这一项，则安装成功。按下Ctrl+Shift+P调出命令面板输入install 调出 Install Package 选项并回车，然后在列表中选中要安装的插件。</p>
</li>
</ul>
<h3 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h3><ul>
<li><p><a href="https://sublime.wbond.net/packages/Emmet" title="Emmet" target="_blank" rel="external">Emmet</a></p>
<p>  前端开发必备，Write less , show more，使用Tab键触发。安装Emmet后，可以输入少量代码后按Tab键，系统会自动补全代码。</p>
</li>
<li><p><a href="https://sublime.wbond.net/packages/AutoFileName" title="AutoFileName" target="_blank" rel="external">AutoFileName</a></p>
<p>  快速列出你想引用的文件夹里面所有文件的名字，比如想引用test/img/1.png。只需要输入/img,该插件就会自动提示/img下面的所有文件名，如图</p>
<p>  <img src="http://note.youdao.com/yws/api/personal/file/D11B2D26219349E0B6E7C6FCB029491C?method=download&amp;shareKey=b9cc23043616216dc8ecfebb5471dc8e" alt="AutoFileName"></p>
</li>
<li><p><a href="https://github.com/facelessuser/BracketHighlighter" title="BracketHighlighter" target="_blank" rel="external">BracketHighlighter</a></p>
<p>  高亮显示<code>[]</code>, <code>()</code>, <code>{}</code>, <code>&quot;&quot;</code>, <code>&#39;&#39;</code>, <code>&lt;tag&gt;&lt;/tag&gt;</code>符号，便于查看起始和结束标记。如图：</p>
<p>  <img src="http://note.youdao.com/yws/api/personal/file/EE35691601694832B110E475D0BE4DAA?method=download&amp;shareKey=cf1e455f93c110e9cf9c5ddbff8f71e9" alt="BracketHighlighter">    </p>
</li>
<li><p><a href="https://sublime.wbond.net/packages/ColorPicker" title="ColorPicker" target="_blank" rel="external">ColorPicker</a></p>
<p>  调色板，需要输入颜色时，可直接选取颜色。使用快捷键ctrl+shift+c即可打开调色板。需要注意的是，这个快捷键可能会打不开调色板，原因是该快捷键被占用了，最直接的解决办法是直接在Preferences→Key Bindings-User中配置：“{ “keys”: [“ctrl+shift+c”], “command”: “color_pick”},”</p>
</li>
<li><p><a href="https://sublime.wbond.net/packages/JsFormat" title="JsFormat" target="_blank" rel="external">JsFormat</a></p>
<p>  功能：Javascript的代码格式化插件</p>
<p>  使用：在已压缩的JS文件中，右键选择jsFormat或者使用默认快捷键（Ctrl+Alt+F）</p>
</li>
<li><p><a href="https://github.com/wbond/sublime_alignment" title="Alignment" target="_blank" rel="external">Alignment</a></p>
<p>  功能：代码对齐</p>
<p>  使用：默认快捷键Ctrl+Alt+A和QQ截屏冲突，可设置其他快捷键如：Ctrl+Shift+Alt+A；先选择要对齐的文本</p>
</li>
<li><p><a href="https://sublime.wbond.net/packages/Autoprefixer" title="sublime-autoprefixer" target="_blank" rel="external">sublime-autoprefixer</a></p>
<p>  功能：CSS添加私有前缀</p>
<p>  使用：Ctrl+Shift+P打开命令，选择autoprefixer即可。需要安装node.js。或者配置快捷键</p>
</li>
<li><p><a href="https://sublime.wbond.net/packages/DocBlockr" title="DocBlockr" target="_blank" rel="external">DocBlockr</a></p>
<p>  功能：生成优美注释</p>
<p>  使用：输入<code>/*</code>、<code>/**</code>然后回车，还有很多用法，请参照官网文档</p>
</li>
<li><p><a href="https://github.com/wbond/sublime_terminal" title="Terminal" target="_blank" rel="external">Terminal</a></p>
<p>  功能：打开终端</p>
<p>  使用：<code>ctrl+shift+t</code>基于文件打开终端；<code>ctrl+alt+shift+t</code>基于项目打开终端</p>
</li>
<li><p><a href="https://github.com/revolunet/sublimetext-markdown-preview" title="MarkdownPreview" target="_blank" rel="external">MarkdownPreview</a></p>
<p>  功能：MarkdownPreview提供markdown文件的预览。</p>
</li>
</ul>
<h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><ul>
<li>Ctrl + `： 打开Sublime Text控制台（Esc退出）</li>
<li>Ctrl+Shift+P：打开命令面板（Esc退出）</li>
<li>Ctrl + K + B： 组合键，显示或隐藏侧栏</li>
<li>Alt ：光标调到菜单栏，↑↓←→ 移动光标</li>
</ul>
<h4 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h4><ul>
<li>Ctr+Shift+D：复制粘贴光标所在行</li>
<li>Alt+.：关闭标签</li>
<li>Ctrl+/：用//注释当前行。</li>
<li>Ctrl+Shift+/：用/**/注释。</li>
<li>Ctrl + Enter： 在当前行下面新增一行然后跳至该行</li>
<li>Ctrl + Shift + Enter： 在当前行上面增加一行并跳至该行</li>
<li>Ctrl + ←/→： 进行逐词移动，</li>
<li>Ctrl + Shift + ←/→： 进行逐词选择</li>
<li>Ctrl + Shift + ↑/↓： 移动当前行（文件会被修改）</li>
<li>Ctrl+Z：撤销</li>
<li>Ctrl+Y：恢复撤销</li>
<li>Ctrl+J：合并行（已选择需要合并的多行时）</li>
</ul>
<h4 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h4><ul>
<li>Ctrl + D：选择当前光标所在的词并高亮该词所有出现的位置，再次Ctrl + D，会选择该词出现的下一个位置</li>
<li>Ctrl+L ：选择光标所在整行</li>
<li>Ctrl+X：删除光标所在行</li>
<li>Ctrl + J： 把当前选中区域合并为一行</li>
</ul>
<h4 id="屏幕"><a href="#屏幕" class="headerlink" title="屏幕"></a>屏幕</h4><ul>
<li>F11： 切换普通全屏</li>
<li>Shift + F11： 切换无干扰全屏</li>
</ul>
<h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><ul>
<li><p><a href="http://equinsuocha.io/material-theme/#/default" title="material-theme" target="_blank" rel="external">material-theme</a></p>
<p>  安装：使用<code>install package</code>安装<code>Material Theme</code></p>
<p>  激活主题：<br>  <code>Preferences</code> &gt; <code>Settings - User</code>添加以下行：</p>
  <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">"color_scheme": "Packages/Material Theme/schemes/Material-Theme.tmTheme",</div><div class="line">"theme": "Material-Theme.sublime-theme",</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;正所谓 工欲善其事，必先利其器。牢记一些前端开发工具的使用技巧能大大提高我们的效率。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://heji.website/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="web前端" scheme="http://heji.website/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="工具" scheme="http://heji.website/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Git和Github使用教程</title>
    <link href="http://heji.website/2017/05/27/Git%E5%92%8CGithub%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>http://heji.website/2017/05/27/Git和Github使用教程/</id>
    <published>2017-05-27T03:18:53.435Z</published>
    <updated>2017-05-27T03:26:17.840Z</updated>
    
    <content type="html"><![CDATA[<p>有段时间没有使用git和github了，本着好记性不如烂笔头，重新梳理了下git和github的使用方法。</p>
<a id="more"></a>
<p>有段时间没有使用git和github了，本着好记性不如烂笔头，重新梳理了下git和github的使用方法。</p>
<h3 id="Git和Github"><a href="#Git和Github" class="headerlink" title="Git和Github"></a>Git和Github</h3><p>简单来说Git就是一个版本管理工具，github是一个用git做版本控制的项目托管平台。</p>
<h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><h4 id="注册github账户及创建远程仓库"><a href="#注册github账户及创建远程仓库" class="headerlink" title="注册github账户及创建远程仓库"></a>注册github账户及创建远程仓库</h4><p>要想使用github第一步当然是在<a href="https://github.com/" title="github" target="_blank" rel="external">github官网</a> 上注册一个账户。 之后就可以创建仓库了（免费用户只能建公共仓库），Create a New Repository，填好名称后Create，之后会出现一些仓库的配置信息，这也是一个git的简单教程。</p>
<h4 id="git的安装和配置"><a href="#git的安装和配置" class="headerlink" title="git的安装和配置"></a>git的安装和配置</h4><ul>
<li>根据实际情况下载git客户端安装</li>
<li><p>配置git(以下命令建议在git bash执行)</p>
<ul>
<li><p>首先在本地创建ssh key；</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C <span class="string">"your_email@youremail.com"</span></div></pre></td></tr></table></figure>
<p>  后面的your_email@youremail.com改为你在github上注册的邮箱，之后会要求确认路径和输入密码，我们这使用默认的一路回车就行。成功的话会在~/下生成.ssh文件夹(windows下路径为<code>C:\Users\Administrator\.ssh</code>)，进去，打开id_rsa.pub，复制里面的key。</p>
</li>
<li><p>在github上配置ssh key<br>  回到github上，进入 Account Settings（账户配置），左边选择SSH Keys，Add SSH Key,title随便填，粘贴在你电脑上生成的key。<br>  <img src="http://note.youdao.com/yws/api/personal/file/A3DE34DC3BCB4EBBBA66C6250D77115C?method=download&amp;shareKey=863d9d9a53a52cad46a8aaa37deedbf4" alt="配置key" title="配置key"></p>
</li>
<li><p>验证是否配置成功<br>  在gitbash中输入命令：</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com</div></pre></td></tr></table></figure>
<p>  如果是第一次的会提示是否continue，输入yes就会看到：You’ve successfully authenticated, but GitHub does not provide shell access 。这就表示已成功连上github。</p>
</li>
<li><p>配置username和email<br>  在gitbash中输入命令：</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name <span class="string">"your name"</span></div><div class="line">$ git config --global user.email <span class="string">"your_email@youremail.com"</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h4 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h4><p>在介绍正式使用之前，先介绍下git的版本管理机制。<br>你的本地仓库由 git 维护的三棵”树”组成。第一个是你的 工作目录（workspace ），它持有实际文件；第二个是 暂存区（stage），它像个缓存区域，临时保存你的改动；最后是 HEAD（Local repository），它指向你最后一次提交的结果。<br>下面以一张图说明本地仓库和远程仓库的关系：<br><img src="http://note.youdao.com/yws/api/personal/file/78D5A4F8D8244F8FAD9DB7F4634212B6?method=download&amp;shareKey=2e337c1275b5ce45edd42928fd70301b" alt="关系图以及命令的影响"></p>
<h4 id="本地git使用"><a href="#本地git使用" class="headerlink" title="本地git使用"></a>本地git使用</h4><ul>
<li><p>创建本地仓库</p>
<p>  新建项目文件夹，打开，执行命令初始化为git仓库</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git init</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>本地git常用命令</p>
<ul>
<li><p>查看变化<code>git status</code></p>
<p>  我在上一步创建的文件夹新建一个文件，这时我使用<code>git status</code>命令可以查看发生了什么变化。</p>
</li>
<li><p>提交修改到缓存区<code>git add *</code></p>
<p>  它告诉我有一个还未追踪的文件，并提示我可以使用 <code>git add &lt;file&gt;...</code>把它加进去。使用命令<code>git add *</code>，添加所有修改到缓存区，*表示所有。</p>
</li>
<li><p>提交修改到HEAD</p>
<p>  接着，再执行<code>git commit -m &quot;提交注释&quot;</code>把缓存区的修改提交到HEAD</p>
</li>
<li><p>未被追踪和已追踪</p>
<p>  然后我们继续修改文件的内容，然后使用<code>git status</code>查看变化，可以看到，这次的提示和新增时查看状态的提示不同，因为新增文件时文件尚未被追踪（untracked），而这次是更改已经追踪（tracked）的文件。</p>
</li>
<li><p>比较工作空间和HEAD的文件<code>git diff</code></p>
<p>  我们可以通过<code>git diff</code>来比较工作空间的文件与HEAD最新一次commit文件。</p>
</li>
<li><p>撤销修改<code>git checkout -- .</code></p>
<p>  假如我想撤销修改，执行<code>git checkout -- .</code>，小数点表示撤销所有。撤销之后执行<code>git status</code>会提示没有需要提交的内容。</p>
</li>
<li><p>查看提交日志<code>git log</code></p>
<p>  再次修改文件，接着执行<code>git add *</code>和<code>git commit -m &quot;&quot;</code>添加并提交到HEAD，然后再执行<code>git log</code>命令可以看到有两个提交记录</p>
</li>
<li><p>版本回退<code>git reset --hard xxx</code>，xxx表示版本号</p>
<p>  从刚才的 <code>git log</code>可以查看提交的版本<br>  <img src="http://note.youdao.com/yws/api/personal/file/AFB6CB8A14064D7580FB91F8EE80C0E3?method=download&amp;shareKey=7fd0a6c5b4019b1adfa133b115de1186" alt="提交的记录"></p>
<p>  假如我们想要回到最初的版本，执行命令<code>git reset --hard 1df0573</code>即可，版本号取前七位。此时，再次执行<code>git log</code>可以看到只有一个提交记录了。</p>
<p>  假如我们又想回到最新版，执行<code>git reflog</code>可以查看HEAD的变化情况</p>
<p>  <img src="http://note.youdao.com/yws/api/personal/file/3EFFACC15A0841E4BE0737552FD915AE?method=download&amp;shareKey=0104c52a00365166b59a11074ba39a0d" alt="reflog"></p>
<p>  此时，我再次使用reset，将HEAD指向 ad93b89，即可回到第一次reset前的状态了</p>
</li>
<li><p>清除未追踪的文件<code>git clean -xf</code></p>
<p>  假如我新建了一个文件，此时文件处于未追踪状态，执行checkout命令是不能撤销的。需要使用<code>git clean -xf</code>命令来清除所有未追踪的文件</p>
</li>
</ul>
</li>
</ul>
<h4 id="github与git的关联（上文已完成本地git与github的连接）"><a href="#github与git的关联（上文已完成本地git与github的连接）" class="headerlink" title="github与git的关联（上文已完成本地git与github的连接）"></a>github与git的关联（上文已完成本地git与github的连接）</h4><ul>
<li><p>本地仓库与远程仓库的关联</p>
<p>  在本地仓库执行命令：</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote add origin git@github.com:yourName/yourRepo.git</div></pre></td></tr></table></figure>
<p>  后面的yourName和yourRepo表示你在github的用户名和刚才新建的仓库</p>
</li>
<li><p>获取远程仓库最新资源 <code>git pull origin master</code></p>
<p>  如果你在创建 repository 的时候，加入了 README.md 或者 LICENSE ，那么 github 会拒绝你的 push 。你需要先执行</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git pull origin master</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>将本地仓库推送到远程仓库 <code>git push</code><br>  执行命令<code>git push</code>可将本地仓库最新提交的版本（HEAD）推送至远程仓库</li>
</ul>
<h3 id="GitHub团队项目合作流程"><a href="#GitHub团队项目合作流程" class="headerlink" title="GitHub团队项目合作流程"></a>GitHub团队项目合作流程</h3><h4 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h4><p>首先把队友直接push的权限关掉，即设置成Read。这样可以防止队友误操作，未经审核就把代码push到团队项目上。<br>Teams用来分配issue的时候会用到，所以保留下来，并不是没有用。</p>
<p><img src="http://note.youdao.com/yws/api/personal/file/DF360C4BB2774817BB419976AC5BC276?method=download&amp;shareKey=81ec1aa9e41e7fff40e61a91d468ffce" alt="前期准备" title="前期准备"></p>
<h4 id="创建开发分支"><a href="#创建开发分支" class="headerlink" title="创建开发分支"></a>创建开发分支</h4><p>master分支一般用来发布稳定版本，dev分支（开发分支）用来发布开发版本。<br>输入分支名称后，下面会跳出Create branch，点击即可创建。</p>
<blockquote>
<p>下面图片写的是develop，是因为我们这个项目已经有dev分支了。如果你们没有dev分支，那么名字改成dev即可。这个影响不大。</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/api/personal/file/B1AB493C7A064E90BC0722AC74D1EAFC?method=download&amp;shareKey=27f9abe03e6fb5c2c96574893910c0ee" alt="创建分支" title="创建分支"></p>
<p>分支创建完毕后，会自动跳转到dev分支。由于dev分支是从master分支上创建的，因此内容与master分支一致。</p>
<h4 id="Fork项目到个人的仓库"><a href="#Fork项目到个人的仓库" class="headerlink" title="Fork项目到个人的仓库"></a>Fork项目到个人的仓库</h4><p>点击右上角的Fork，并选择你的账号（一般在第一个）。就可以Fork团队项目到个人仓库啦。</p>
<p><img src="http://note.youdao.com/yws/api/personal/file/84AB82E3ED404559B9C1321398015307?method=download&amp;shareKey=61845cecd2d27c868e23c55a04fec4f9" alt="fork仓库" title="fork仓库"></p>
<p>Fork完成后</p>
<p><img src="http://note.youdao.com/yws/api/personal/file/0FBEA79EAB9240C8BA763DF361BF04C0?method=download&amp;shareKey=5bbabc3d7ce01982469c27cf9487f233" alt="fork完成" title="fork完成"></p>
<h4 id="Clone项目到本地"><a href="#Clone项目到本地" class="headerlink" title="Clone项目到本地"></a>Clone项目到本地</h4><p>打开git命令行，输入指令和fork到个人仓库的地址，回车即可克隆到本地<br><img src="http://note.youdao.com/yws/api/personal/file/0EF394F6DBC64230B99FE78A882E5153?method=download&amp;shareKey=6e62648bf41d5a9ba3eac865710ee6f8" alt="clone项目到本地" title="clone项目到本地"></p>
<p>使用 <code>git branch</code> 命令查看本地分支，发现本地只有master分支。如下图的①</p>
<p><img src="http://note.youdao.com/yws/api/personal/file/F176652A8A0B41EAB94AAE76716AB271?method=download&amp;shareKey=7c9f0f173827332e3bf661d63251a4a6" alt="创建分支" title="创建分支"></p>
<p>如上图的②，使用 <code>git branch -a</code> 查看所有分支，就能看到远程分支。</p>
<p>根据远程分支，我们可以创建一个新的本地分支dev，并把该项目的dev分支的内容放到本地dev分支。如上图③。</p>
<blockquote>
<p><code>git checkout -b dev origin/dev</code> 的意思是，创建一个dev分支（-b），并把远程dev分支（origin/dev）的内容放在该分支内。接着切换到该分支（checkout）</p>
</blockquote>
<p>现在使用 <code>git branch</code> 可以查看两个分支，并且用 <code>ls</code> 或者 <code>dir</code> 就能看到dev分支的内容了。想切换回master分支的时候，再用 <code>git checkout master</code> 即可。</p>
<p><img src="http://note.youdao.com/yws/api/personal/file/B81EE261B7FF410F88CA93485DFD62B6?method=download&amp;shareKey=3da4ec96f409dbc9ab99ac3224e617e3" alt="查看分支" title="查看分支"></p>
<p>上面的操作完成后，你就可以在本地进行开发了。但是如果要将你修改完的代码合并到团队项目上，还需要进行下面的操作。</p>
<h4 id="和团队项目保持同步"><a href="#和团队项目保持同步" class="headerlink" title="和团队项目保持同步"></a>和团队项目保持同步</h4><p>首先查看有没有设置upstream，使用 <code>git remote -v</code> 命令来查看。如下图①</p>
<p><img src="http://note.youdao.com/yws/api/personal/file/EC1A695DA79B489086DF6D97277F6AC1?method=download&amp;shareKey=642053c34763e637f53f9e7df89239ae" alt="设置upstream" title="设置upstream"></p>
<p>如果没有显示upstream，则使用 <code>git remote add upstream</code> 团队项目地址 命令。如上图②<br>接着再次使用 <code>git remote -v</code> ，如果如上图③，显示出了upstream，那么就设置好了</p>
<p>开始同步。首先执行 <code>git fetch upstream</code> 获取团队项目最新版本。如下图①</p>
<p><img src="http://note.youdao.com/yws/api/personal/file/F7E5EEE2AA4A42F196682E689A82F660?method=download&amp;shareKey=5a567212bb15436251c8ce2349f91123" alt="同步代码合并分支" title="同步代码合并分支"></p>
<p>此时并没有把最新版本合并到你本地的分支上，因此还需要一步。如上图②，当前分支是dev分支，执行 <code>git merge upstream/dev</code> 命令后，会将源分支（upstream/dev）合并到当前分支（dev）。</p>
<blockquote>
<p>如果你是在本地的master分支上开发，那么在使用该命令前，先切换到master分支。<br>merge的时候，有可能碰到冲突。需要解决冲突才能继续下面的操作。冲突的解决可以参考→ 冲突的解决</p>
</blockquote>
<h4 id="push修改到自己fork的项目上"><a href="#push修改到自己fork的项目上" class="headerlink" title="push修改到自己fork的项目上"></a>push修改到自己fork的项目上</h4><p>解决冲突后，就可以使用 git push 命令将本地的修改同步到自己的GitHub仓库上了。</p>
<blockquote>
<p>注意，在当前所在分支使用push，会push到与这个分支相关联的远程仓库分支。这里dev分支与origin/dev关联，因此push到GitHub上的dev分支。</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/api/personal/file/C82F8928704A4EC6B825BC2444A91B34?method=download&amp;shareKey=9429f4ee7f6e786cba2415cc0c001701" alt="push修改" title="push修改"></p>
<h4 id="请求合并到团队项目上"><a href="#请求合并到团队项目上" class="headerlink" title="请求合并到团队项目上"></a>请求合并到团队项目上</h4><p>首先到你的GitHub上，进入你Fork的仓库里。点击红框处的Pull request</p>
<p><img src="http://note.youdao.com/yws/api/personal/file/3645DDFD28EB4ABD96FA38B000EC4CB8?method=download&amp;shareKey=4b5b1e03241c5c9e671068b689cd1b1a" alt="请求合并" title="请求合并"></p>
<p>下图左边红框，表示要合并到fzu2015/CourseManagement项目的dev分支。<br>下图右边红框，表示要从自己仓库的dev分支发起合并请求。<br>点击红框处的 Create pull request就可以发送合并请求了。</p>
<p><img src="http://note.youdao.com/yws/api/personal/file/E24798213BF64466AF41A9E874508412?method=download&amp;shareKey=d9f951395a7a8b5375e130acee2cbd0f" alt="请求合并" title="请求合并"></p>
<p>当然，在发送请求之前，你可以检查一下你都改了哪些东西。在上面那个页面往下拉，就可以看到两者的对比。</p>
<p>以上操作结束后，团队成员的流程就结束了。最后一步交给团队项目负责人来完成。</p>
<h4 id="团队项目负责人审核及同意合并请求"><a href="#团队项目负责人审核及同意合并请求" class="headerlink" title="团队项目负责人审核及同意合并请求"></a>团队项目负责人审核及同意合并请求</h4><p>首先进入GitHub的团队项目仓库中。此时右边的Pull requests显示当前项目有几个Pull request。点击进入查看。</p>
<p><img src="http://note.youdao.com/yws/api/personal/file/244B2BA92CC343E1AB825E9F6F443DA5?method=download&amp;shareKey=b2050436c2f3e8db46d81c5f6dc100c4" alt="同意合并" title="同意合并"></p>
<p>选择一个Pull request</p>
<p>项目负责人审核有两个要注意的地方</p>
<ul>
<li>一个是下图的①。一定要看清楚是合并到哪个分支。这里是从schaepher的dev分支合并到fzu2015的dev分支。</li>
<li>另一个是下图的②。点击进去后，就可以查看该Pull request对项目做了哪些修改。这样如果有问题，可以及时发现，并关闭该Pull request。</li>
</ul>
<blockquote>
<p>如果关闭了，一定要告诉队友，否则他可能会不知道。虽然也可以直接在下面发布Comment告诉他，但队友不一定看到。</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/api/personal/file/AC10146C2964456CB91F43F7A4B5E6B8?method=download&amp;shareKey=53c9f57b39d02521e21f13859df07fb7" alt="审核合并" title="审核合并"></p>
<p>如果没有问题，可以点击Merge pull request。这样就合并好了。</p>
<p>以上文章部分出自<a href="http://www.cnblogs.com/schaepher/p/4933873.html" title="schaepher的博客" target="_blank" rel="external">schaepher的博客</a>，原文链接：<code>http://www.cnblogs.com/schaepher/p/4933873.html</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有段时间没有使用git和github了，本着好记性不如烂笔头，重新梳理了下git和github的使用方法。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://heji.website/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="web前端" scheme="http://heji.website/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="工具" scheme="http://heji.website/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>移动端全适配解决方案——方案篇</title>
    <link href="http://heji.website/2017/05/26/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%85%A8%E9%80%82%E9%85%8D%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E2%80%94%E2%80%94%E6%96%B9%E6%A1%88%E7%AF%87/"/>
    <id>http://heji.website/2017/05/26/移动端全适配解决方案——方案篇/</id>
    <published>2017-05-26T00:58:32.271Z</published>
    <updated>2017-05-26T01:00:00.798Z</updated>
    
    <content type="html"><![CDATA[<p>现在来介绍下移动端全适配的具体实现方案，以网易新闻和手淘为例。</p>
<a id="more"></a>
<h3 id="面临的问题"><a href="#面临的问题" class="headerlink" title="面临的问题"></a>面临的问题</h3><p>在不同大小和高清的屏幕下：</p>
<ul>
<li>如何保证 界面布局 一致性：不错乱，不变形</li>
<li>如何保证 字体大小 一致性：大屏显示更大，小屏显示更小或更多</li>
<li>如何保证 1px边框 一致性：不同的高清屏也在正常显示1px的高度大小</li>
<li>如何保证 图片清晰度 一致性：不同大小和高清屏下都能看到清晰的图片</li>
</ul>
<p>考虑优先级：<br>布局 &gt; 字体大小 &gt; 1px边框 &gt; 高清图</p>
<h3 id="网易新闻的方案"><a href="#网易新闻的方案" class="headerlink" title="网易新闻的方案"></a>网易新闻的方案</h3><ul>
<li><p>使用理想视口作为可视视口的尺寸</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no"</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>设置html元素的font-size</p>
<p>  理论上来讲，html元素的字体大小是任意的。在设置了不缩放的情况下（此时可视视口等于理想视口），设备的屏幕越大html的字体大小应该设置得越大。为方便设计，取可视视口宽度乘以一个系数作为html元素的字体大小</p>
<p>  网易新闻手机网易网选择的系数为 100 / 750，这个系数可以如下推出：</p>
<p>  750px 是设计稿的宽度（以iphone6的物理像素数为标准），100是期望的换算比例。那么html元素的字体大小被设置为可视视口的宽度 * 100/750 即 可视视口宽度/7.5。也就是说1 rem = 可视视口宽 / 7.5</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.documentElement.style.fontSize = <span class="built_in">window</span>.innerWidth / <span class="number">7.5</span> + <span class="string">'px'</span>; <span class="comment">//注意:这里的7.5是设计稿宽度除以100获得，以实际设计稿宽度为基准计算</span></div></pre></td></tr></table></figure>
</li>
</ul>
<pre><code>因为此时可视视口的宽度是7.5rem，布局时元素的宽度不应超过这个值，否则会出现横向滚动条。
</code></pre><ul>
<li><p>将样式中px单位转换为rem单位</p>
<p>  上面一步中已经说明，100是期望的换算比例。也就是说1rem等价于设计稿中的100px。所以，把样式表中的px单位的数值就可以转换为以rem为单位的数值了。</p>
</li>
<li><p>在最新的网易新闻页面中字体的单位也使用了 rem</p>
</li>
</ul>
<h3 id="手淘的解决方案"><a href="#手淘的解决方案" class="headerlink" title="手淘的解决方案"></a>手淘的解决方案</h3><p>手淘使用自家开发的开源库<a href="https://github.com/amfe/lib-flexible" title="flexible" target="_blank" rel="external">flexible</a>实现移动端全适配。</p>
<ul>
<li><p>设置合适的缩放比</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*如果设置了meta标签，dpr取meta标签设置的initial-scale，scale取其倒数*/</span></div><div class="line"><span class="keyword">if</span> (!dpr &amp;&amp; !scale) &#123;</div><div class="line">    <span class="keyword">var</span> isAndroid = win.navigator.appVersion.match(<span class="regexp">/android/gi</span>);</div><div class="line">    <span class="keyword">var</span> isIPhone = win.navigator.appVersion.match(<span class="regexp">/iphone/gi</span>);</div><div class="line">    <span class="keyword">var</span> devicePixelRatio = win.devicePixelRatio;</div><div class="line">    <span class="keyword">if</span> (isIPhone) &#123;</div><div class="line">        <span class="comment">// iOS下，对于2和3的屏，用2倍的方案，其余的用1倍方案</span></div><div class="line">        <span class="keyword">if</span> (devicePixelRatio &gt;= <span class="number">3</span> &amp;&amp; (!dpr || dpr &gt;= <span class="number">3</span>)) &#123;                </div><div class="line">            dpr = <span class="number">3</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (devicePixelRatio &gt;= <span class="number">2</span> &amp;&amp; (!dpr || dpr &gt;= <span class="number">2</span>))&#123;</div><div class="line">            dpr = <span class="number">2</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            dpr = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 其他设备下，仍旧使用1倍的方案</span></div><div class="line">        dpr = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    scale = <span class="number">1</span> / dpr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  对 iOS 设备 dpr = window.devicePixelRatio ，其他设备认为 dpr 为 1。比方说iphone5的dpr是2，那么在iphone5下计算的缩放比为0.5，如果没有设置缩放，那么正常情况下css中的1px对应iphone5 2px的物理像素，现在设置缩放比为0.5，这意味着css中的1px严格等于一个物理像素。这就是淘宝方案的巧妙之处了，对于 iOS 下高分辨率的设备，提供了更好的支持，解决了 1px border 问题和高清图片的问题。</p>
</li>
<li><p>设置html元素的font-size</p>
<p>  在计算 html 的 font-size 时淘宝的方案直接将可视视口的宽度乘以一个系数 0.1，由此推导换算比例：</p>
<blockquote>
<p>可视视口的宽度为 10 rem， 对应设计稿的宽度，则 1 rem        对应设计稿宽度的 1 / 10，换算时将设计稿中的长度数值除以      (设计稿宽度/10) 就可以了。<br>  例如：设计稿的宽度为 750 则设计稿中的长度数值除以 75         得到的就是以 rem 为单位的 css 长度的数值</p>
</blockquote>
<p>  在 meta 标签中的缩放比例发生变化时，设置 html 元素的 font-size</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.documentElement.style.fontSize = <span class="built_in">window</span>.innerWidth / <span class="number">10</span> + <span class="string">'px'</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>由于可视视口的宽度就是 10 rem，对元素进行布局时只要不超过 10rem 即可，另外淘宝的方案将 body 的 width 设为 100% 并对 overflow 进行 hidden，这个 100% width 会计算为布局视口的宽，也是 10rem，那么 body 内布局超出 10rem 的元素不会导致布局视口出现滚动条</p>
</li>
<li><p>淘宝的方案中对字体使用了 px 单位，这就需要对不同的视口宽度（也就是不同dpr）的设备分别进行适配，淘宝的方案是将 dpr 数值设置为 html 的 data-dpr 属性，通过css选择器选择不同 dpr 设备下的元素</p>
  <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">div &#123;</div><div class="line">    width: 1rem; </div><div class="line">    height: 0.4rem;</div><div class="line">    font-size: 12px; // 默认写上dpr为1的fontSize</div><div class="line">&#125;</div><div class="line">[data-dpr="2"] div &#123;</div><div class="line">    font-size: 24px;</div><div class="line">&#125;</div><div class="line">[data-dpr="3"] div &#123;</div><div class="line">    font-size: 36px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在来介绍下移动端全适配的具体实现方案，以网易新闻和手淘为例。&lt;/p&gt;
    
    </summary>
    
      <category term="移动端" scheme="http://heji.website/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
      <category term="移动端" scheme="http://heji.website/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
      <category term="webapp" scheme="http://heji.website/tags/webapp/"/>
    
  </entry>
  
  <entry>
    <title>移动端全适配解决方案——概念篇</title>
    <link href="http://heji.website/2017/05/26/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%85%A8%E9%80%82%E9%85%8D%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E2%80%94%E2%80%94%E6%A6%82%E5%BF%B5%E7%AF%87/"/>
    <id>http://heji.website/2017/05/26/移动端全适配解决方案——概念篇/</id>
    <published>2017-05-26T00:56:05.525Z</published>
    <updated>2017-05-26T00:58:07.176Z</updated>
    
    <content type="html"><![CDATA[<p>要搞懂移动端的适配问题，就要先搞明白像素和视口。</p>
<a id="more"></a>
<h3 id="像素"><a href="#像素" class="headerlink" title="像素"></a>像素</h3><p>在移动端给一个元素设置 <code>width:200px</code> 时发生了什么？这里的px到底是多长呢？像素是网页布局的基础，但是我们一直在用直觉使用它。</p>
<p>其实存在两种像素：</p>
<ul>
<li>设备像素<br>  屏幕的物理像素，任何设备屏幕的物理像素的数量都是固定不变的，单位是pt。</li>
<li><p>CSS像素<br>  在CSS、JS中使用的一个抽象的概念，单位是 px。</p>
<blockquote>
<p>顺便说下，CSS像素也可以称为设备独立像素(device-independent pixels)，简称为dips，单位是dp。</p>
</blockquote>
<p>  那么，我们现在再来说说一个元素 width:200px 以后会怎么样。这个元素跨越了200个CSS元素，200个CSS元素相当于多少个设备像素取决于两个条件：1、页面是否缩放；2、屏幕是否为高密度</p>
</li>
</ul>
<p>这两方面后面再解释，先梳理一下手机硬件之间的关系，注意这里使用的都是物理像素。<br>以 iPhone5 为例，我们已知的是：</p>
<ol>
<li>分辨率：1136pt x 640pt<br> 指屏幕上垂直有 1136 个物理像素，水平有 640 个物理像素</li>
<li>屏幕尺寸： 4英寸<br> 注意英寸是长度单位，不是面积单位。4英寸指的是屏幕对角线的长度。</li>
<li>屏幕像素密度：326dpi<br> 屏幕像素密度（Pibel Per Inch）简称 ppi ，单位是 dpi（dot per inch）。这里指屏幕水平或垂直每英寸有326个物理像素。原则上来说，ppi越高越好，因为图像会更加细腻清晰。<br> ppi 是可以通过 分辨率 和 屏幕尺寸 计算得到的：<br> <img src="http://note.youdao.com/yws/api/personal/file/416E980384A14720B41CB4686237F3E7?method=download&amp;shareKey=3b520718bf0ce85d8ac881a53d456093" alt=""></li>
</ol>
<h3 id="视口"><a href="#视口" class="headerlink" title="视口"></a>视口</h3><p>移动设备上有三个viewport</p>
<ul>
<li><p>layout viewport(布局视口)</p>
<p>  如果把移动设备上浏览器的可视区域设为viewport的话，某些网站就会因为viewport太窄而显示错乱，所以这些浏览器就决定默认情况下把viewport设为一个较宽的值，比如980px，这样的话即使是那些为桌面设计的网站也能在移动浏览器上正常显示了。ppk把这个浏览器默认的viewport叫做 layout viewport。这个layout viewport的宽度可以通过 <code>document.documentElement.clientWidth</code> 来获取。</p>
</li>
<li><p>visual viewport(可视视口)</p>
<p>  layout viewport的宽度是大于浏览器可视区域的宽度的，所以我们还需要一个viewport来代表 浏览器可视区域的大小，这个viewport称为visual viewport，其宽度值为横向可见CSS像素数。visual viewport的宽度可以通过<code>window.innerWidth</code> 来获取。CSS媒体查询的<code>max-width/min-width</code>取的就是可视视口的宽度</p>
</li>
<li><p>ideal viewport(理想视口)</p>
<p>  ideal viewport是指能完美适配移动设备的viewport。通过<code>screen.width</code>能获取理想视口的宽度</p>
<blockquote>
<p>定义理想视口是浏览器的事情，并不能简单地认为是开发者定义的，开发者只能使用。</p>
</blockquote>
</li>
</ul>
<p>移动设备默认的viewport是layout viewport，也就是那个比屏幕要宽的viewport，但在进行移动设备网站的开发时，我们需要的是ideal viewport。那么怎么才能得到ideal viewport呢？这就该轮到meta标签出场了</p>
<p>方法1、<code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt;</code><br>要得到ideal viewport可以把把默认的layout viewport的宽度设为移动设备的屏幕宽度。</p>
<p>方法2、<code>&lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1&quot;&gt;</code><br>因为这里的缩放值是1，是相对于ideal viewport进行缩放的。所以设置了initial-scale=1其实就是获取ideal viewport</p>
<p>但如果width 和 initial-scale=1同时出现，并且还出现了冲突呢？比如：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=400, initial-scale=1"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>width=400表示把当前viewport的宽度设为400px，initial-scale=1则表示把当前viewport的宽度设为ideal viewport的宽度。当遇到这种情况时，浏览器会取它们两个中较大的那个值。例如，当width=400，ideal viewport的宽度为320时，取的是400；当width=400， ideal viewport的宽度为480时，取的是ideal viewport的宽度。</p>
<h3 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h3><ul>
<li>缩放与设备像素、CSS像素的关系<br>  缩放是在放大或缩小CSS像素，比如一个宽度为 200px 的元素无论放大，还是200个CSS像素。但是因为这些像素被放大了，所以CSS像素也就跨越了更多的设备像素。缩小则相反。</li>
<li><p>缩放与视口</p>
<ul>
<li><p>缩放会影响视觉视口的尺寸<br>  页面被用户放大，视觉视口内CSS像素数量减少；被用户缩小，视觉视口内CSS像素数量增多就行了。这个道理应该是不难想的。</p>
</li>
<li><p>用户缩放不会影响布局视口</p>
<blockquote>
<p>注意，这是『用户缩放』，后面会说开发者设置缩放的情况</p>
</blockquote>
</li>
</ul>
</li>
<li><p>缩放比例<br>  我们在开发者工具中可以在这里查看缩放比例：<br>  <img src="http://note.youdao.com/yws/api/personal/file/74D94782CD5745FC9F42718796B69C3A?method=download&amp;shareKey=127dbbdeb05fe32cdd804bf15f68e80e" alt=""><br>  这里的 75% 是相对于理想视口的。<br>  在下载浏览器中，可以这么算（理想视口与可视视口的比）：</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">zoom level = screen.width / <span class="built_in">window</span>.innerWidth</div></pre></td></tr></table></figure>
</li>
<li><p>禁止缩放</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"user-scalable=no"</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>设置缩放</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"initial-scale=2"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>  使用initial-scale有一个副作用：同时也会将布局视口的尺寸设置为缩放后的尺寸。所以initial-scale=1与width=device-width的效果是一样的。</p>
</li>
</ul>
<h3 id="完美视口"><a href="#完美视口" class="headerlink" title="完美视口"></a>完美视口</h3><p>解决各种浏览器兼容问题的理想视口设置<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="设备像素比"><a href="#设备像素比" class="headerlink" title="设备像素比"></a>设备像素比</h3><p>在谈到像素的时候，讲到除了缩放，屏幕是否为高密度也会影响设备像素和CSS像素的关系。<br>在缩放程度为100%（这个条件很重要，因为缩放也会影响他们）时，他们的比例叫做设备像素比(device pixel ratio)：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dpr = 设备像素 / CSS像素</div></pre></td></tr></table></figure></p>
<p>可以通过JS得到： <code>window.devicePixelRatio</code><br>设备像素比也和视口有关：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dpr = 屏幕横向设备像素 / 理想视口的宽</div></pre></td></tr></table></figure></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这一篇介绍了移动端适配需要掌握的知识，先说明了移动端存在的两种像素，然后介绍了三种视口，由缩放对视口的影响引入理想视口，最后说明设备想告诉比。下一篇介绍现在市面上的适配方案。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;要搞懂移动端的适配问题，就要先搞明白像素和视口。&lt;/p&gt;
    
    </summary>
    
      <category term="移动端" scheme="http://heji.website/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
      <category term="移动端" scheme="http://heji.website/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
      <category term="webapp" scheme="http://heji.website/tags/webapp/"/>
    
  </entry>
  
  <entry>
    <title>angular自定义指令监听属性值的变化</title>
    <link href="http://heji.website/2017/05/19/angular%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4%E7%9B%91%E5%90%AC%E5%B1%9E%E6%80%A7%E5%80%BC%E7%9A%84%E5%8F%98%E5%8C%96/"/>
    <id>http://heji.website/2017/05/19/angular自定义指令监听属性值的变化/</id>
    <published>2017-05-19T09:35:54.531Z</published>
    <updated>2017-05-19T09:37:35.416Z</updated>
    
    <content type="html"><![CDATA[<p>在使用自定义指令时，若指令的值是动态变化的，自定义指令内部如何获取变化后的值呢？</p>
<a id="more"></a>
<ul>
<li><p>方法一：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//html代码</span></div><div class="line">&lt;pd-Ggdm dmjbh=<span class="string">"2055"</span> code=<span class="string">"bean.JBXX.splxdm"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">pd-Ggdm</span>&gt;</span></span></div><div class="line">//js代码</div><div class="line">angular.module("pd.ggdm" , ["pd.resource"])</div><div class="line">.directive("pdGgdm", function() &#123;</div><div class="line">	return &#123;</div><div class="line">		restrict : "E",</div><div class="line">		transclude : true, </div><div class="line">      	replace : true,  </div><div class="line">		scope : &#123;</div><div class="line">			code : "=" ,</div><div class="line">			dmjbh : "@"</div><div class="line">		&#125;,</div><div class="line">		template:"<span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>",</div><div class="line">		link: function(scope,element,attrs) &#123;</div><div class="line">		    scope.$watch('code', function(newVal)&#123;</div><div class="line">                    console.log(newVal);//每次你在controller里修改了userInfo，这里都会打印</div><div class="line">            &#125;, true);</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>  该方法使用了数据绑定，使自定义指令内的变量绑定父控制器的变量，然后监听变量的变化。</p>
</li>
<li><p>方法二</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//html代码</span></div><div class="line">&lt;pd-Ggdm dmjbh=<span class="string">"2055"</span> code=<span class="string">"&#123;&#123;bean.JBXX.splxdm&#125;&#125;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">pd-Ggdm</span>&gt;</span></span></div><div class="line">//js代码</div><div class="line">angular.module("pd.ggdm" , ["pd.resource"])</div><div class="line">.directive("pdGgdm", function() &#123;</div><div class="line">	return &#123;</div><div class="line">		restrict : "E",</div><div class="line">		transclude : true, </div><div class="line">      	replace : true,  </div><div class="line">		scope : &#123;</div><div class="line">			code : "@" ,</div><div class="line">			dmjbh : "@"</div><div class="line">		&#125;,</div><div class="line">		template:"<span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>",</div><div class="line">		link: function(scope,element,attrs) &#123;</div><div class="line">		    attrs.$observe('code', function(newVal)&#123;</div><div class="line">                //检测属性值的变化</div><div class="line">            &#125;);</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>  该方法则是监听属性值的变化</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用自定义指令时，若指令的值是动态变化的，自定义指令内部如何获取变化后的值呢？&lt;/p&gt;
    
    </summary>
    
      <category term="AngularJS" scheme="http://heji.website/categories/AngularJS/"/>
    
    
      <category term="AngularJS" scheme="http://heji.website/tags/AngularJS/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式入门</title>
    <link href="http://heji.website/2017/04/17/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://heji.website/2017/04/17/正则表达式/</id>
    <published>2017-04-17T04:13:42.503Z</published>
    <updated>2017-04-17T04:31:14.978Z</updated>
    
    <content type="html"><![CDATA[<p>正则表达式晦涩难懂，学一次忘一次，每次需要用的时候都要上网查，所以记录下来是非常有必要的。</p>
<a id="more"></a>
<p>正则表达式的功能很强大，可以检索，替换文本。<br>比如javascript里面经常会使用正则表达式来做表单验证（判断手机号码，邮箱格式等）。</p>
<h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><p><code>.</code> - 匹配除了换行符之外的任意字符<br><code>*</code> - 指定前边的内容可以连续重复使用任意次<br><code>+</code> - 指定前边的内容可以连续重复一次或多次<br><code>?</code> - 指定前边的内容可以连续重复一次或0次<br><code>{n}</code> - 指定前边的内容可以连续重复n次<br><code>{n,}</code> - 指定前边的内容可以连续重复n次或更多<br><code>{n,m}</code> - 指定前边的内容可以连续重复n到m次<br><code>\d</code> - 匹配一个数字<br><code>\w</code> - 匹配字母或数字或下划线或汉字<br><code>\s</code> - 匹配任意的空白符，包括空格，制表符(Tab)，换行符，中文全角空格等<br><code>[XYZ]</code> - 匹配中括号里面的任何一个字符<br><code>[XYZ]</code>+ - 匹配中括号中的一个或多个字符<br><code>$</code> - 匹配字符串的结尾<br><code>^</code> - 匹配字符串的开头<br><code>[a-z]</code> - 匹配任意小写字母<br><code>[^a-z]</code> - 在中括号里面的^表示否，这个例子中任何非小写字母的字符都能匹配<br><code>( )</code> - 标记一个子表达式的开始和结束位置.<br><code>|</code> - 指明两项之间的一个选择</p>
<h3 id="模式修饰符"><a href="#模式修饰符" class="headerlink" title="模式修饰符"></a>模式修饰符</h3><p><code>i</code> 不区分大小写搜索<br><code>m</code> 多行搜索<br><code>g</code> 全局搜索</p>
<h3 id="在线工具"><a href="#在线工具" class="headerlink" title="在线工具"></a>在线工具</h3><p>安利一个正则表达式<a href="http://regexr.com/" target="_blank" rel="external">在线工具</a></p>
<h3 id="JavaScript中的应用"><a href="#JavaScript中的应用" class="headerlink" title="JavaScript中的应用"></a>JavaScript中的应用</h3><ul>
<li><p>Test()<br>  这个方法接受一个字符串参数，并且返回一个bool值标示目标字符串是否匹配成功。<br>  例如：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> username = <span class="string">'JohnSmith'</span>;</div><div class="line">alert(<span class="regexp">/[A-Za-z_-]+/</span>.test(username)); <span class="comment">// returns true</span></div></pre></td></tr></table></figure>
<p>  <code>/[A-Za-z_-]+/</code> 这部分，它可以用来检测目标字符串是否满足全部由大小写字母以及下划线，减号组成。通常在验证注册表单的时候会用到。 <code>[A-Za-z_-]</code>匹配一个[]中的字符，+ 号指定前边的内容可以连续重复一次或多次。</p>
</li>
<li><p>Split()<br>  程序员对split这个方法肯定也很熟悉了，它用于把一个字符串分割成字符串数组。<br>  但是你可能不知道，它除了接受分割符参数以外，还接受正则表达式。<br>  例如：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'this is my string'</span>;    </div><div class="line">alert(str.split(<span class="regexp">/\s/</span>)); </div><div class="line"><span class="comment">// alerts "this, is, my, string";</span></div></pre></td></tr></table></figure>
<p>  <code>\s</code>匹配任意的空白符，包括空格，制表符(Tab)，换行符，中文全角空格等，于是就讲str分割成数组[this, is, my, string]</p>
</li>
<li><p>Replace()<br>  replace方法用于将匹配的内容替换成目标内容。<br>  举个栗子：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> username = <span class="string">'J;ohnSmith;@%'</span>;</div><div class="line">username = username.replace(<span class="regexp">/[^A-Za-z\d_-]+/</span>, <span class="string">''</span>);</div><div class="line">alert(username); <span class="comment">// JohnSmith;@%</span></div></pre></td></tr></table></figure>
<p>  我们把除了大小写字母以及下划线，减号之外的字符全都替换成’’。注意[]里面的^表示取反。<br>  注意上面的栗子，我们只替换了第一个字符，因为默认一匹配就不再继续搜索。我们可以直接在正则后面添加g开启全局模式。</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> username = <span class="string">'J;ohnSmith;@%'</span>;</div><div class="line">username = username.replace(<span class="regexp">/[^A-Za-z\d_-]+/g</span>, <span class="string">''</span>);</div><div class="line">alert(username); <span class="comment">// alerts JohnSmith</span></div></pre></td></tr></table></figure>
</li>
<li><p>Match()<br>  跟test不太一样，match的调用对象是待测字符串。它的返回值是所有匹配的元素组成的数组。<br>  举个栗子：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> string = <span class="string">'This is just a string with some 12345 and some !@#$ mixed in.'</span>;</div><div class="line">alert(string.match(<span class="regexp">/[a-z]+/gi</span>)); <span class="comment">// alerts "This,is,just,a,string,with,some,and,some,mixed,in"</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h3><ul>
<li><p>校验数字</p>
  <table><tr><th style="width:20%;">匹配规则</th><th style="width:30%;">正则表达式</th><th>说明</th></tr><tr><td>数字</td><td>^\d*$</td><td></td></tr><tr><td>n位的数字</td><td>^\d{n}$</td><td></td></tr><tr><td>至少n位的数字</td><td>^\d{n,}$</td><td></td></tr><tr><td>m-n位的数字</td><td>^\d{m,n}$</td><td></td></tr><tr><td>零和非零开头的数字</td><td>^(0|[1-9][0-9]*)$</td><td>|表示或</td></tr><tr><td>非零开头的最多带两位小数的数字</td><td>^([1-9]\d*)+(.\d{1,2})?$</td><td>+表示匹配第一个子项的内容必须至少出现一次(数字不能少数点开头)，?表示小数点可有可无，但最多只能有一个</td></tr><tr><td>带1-2位小数的正数或负数</td><td>^(-)?\d+.\d{1,2}$</td><td>^(-)?表示以”-“开头或者开头不是”-“</td></tr><tr><td>非零的正整数</td><td>^[1-9]\d*$</td><td></td></tr><tr><td>非零的负整数</td><td>^-[1-9]\d*$</td><td></td></tr></table>
</li>
<li><p>校验字符的表达式</p>
  <table><tr><th style="width:40%;">匹配规则</th><th style="width:50%;">正则表达式</th><th>说明</th></tr><tr><td>汉字</td><td>^[\u4e00-\u9fa5]+$</td><td></td></tr><tr><td>英文和数字</td><td>^[A-Za-z0-9]+$</td><td></td></tr><tr><td>长度为3-20的所有字符</td><td>^.{3,20}$</td><td></td></tr><tr><td>由26个英文字母组成的字符串</td><td>^[A-Za-z]+$</td><td></td></tr><tr><td>由26个大写英文字母组成的字符串</td><td>^[A-Z]+$</td><td></td></tr><tr><td>由26个小写英文字母组成的字符串</td><td>^[a-z]+$</td><td></td></tr><tr><td>由数字和26个英文字母组成的字符串</td><td>^[A-Za-z0-9]+$</td><td></td></tr><tr><td>由数字、26个英文字母或者下划线组成的字符串</td><td>^\w+$</td><td></td></tr><tr><td>中文、英文、数字包括下划线</td><td>^[\u4E00-\u9FA5A-Za-z0-9_]+$</td><td></td></tr><tr><td>中文、英文、数字但不包括下划线等符号</td><td>^[\u4E00-\u9FA5A-Za-z0-9]+$</td><td></td></tr></table>
</li>
<li><p>常用表单校验</p>
  <table><tr><th style="width:30%;">匹配规则</th><th style="width:30%;">正则表达式</th><th>说明</th></tr><tr><td>去除字符串前后空格</td><td>(^\s+)|(\s+$)</td><td></td></tr><tr><td>邮箱(xxx@xxx.xxx)</td><td>^\w+@\w+.\w+$</td><td></td></tr><tr><td>国内手机号码</td><td>^1[34578]{1}\d{9}$</td><td>以1开头，接着跟3或4或5或7或8，接着9位数字</td></tr><tr><td>帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)</td><td>^[a-zA-Z]\w{4,15}$</td><td></td></tr><tr><td>密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)</td><td>^[a-zA-Z]\w{5,17}$</td><td></td></tr><tr><td>强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)</td><td>^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$</td><td>不懂</td></tr><tr><td>日期格式</td><td>^\d{4}-\d{1,2}-\d{1,2}$</td><td></td></tr><tr><td>腾讯QQ号</td><td>^[1-9][0-9]{4,}$</td><td></td></tr><tr><td>IP地址</td><td>^(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])(.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])){3}$</td><td></td></tr></table>


</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;正则表达式晦涩难懂，学一次忘一次，每次需要用的时候都要上网查，所以记录下来是非常有必要的。&lt;/p&gt;
    
    </summary>
    
      <category term="正则表达式" scheme="http://heji.website/categories/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
    
      <category term="正则表达式" scheme="http://heji.website/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>jQuery2.1.1源码解析七、get和eq的区别</title>
    <link href="http://heji.website/2017/03/31/jQuery2.1.1%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%B8%83%E3%80%81get%E5%92%8Ceq%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://heji.website/2017/03/31/jQuery2.1.1源码解析七、get和eq的区别/</id>
    <published>2017-03-31T06:15:21.801Z</published>
    <updated>2017-03-31T06:27:00.937Z</updated>
    
    <content type="html"><![CDATA[<p>get方法获取的是元素的DOM元素，eq方法获取的是jQuery对象<br><a id="more"></a></p>
<p>get方法和eq方法的区别：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">.eq()  减少匹配元素的集合，根据index索引值，精确指定索引对象。</div><div class="line">.get() 通过检索匹配jQuery对象得到对应的DOM元素。</div></pre></td></tr></table></figure></p>
<p>上两节我们看过了get方法的源码，这次，我们来看看eq方法的源码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">eq: <span class="function"><span class="keyword">function</span>(<span class="params"> i </span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> len = <span class="keyword">this</span>.length,</div><div class="line">			j = +i + ( i &lt; <span class="number">0</span> ? len : <span class="number">0</span> );</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.pushStack( j &gt;= <span class="number">0</span> &amp;&amp; j &lt; len ? [ <span class="keyword">this</span>[j] ] : [] ); <span class="comment">//创建一个新的jQuery对象</span></div><div class="line">	&#125;</div><div class="line">...</div><div class="line">pushStack: <span class="function"><span class="keyword">function</span>(<span class="params"> elems </span>) </span>&#123;</div><div class="line">    <span class="comment">//新建一个jQuery对象然后用jQuery.merge语句把elems节点合并到新的jQuery对象上</span></div><div class="line">    <span class="keyword">var</span> ret = jQuery.merge( <span class="keyword">this</span>.constructor(), elems );</div><div class="line">    <span class="comment">//把执行find方法前的对象的引用赋给prevObject属性</span></div><div class="line">    ret.prevObject = <span class="keyword">this</span>;</div><div class="line">    ret.context = <span class="keyword">this</span>.context;</div><div class="line">    <span class="comment">// 放回新创建的jQuery对象</span></div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>jQuery的考虑很周到，通过eq方法只能产生一个新的对象，但是如果需要的是一个合集对象要怎么处理？因此jQuery便提供了一个slice方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">slice: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.pushStack( slice.apply( <span class="keyword">this</span>, <span class="built_in">arguments</span> ) ); <span class="comment">//slice.apply( this, arguments )把this指向的jQuery集合分割，然后再调用pushStack方法返回分割后的新的jQuery集合</span></div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Ps:pushStack方法其实就是对jQuery集合进行包装，供jQuery回溯使用</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;get方法获取的是元素的DOM元素，eq方法获取的是jQuery对象&lt;br&gt;
    
    </summary>
    
      <category term="jQuery" scheme="http://heji.website/categories/jQuery/"/>
    
    
      <category term="web前端" scheme="http://heji.website/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://heji.website/tags/JavaScript/"/>
    
      <category term="jQuery" scheme="http://heji.website/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>jQuery2.1.1源码解析六、仿栈与队列的操作</title>
    <link href="http://heji.website/2017/03/31/jQuery2.1.1%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E5%85%AD%E3%80%81%E4%BB%BF%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97%E7%9A%84%E6%93%8D%E4%BD%9C/"/>
    <id>http://heji.website/2017/03/31/jQuery2.1.1源码解析六、仿栈与队列的操作/</id>
    <published>2017-03-31T06:13:29.391Z</published>
    <updated>2017-03-31T06:37:23.091Z</updated>
    
    <content type="html"><![CDATA[<p>jQuery既然是模仿的数组结构，那么肯定会实现一套类数组的处理方法，比如常见的栈与队列操作push、pop、shift、unshift、求和、遍历循环each、排序及筛选等一系的扩展方法。<br><a id="more"></a></p>
<p>jQuery提供了.get()、:index()、 :lt()、:gt()、:even()及 :odd()这类索引值相关的选择器，他们的作用可以过滤他们前面的匹配表达式的集合元素:<br>我们看一下下面几个选择器的原理：<br>get方法–是通过检索匹配jQuery对象得到对应的DOM元素，如下代码实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [];</div><div class="line"><span class="keyword">var</span> slice = arr.slice;</div><div class="line">...</div><div class="line">get: <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> num != <span class="literal">null</span> ?</div><div class="line">    <span class="comment">// Return just the one element from the set</span></div><div class="line">    (num &lt; <span class="number">0</span> ? <span class="keyword">this</span>[num + <span class="keyword">this</span>.length] : <span class="keyword">this</span>[num]) :</div><div class="line">    <span class="comment">// Return all the elements in a clean array</span></div><div class="line">    slice.call(<span class="keyword">this</span>); <span class="comment">//slice指向的是Array对象的slice属性。这行代码的详细理解请查看另一篇笔记`Array.prototype.slice.call(arguments)的理解`</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>原理很简单，因为jQuery查询出来的是一个数组的DOM集合，所以就可以按照数组的方法通过下标的索引取值，当然如果num的值超出范围，比如小于元素数量的负数或等于或大于元素的数量的数，那么它将返回undefined。当没有穿参数时，返回jQuery对象数组。<br>由于是数组的关系，所以我们有几个快速方法，比如头跟尾的取值：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">first: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.eq( <span class="number">0</span> );</div><div class="line">&#125;,</div><div class="line">last: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.eq(<span class="number">-1</span>);</div><div class="line">&#125;,</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;jQuery既然是模仿的数组结构，那么肯定会实现一套类数组的处理方法，比如常见的栈与队列操作push、pop、shift、unshift、求和、遍历循环each、排序及筛选等一系的扩展方法。&lt;br&gt;
    
    </summary>
    
      <category term="jQuery" scheme="http://heji.website/categories/jQuery/"/>
    
    
      <category term="web前端" scheme="http://heji.website/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://heji.website/tags/JavaScript/"/>
    
      <category term="jQuery" scheme="http://heji.website/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>jQuery2.1.1源码解析五、回溯处理的设计</title>
    <link href="http://heji.website/2017/03/31/jQuery2.1.1%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%BA%94%E3%80%81%E5%9B%9E%E6%BA%AF%E5%A4%84%E7%90%86%E7%9A%84%E8%AE%BE%E8%AE%A1/"/>
    <id>http://heji.website/2017/03/31/jQuery2.1.1源码解析五、回溯处理的设计/</id>
    <published>2017-03-31T06:11:01.594Z</published>
    <updated>2017-03-31T06:41:37.934Z</updated>
    
    <content type="html"><![CDATA[<p>有链式调用必然会有回溯设计，这一节介绍jQuery的回溯处理的设计。<br><a id="more"></a></p>
<p>我们知道Query选择器最终都是通过DOM接口实现取值的, 但是通过jQuery处理后返回的不仅仅只有DOM对象，而是一个包装容器，下面是控制台打印的jQuery对象（使用了链式操作之后）。<br><img src="imgs/1489561386731_3.png" alt=""><br><strong>在jQuery对象中有个prevObject对象，这个是干嘛用的呢？</strong><br>如果你想知道prevObject是做什么的，咱们首先得先来了解一下jQuery对象栈，jQuery内部维护着一个jQuery对象栈。每个遍历方法都会找到一组新元素（一个jQuery对象），然后jQuery会把这组元素推入到栈中。<br>而每个jQuery对象都有三个属性：context、selector和prevObject，其中的prevObject属性就指向这个对象栈中的前一个对象，而通过这个属性可以回溯到最初的DOM元素集中。<br>jQuery为我们操作这个内部对象栈提供个非常有用的2个方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">.end()</div><div class="line">.addBack()</div></pre></td></tr></table></figure></p>
<p>总的来说：end方法就是回溯到上一个Dom合集,因此对于链式操作与优化，这个方法还是很有意义的。下面是jQuery的end方法的源码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">end: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">     <span class="keyword">return</span> <span class="keyword">this</span>.prevObject || <span class="keyword">this</span>.constructor(<span class="literal">null</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>prevObject在什么情况下会产生？</strong><br>在构建jQuery对象的时候，通过pushStack方法构建，如下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">jQuery.fn.extend(&#123;</div><div class="line">    find: <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>) </span>&#123;</div><div class="line">       <span class="keyword">var</span> i,</div><div class="line">			len = <span class="keyword">this</span>.length,</div><div class="line">			ret = [],</div><div class="line">			self = <span class="keyword">this</span>;</div><div class="line">		</div><div class="line">        <span class="keyword">if</span> ( <span class="keyword">typeof</span> selector !== <span class="string">"string"</span> ) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.pushStack( jQuery( selector ).filter(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">				<span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; len; i++ ) &#123;</div><div class="line">					<span class="keyword">if</span> ( jQuery.contains( self[ i ], <span class="keyword">this</span> ) ) &#123;</div><div class="line">						<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;) );</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; len; i++ ) &#123;</div><div class="line">			jQuery.find( selector, self[ i ], ret ); <span class="comment">//直接利用 Sizzle 接口，把结果注入到 ret 数组中去</span></div><div class="line">		&#125;</div><div class="line">        <span class="comment">// Needed because $( selector, context ) becomes $( context ).find( selector )</span></div><div class="line">        <span class="comment">//此处this指执行find前的jQuery对象</span></div><div class="line">        ret = <span class="keyword">this</span>.pushStack(len &gt; <span class="number">1</span> ? jQuery.unique(ret) : ret);</div><div class="line">        ret.selector = <span class="keyword">this</span>.selector ? <span class="keyword">this</span>.selector + <span class="string">" "</span> + selector : selector;</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接着我们看pushStack对象，作用就通过新的DOM元素去创建一个新的jQuery对象:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">pushStack: <span class="function"><span class="keyword">function</span>(<span class="params"> elems </span>) </span>&#123;</div><div class="line">    <span class="comment">//新建一个jQuery对象然后用jQuery.merge语句把elems节点合并到新的jQuery对象上</span></div><div class="line">    <span class="keyword">var</span> ret = jQuery.merge( <span class="keyword">this</span>.constructor(), elems );</div><div class="line"></div><div class="line">    <span class="comment">//把执行find方法前的对象的引用赋给prevObject属性</span></div><div class="line">    ret.prevObject = <span class="keyword">this</span>;</div><div class="line">    ret.context = <span class="keyword">this</span>.context;</div><div class="line"></div><div class="line">    <span class="comment">// 放回新创建的jQuery对象</span></div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>流程解析：<br>1、首先构建一个新的jQuery对象，因为constructor是指向构造器的，所以这里就等同于调用jQuery()方法了，返回了一个新的jQuery对象；<br>2、然后用jQuery.merge语句把elems节点合并到新的jQuery对象上；<br>3、最后给返回的新jQuery对象添加prevObject属性，我们看到prevObject其实还是当前jQuery的一个引用罢了，所以也就是为什么通过prevObject能取到上一个合集的原因了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有链式调用必然会有回溯设计，这一节介绍jQuery的回溯处理的设计。&lt;br&gt;
    
    </summary>
    
      <category term="jQuery" scheme="http://heji.website/categories/jQuery/"/>
    
    
      <category term="web前端" scheme="http://heji.website/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://heji.website/tags/JavaScript/"/>
    
      <category term="jQuery" scheme="http://heji.website/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>jQuery2.1.1源码解析四、插件接口的设计</title>
    <link href="http://heji.website/2017/03/31/jQuery2.1.1%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E5%9B%9B%E3%80%81%E6%8F%92%E4%BB%B6%E6%8E%A5%E5%8F%A3%E7%9A%84%E8%AE%BE%E8%AE%A1/"/>
    <id>http://heji.website/2017/03/31/jQuery2.1.1源码解析四、插件接口的设计/</id>
    <published>2017-03-31T06:09:56.961Z</published>
    <updated>2017-03-31T06:39:57.775Z</updated>
    
    <content type="html"><![CDATA[<p>如果jQuery没有插件接口的设计，那么他就像个光杆司令没有兵，就是没有手下，只有自己一个封闭的城堡。因此jQuery城堡需要设计一个大门 - 插件接口，从而打开大门开始招兵买马。<br><a id="more"></a></p>
<p>在javascript的世界中一共有四种上下文调用方式：方法调用模式、函数调用模式、构造器调用模式、apply调用模式。我要分别解释一下：<br>方法调用模式： 类似于foo.bar()，函数作为一个对象的方法出现，this指向foo。<br>函数调用模式：类似于bar(),函数单独出现，this指向window<br>构造器调用模式：类似于 var foo = new bar()，this指向new bar()返回的对象。<br>apply调用：类似于bar.apply(object)，this指向object</p>
<p><strong>关于apply方法的说明：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*定义一个人类*/</span>  </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;  </div><div class="line">    <span class="keyword">this</span>.name=name;  </div><div class="line">    <span class="keyword">this</span>.age=age;  </div><div class="line">&#125;  </div><div class="line"><span class="comment">/*定义一个学生类*/</span>  </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name,age,grade</span>)</span>&#123;  </div><div class="line">    Person.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>);  </div><div class="line">    <span class="keyword">this</span>.grade=grade;  </div><div class="line">&#125;  </div><div class="line"><span class="comment">//创建一个学生类  </span></div><div class="line"><span class="keyword">var</span> student=<span class="keyword">new</span> Student(<span class="string">"zhangsan"</span>,<span class="number">21</span>,<span class="string">"一年级"</span>);  </div><div class="line"><span class="comment">//测试  </span></div><div class="line">alert(<span class="string">"name:"</span>+student.name+<span class="string">"\n"</span>+<span class="string">"age:"</span>+student.age+<span class="string">"\n"</span>+<span class="string">"grade:"</span>+student.grade);  </div><div class="line"><span class="comment">//大家可以看到测试结果name:zhangsan age:21  grade:一年级  </span></div><div class="line"><span class="comment">//学生类里面我没有给name和age属性赋值啊,为什么又存在这两个属性的值呢,这个就是apply的神奇之处.</span></div></pre></td></tr></table></figure></p>
<p>分析: <code>Person.apply(this,arguments);</code><br>this:在创建对象在这个时候代表的是Student对象<br>arguments:是参数数组,也就是[“zhangsan”,”21”,”一年级”];<br>通俗一点讲就是:用student去执行Person这个类里面的内容,在Person这个类里面存在this.name等之类的语句,这样就将属性创建到了student对象里面。</p>
<p>jQuery插件的开发分为两种：<br>  ☑  一种是挂在jQuery命名空间下的全局函数，也可称为静态方法；<br>  ☑  另一种是jQuery对象级别的方法，即挂在jQuery原型下的方法，这样通过选择器获取的jQuery对象实例也能共享该方法。</p>
<p>提供的接口：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$.extend(target, [object1], [objectN]);</div></pre></td></tr></table></figure></p>
<p><strong>注意：该方法也可用来合并对象(其实扩展jQuery就是把内容合并到jQuery对象或者jQuery实例对象中去)</strong></p>
<p>下面是拟jQuery源码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $ = jQuery = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> jQuery.fn.init(selector);</div><div class="line">&#125;</div><div class="line">jQuery.fn = jQuery.prototype = &#123;</div><div class="line">    name: <span class="string">'heji'</span>,</div><div class="line">	init: <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>) </span>&#123;</div><div class="line">		<span class="keyword">this</span>.selector = selector;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">	&#125;,</div><div class="line">	<span class="keyword">constructor</span>: jQuery</div><div class="line">&#125;</div><div class="line">jQuery.fn.init.prototype = jQuery.fn</div><div class="line">jQuery.extend = jQuery.fn.extend = function() &#123;</div><div class="line">	<span class="keyword">var</span> options, src, copy,</div><div class="line">		target = <span class="built_in">arguments</span>[<span class="number">0</span>] || &#123;&#125;, <span class="comment">//target默认执行第一个对象或者空对象(合并对象)</span></div><div class="line">		i = <span class="number">1</span>,</div><div class="line">		length = <span class="built_in">arguments</span>.length;</div><div class="line">	<span class="comment">//只有一个参数，就是对jQuery自身的扩展处理，如果多个参数，表示合并对象</span></div><div class="line">	<span class="comment">//extend,fn.extend</span></div><div class="line">	<span class="keyword">if</span> (i === length) &#123;</div><div class="line">	    <span class="comment">//调用的上下文对象jQuery/或者实例,当使用jQuery.extend扩展时,this表示jQuery对象;当使用jQuery.fn.extend扩展时,实际上this表示jQuery对象原型</span></div><div class="line">		target = <span class="keyword">this</span>; </div><div class="line">		i--;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (; i &lt; length; i++) &#123;</div><div class="line">		<span class="comment">//从i开始取参数,不为空开始遍历</span></div><div class="line">		<span class="keyword">if</span> ((options = <span class="built_in">arguments</span>[i]) != <span class="literal">null</span>) &#123;</div><div class="line">			<span class="keyword">for</span> (name <span class="keyword">in</span> options) &#123;</div><div class="line">				copy = options[name];</div><div class="line">				<span class="comment">//拷贝属性到target.</span></div><div class="line">				target[name] = copy;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> target;</div><div class="line">&#125;</div><div class="line">jQuery.fn.extend(&#123;</div><div class="line">	setName: <span class="function"><span class="keyword">function</span>(<span class="params">myName</span>) </span>&#123;</div><div class="line">		<span class="keyword">this</span>.myName = myName</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">	&#125;,</div><div class="line">	getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		$(<span class="string">"#name"</span>).html(<span class="keyword">this</span>.myName)</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">	&#125;</div><div class="line">&#125;)</div><div class="line">$().setName(<span class="string">'何机'</span>).getName();</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果jQuery没有插件接口的设计，那么他就像个光杆司令没有兵，就是没有手下，只有自己一个封闭的城堡。因此jQuery城堡需要设计一个大门 - 插件接口，从而打开大门开始招兵买马。&lt;br&gt;
    
    </summary>
    
      <category term="jQuery" scheme="http://heji.website/categories/jQuery/"/>
    
    
      <category term="web前端" scheme="http://heji.website/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://heji.website/tags/JavaScript/"/>
    
      <category term="jQuery" scheme="http://heji.website/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>jQuery2.1.1源码解析三、方法链式调用的实现</title>
    <link href="http://heji.website/2017/03/31/jQuery2.1.1%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%B8%89%E3%80%81%E6%96%B9%E6%B3%95%E9%93%BE%E5%BC%8F%E8%B0%83%E7%94%A8%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://heji.website/2017/03/31/jQuery2.1.1源码解析三、方法链式调用的实现/</id>
    <published>2017-03-31T06:08:56.029Z</published>
    <updated>2017-03-31T06:38:32.660Z</updated>
    
    <content type="html"><![CDATA[<p>jQuery的链式操作极大地提高了代码的效率，现在我们研究一下jQuery如何实现链式操作。<br><a id="more"></a></p>
<p>我们先来看看使用jQuery的一段链式代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'input[type="button"]'</span>)</div><div class="line">    .eq(<span class="number">0</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        alert(<span class="string">'点击我!'</span>);</div><div class="line">&#125;).end().eq(<span class="number">1</span>)</div><div class="line">.click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $(<span class="string">'input[type="button"]:eq(0)'</span>).trigger(<span class="string">'click'</span>);</div><div class="line">&#125;).end().eq(<span class="number">2</span>)</div><div class="line">.toggle(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $(<span class="string">'.aa'</span>).hide(<span class="string">'slow'</span>);</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $(<span class="string">'.aa'</span>).show(<span class="string">'slow'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>看这个代码的结构，我们或多或少都能猜到其含义：<br>  ☑  找出type类型为button的input元素<br>  ☑  找到第一个按钮，并绑定click事件处理函数<br>  ☑  返回所有按钮，再找到第二个<br>  ☑  为第二个按钮绑定click事件处理函数<br>  ☑  为第三个按钮绑定toggle事件处理函数</p>
<p>jQuery的这种管道风格的链式代码，总的来说：</p>
<ul>
<li>节约JS代码</li>
<li>所返回的都是同一个对象，可以提高代码的效率。</li>
</ul>
<p>链式处理的前提必须是方法中必须返回一个或者一些实例对象。例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">aQuery.prototype = &#123;</div><div class="line">    init: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;,</div><div class="line">    name: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;jQuery的链式操作极大地提高了代码的效率，现在我们研究一下jQuery如何实现链式操作。&lt;br&gt;
    
    </summary>
    
      <category term="jQuery" scheme="http://heji.website/categories/jQuery/"/>
    
    
      <category term="web前端" scheme="http://heji.website/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://heji.website/tags/JavaScript/"/>
    
      <category term="jQuery" scheme="http://heji.website/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>jQuery2.1.1源码解析二、无new构建实例</title>
    <link href="http://heji.website/2017/03/31/jQuery2.1.1%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%BA%8C%E3%80%81%E6%97%A0new%E6%9E%84%E5%BB%BA%E5%AE%9E%E4%BE%8B/"/>
    <id>http://heji.website/2017/03/31/jQuery2.1.1源码解析二、无new构建实例/</id>
    <published>2017-03-31T04:31:13.285Z</published>
    <updated>2017-03-31T06:36:45.180Z</updated>
    
    <content type="html"><![CDATA[<p>在jQuery里面，你既可以用<code>$.isArray()</code>调用<code>jq</code>的静态方法，也可以通过<code>$().css()</code>获取对象执行对象方法。<br><a id="more"></a></p>
<p>在js中，要实现一个变量既能被new，又能调用它的方法，其实不难实现(使用原型实现)：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</div><div class="line">a.func = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;alert(<span class="string">"静态方法"</span>);&#125;;</div><div class="line">a.prototype.t = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;alert(<span class="string">"对象方法"</span>);&#125;;</div><div class="line"><span class="keyword">var</span> t = <span class="keyword">new</span> a();</div><div class="line">t.t();</div><div class="line">a.func();</div></pre></td></tr></table></figure></p>
<h3 id="无new构建"><a href="#无new构建" class="headerlink" title="无new构建"></a>无new构建</h3><p>下面就是一个无new构建的例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> aQuery = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>) </span>&#123;</div><div class="line">	<span class="comment">//调用时this表示window对象(函数是window对象的属性)</span></div><div class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>===<span class="built_in">window</span>); <span class="comment">//true,false</span></div><div class="line">    <span class="keyword">if</span> (!(<span class="keyword">this</span> <span class="keyword">instanceof</span> aQuery)) &#123;</div><div class="line">    	<span class="comment">//如果this不是aQuery对象的实例,新建一个aQuery对象返回,此时this即为aQuery对象的一个实例</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> aQuery(selector);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.constructor===aQuery); <span class="comment">//true</span></div><div class="line">    <span class="comment">// /[^#].*/：匹配除#外的所有字符串,exec方法返回匹配结果组成的数组</span></div><div class="line">    <span class="keyword">var</span> elem = <span class="built_in">document</span>.getElementById(<span class="regexp">/[^#].*/</span>.exec(selector)[<span class="number">0</span>]);</div><div class="line">    <span class="keyword">this</span>.length = <span class="number">1</span>;</div><div class="line">    <span class="keyword">this</span>[<span class="number">0</span>] = elem;</div><div class="line">    <span class="keyword">this</span>.context = <span class="built_in">document</span>;</div><div class="line">    <span class="keyword">this</span>.selector = selector;</div><div class="line">    <span class="keyword">this</span>.get = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>[num];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(aQuery(<span class="string">"#book"</span>).get(<span class="number">0</span>));</div></pre></td></tr></table></figure></p>
<p>现在，我们看看jQuery是如何做的：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> jQuery = <span class="function"><span class="keyword">function</span>(<span class="params">selector, context</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> jQuery.fn.init(selector, context);</div><div class="line">&#125;;</div><div class="line">jQuery.fn = jQuery.prototype = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> init = jQuery.fn.init = <span class="function"><span class="keyword">function</span>(<span class="params">selector, context</span>)</span>&#123;&#125;;</div><div class="line"><span class="comment">//让返回对象的原型指向jQuery的原型,这样,所有$()获取的对象的原型其实就都是jQuery对象的原型</span></div><div class="line">init.prototype = jQuery.fn;</div></pre></td></tr></table></figure></p>
<p>通俗解释：</p>
<ol>
<li><code>$()</code>,<code>jQuery()</code>是执行一个函数，<code>$</code>和<code>jQuery</code>是函数名称，这个函数返回的是一个对象，所以里面是一个new表达式，但是名字不能是自己，否则无限循环。</li>
<li>既然不是自己，其实可以理解为<code>jQuery()</code>返回的不是jQuery对象，而是<code>jQuery.fn.init</code>（一个名字而已）对象。</li>
<li>但是为了原型链，jQuery这样处理，<code>jQuery.fn.init.prototype = jQuery.prototype</code>.</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>jQuery的无new构建原理中在<code>$()</code>内部中首先保证是通过<code>new</code>创建,使得我们在函数调用中可以使用this来代表该jq实例，通过原型的共享而实现了静态方法与实例方法的共存。手段惊艳，不得不赞叹作者的过人之处。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在jQuery里面，你既可以用&lt;code&gt;$.isArray()&lt;/code&gt;调用&lt;code&gt;jq&lt;/code&gt;的静态方法，也可以通过&lt;code&gt;$().css()&lt;/code&gt;获取对象执行对象方法。&lt;br&gt;
    
    </summary>
    
      <category term="jQuery" scheme="http://heji.website/categories/jQuery/"/>
    
    
      <category term="web前端" scheme="http://heji.website/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://heji.website/tags/JavaScript/"/>
    
      <category term="jQuery" scheme="http://heji.website/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>jQuery2.1.1源码解析一、理解架构</title>
    <link href="http://heji.website/2017/03/31/jQuery2.1.1%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%B8%80%E3%80%81%E7%90%86%E8%A7%A3%E6%9E%B6%E6%9E%84/"/>
    <id>http://heji.website/2017/03/31/jQuery2.1.1源码解析一、理解架构/</id>
    <published>2017-03-31T04:24:39.158Z</published>
    <updated>2017-03-31T04:30:59.709Z</updated>
    
    <content type="html"><![CDATA[<p>接触前端已经有一年多，觉得应该能尝试着看一些伟大框架的源码。首先是大名鼎鼎的jQuery，感谢慕课网的教程。<br><a id="more"></a></p>
<h3 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h3><ul>
<li><p>jQuery2.1.1的结构如下：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"> global, factory </span>) </span>&#123;</div><div class="line">    	<span class="keyword">if</span> ( <span class="keyword">typeof</span> <span class="built_in">module</span> === <span class="string">"object"</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">module</span>.exports === <span class="string">"object"</span> ) &#123;</div><div class="line">    		<span class="built_in">module</span>.exports = global.document ?</div><div class="line">    			factory( global, <span class="literal">true</span> ) :</div><div class="line">    			<span class="function"><span class="keyword">function</span>(<span class="params"> w </span>) </span>&#123;</div><div class="line">    				<span class="keyword">if</span> ( !w.document ) &#123;</div><div class="line">    					<span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>( <span class="string">"jQuery requires a window with a document"</span> );</div><div class="line">    				&#125;</div><div class="line">    				<span class="keyword">return</span> factory( w );</div><div class="line">    			&#125;;</div><div class="line">    	&#125; <span class="keyword">else</span> &#123;</div><div class="line">    		factory( global );</div><div class="line">    	&#125;</div><div class="line">    &#125;(<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">"undefined"</span> ? <span class="built_in">window</span> : <span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> window, noGlobal </span>) </span>&#123;</div><div class="line">    	<span class="keyword">var</span> jQuery = <span class="function"><span class="keyword">function</span>(<span class="params"> selector, context </span>) </span>&#123;</div><div class="line">    		<span class="keyword">return</span> <span class="keyword">new</span> jQuery.fn.init( selector, context );</div><div class="line">    	&#125;;</div><div class="line">    	<span class="comment">// 核心方法</span></div><div class="line">    	<span class="comment">// 回调系统</span></div><div class="line">    	<span class="comment">// 异步队列</span></div><div class="line">    	<span class="comment">// 数据缓存</span></div><div class="line">    	<span class="comment">// 队列操作</span></div><div class="line">    	<span class="comment">// 选择器引</span></div><div class="line">    	<span class="comment">// 属性操作</span></div><div class="line">    	<span class="comment">// 节点遍历</span></div><div class="line">    	<span class="comment">// 文档处理</span></div><div class="line">    	<span class="comment">// 样式操作</span></div><div class="line">    	<span class="comment">// 属性操作</span></div><div class="line">    	<span class="comment">// 事件体系</span></div><div class="line">    	<span class="comment">// AJAX交互</span></div><div class="line">    	<span class="comment">// 动画引擎</span></div><div class="line">    	<span class="keyword">return</span> jQuery;</div><div class="line">    &#125;));</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
</li>
<li><p>jQuery的模块依赖网<br>  <img src="imgs/1488794281489_3.png" alt=""><br>  jQuery库如今一共13个模块，模块不是单一的，比如jQuery动画，依赖异步队列、动画队列、回调队列与数据缓存模块等。jQuery的设计中最喜欢做的事就是抽出代码的共同特性使之“模块化”，这是非常值得我们学习的。</p>
</li>
</ul>
<h3 id="自调用匿名函数"><a href="#自调用匿名函数" class="headerlink" title="自调用匿名函数"></a>自调用匿名函数</h3><p>任何库与框架设计的第一个要点就是解决命名空间与变量污染的问题。jQuery就是利用了JavaScript函数作用域的特性，采用自调用匿名函数的方法来解决这个问题。<br>自定义匿名函数有两种常用的方式：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//方式一,jQuery使用的方式</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(a);</div><div class="line">&#125;(<span class="built_in">window</span>));</div><div class="line"><span class="comment">//方式二</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(a);</div><div class="line">&#125;)(<span class="built_in">window</span>)</div></pre></td></tr></table></figure></p>
<p>下面是jQuery结构代码的详细解析：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"> global, factory </span>) </span>&#123;</div><div class="line">    <span class="comment">//这里定义一个匿名函数,global变量实际上就是typeof window !== "undefined" ? window : this三目运算符的结果,factory变量实际上就是封装了jQuery所有功能代码的函数</span></div><div class="line">    <span class="keyword">if</span> ( <span class="keyword">typeof</span> <span class="built_in">module</span> === <span class="string">"object"</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">module</span>.exports === <span class="string">"object"</span> ) &#123;</div><div class="line">        <span class="comment">//如果是node平台,且支持window.document属性,那么直接暴露factory函数,第二个参数表示不需要创建全局变量jQuery和$</span></div><div class="line">        <span class="built_in">module</span>.exports = global.document ?</div><div class="line">            factory( global, <span class="literal">true</span> ) :</div><div class="line">            <span class="function"><span class="keyword">function</span>(<span class="params"> w </span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> ( !w.document ) &#123;</div><div class="line">                    <span class="comment">//如果不支持window.document属性,直接抛出异常</span></div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>( <span class="string">"jQuery requires a window with a document"</span> );</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> factory( w );</div><div class="line">            &#125;;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//如果不是node平台,直接返回factory函数,此时没有传递noGlobal参数,那么该参数就是undefined</span></div><div class="line">        factory( global );</div><div class="line">    &#125;</div><div class="line">&#125;(<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">"undefined"</span> ? <span class="built_in">window</span> : <span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> window, noGlobal </span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> jQuery = <span class="function"><span class="keyword">function</span>(<span class="params"> selector, context </span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> jQuery.fn.init( selector, context );</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">// 核心方法</span></div><div class="line">    <span class="comment">// 回调系统</span></div><div class="line">    <span class="comment">// 异步队列</span></div><div class="line">    <span class="comment">// 数据缓存</span></div><div class="line">    <span class="comment">// 队列操作</span></div><div class="line">    <span class="comment">// 选择器引</span></div><div class="line">    <span class="comment">// 属性操作</span></div><div class="line">    <span class="comment">// 节点遍历</span></div><div class="line">    <span class="comment">// 文档处理</span></div><div class="line">    <span class="comment">// 样式操作</span></div><div class="line">    <span class="comment">// 属性操作</span></div><div class="line">    <span class="comment">// 事件体系</span></div><div class="line">    <span class="comment">// AJAX交互</span></div><div class="line">    <span class="comment">// 动画引擎</span></div><div class="line">    <span class="keyword">var</span> strundefined = <span class="keyword">typeof</span> <span class="literal">undefined</span>;</div><div class="line">    <span class="keyword">if</span> ( <span class="keyword">typeof</span> noGlobal === strundefined ) &#123;</div><div class="line">        <span class="comment">//如果noGlobal变量未定义,需要全局变量jQuery和$</span></div><div class="line">    	<span class="built_in">window</span>.jQuery = <span class="built_in">window</span>.$ = jQuery;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> jQuery;</div><div class="line">&#125;));</div></pre></td></tr></table></figure>
<p>问题：为什么需要传递window？<br>这样做是为了减少变量查找所花的时间，如果变量在函数体内就不用经过scope作用域大范围查找。因此，显然把它当成一个局部变量来查找要快一些。另外，把window作为参数传递进来，在进行代码压缩时能减小框架的体积（压缩之后参数名会变化）<br>问题：为什么需要传递undefined？<br>因为在早期的浏览器，undefined变量的值是能够改变的，在jQuery功能函数内需要一个准确的undefined变量，所以需要传递进来。</p>
<h3 id="jQuery的类数组对象结构"><a href="#jQuery的类数组对象结构" class="headerlink" title="jQuery的类数组对象结构"></a>jQuery的类数组对象结构</h3><p>很多人迷惑的jQuery为什么能像数组一样操作，通过对象get方法或者直接通过下标0索引就能转成DOM对象。<br>9种用法整体来说可以分三大块：选择器、dom的处理、dom加载。<br>换句话说jQuery就是为了获取DOM、操作DOM而存在的！所以为了更方便这些操作，让节点与实例对象通过一个桥梁给关联起来，jQuery内部就采用了一种叫“类数组对象”的方式作为存储结构，所以我们即可以像对象一样处理jQuery操作，也能像数组一样可以使用push、pop、shift、unshift、sort、each、map等类数组的方法操作jQuery对象了。<br>jQuery对象可用数组下标索引是什么原理？<br>通过<code>$(&quot;.Class&quot;)</code>构建的对象结构如下所示：<br><img src="imgs/1488854531784_2.png" alt=""><br>整个结构很明了，通过对象键值对的关系保存着属性，原型保存着方法。我们来简单的模拟一个这样的数据结构：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> aQuery = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>) </span>&#123;</div><div class="line">	<span class="comment">//调用时this表示window对象(函数是window对象的属性)</span></div><div class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>===<span class="built_in">window</span>); <span class="comment">//true,false</span></div><div class="line">    <span class="keyword">if</span> (!(<span class="keyword">this</span> <span class="keyword">instanceof</span> aQuery)) &#123;</div><div class="line">    	<span class="comment">//如果this不是aQuery对象的实例,新建一个aQuery对象返回,此时this即为aQuery对象的一个实例</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> aQuery(selector);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>===aQuery); <span class="comment">//true</span></div><div class="line">    <span class="comment">// /[^#].*/：匹配除#外的所有字符串,exec方法返回匹配结果组成的数组</span></div><div class="line">    <span class="keyword">var</span> elem = <span class="built_in">document</span>.getElementById(<span class="regexp">/[^#].*/</span>.exec(selector)[<span class="number">0</span>]);</div><div class="line">    <span class="keyword">this</span>.length = <span class="number">1</span>;</div><div class="line">    <span class="keyword">this</span>[<span class="number">0</span>] = elem;</div><div class="line">    <span class="keyword">this</span>.context = <span class="built_in">document</span>;</div><div class="line">    <span class="keyword">this</span>.selector = selector;</div><div class="line">    <span class="keyword">this</span>.get = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>[num];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(aQuery(<span class="string">"#book"</span>).get(<span class="number">0</span>));</div></pre></td></tr></table></figure></p>
<p>以上是模拟jQuery的对象结构，通过aQuery方法抽象出了对象创建的具体过程，这也是软件工程领域中的广为人知的设计模式-工厂方法。</p>
<ul>
<li>jQuery的无new构建原理<br>  函数aQuery()内部首先保证了必须是通过new操作符构建。这样就能保证当前构建的是一个带有this的实例对象，既然是对象我们可以把所有的属性与方法作为对象的key与value的方式给映射到this上，所以如上结构就可以模拟出jQuery的这样的操作了，即可通过索引取值，也可以链式方法取值，但是这样的结构是有很大的缺陷的，每次调用ajQuery方法等于是创建了一个新的实例，那么类似get方法就要在每一个实例上重新创建一遍，性能就大打折扣，所以jQuery在结构上的优化不仅仅只是我们看到的，除了实现类数组结构、方法的原型共享，而且还实现方法的静态与实例的共存，这是我们之后将会重点分析的。</li>
</ul>
<h3 id="变量污染与变量冲突"><a href="#变量污染与变量冲突" class="headerlink" title="变量污染与变量冲突"></a>变量污染与变量冲突</h3><p>任何库与框架设计的第一个要点就是解决命名空间与变量污染的问题。jq就是利用js本身函数的作用域采用立即调用表达式将变量包裹的函数里，对外开放的只有jQuery和$作为入口。<br>但是<code>$</code>这么轻便的变量，如果其他框架也将它作为简写怎么办，所以jq提供了noConflict()方法来让出<code>$</code>这个变量，用法是先引入其他框架的js，再引入jq。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;script src=<span class="string">"other_lib.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;script src=<span class="string">"jquery.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line"></div><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">  $.noConflict();</div><div class="line">  jQuery(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="comment">// 使用 jQuery 的代码</span></div><div class="line">  &#125;);</div><div class="line">  <span class="comment">// 使用其他库的 $ 的代码</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<p>解决变量冲突的源码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span></div><div class="line">    <span class="comment">//因为此时jQuery尚未对window.jQuery赋值,此时window.jQuery表示undefined</span></div><div class="line">	_jQuery = <span class="built_in">window</span>.jQuery,</div><div class="line">    <span class="comment">//因为此时jQuery尚未对window.$赋值,此时$表示其他框架的全局变量</span></div><div class="line">	_$ = <span class="built_in">window</span>.$;</div><div class="line"><span class="comment">//deep参数指示是否允许彻底将 jQuery 变量还原。</span></div><div class="line">jQuery.noConflict = <span class="function"><span class="keyword">function</span>(<span class="params"> deep </span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span> ( <span class="built_in">window</span>.$ === jQuery ) &#123;</div><div class="line">	    <span class="comment">//引入jQuery之后,window.$表示jQuery对象,此时恢复其他框架变量对$符号的使用</span></div><div class="line">	    <span class="built_in">window</span>.$ = _$;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> ( deep &amp;&amp; <span class="built_in">window</span>.jQuery === jQuery ) &#123;</div><div class="line">        <span class="comment">//引入jQuery之后,window.jQuery表示jQuery对象,如果指定deep=true,那么window.jQuery将会被还原为undefined</span></div><div class="line">		<span class="built_in">window</span>.jQuery = _jQuery;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//返回jQuery对象（可以重新指派引用）</span></div><div class="line">	<span class="keyword">return</span> jQuery;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">if</span> ( <span class="keyword">typeof</span> noGlobal === strundefined ) &#123;</div><div class="line">	<span class="built_in">window</span>.jQuery = <span class="built_in">window</span>.$ = jQuery;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>另外，可以使用闭包的方式传入jQuery对象,也可解决<code>$</code>冲突的问题。</p>
<h3 id="jQuery中的ready与load事件"><a href="#jQuery中的ready与load事件" class="headerlink" title="jQuery中的ready与load事件"></a>jQuery中的ready与load事件</h3><p>Query有3种针对文档加载的方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// ...代码...</span></div><div class="line">&#125;)</div><div class="line"><span class="comment">//document ready 简写</span></div><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// ...代码...</span></div><div class="line">&#125;)</div><div class="line">$(<span class="built_in">document</span>).load(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// ...代码...</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>一个是ready一个是load，这两个到底有什么区别呢？<br>ready在构建了基本的DOM结构之后就会触发，load事件需要在所有资源比如图片等加载完成之后才触发。所以，ready先执行，load后执行。<br><strong>DOM文档加载的步骤：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(1) 解析HTML结构。</div><div class="line">(2) 加载外部脚本和样式表文件。</div><div class="line">(3) 解析并执行脚本代码。</div><div class="line">(4) 构造HTML DOM模型。//ready</div><div class="line">(5) 加载图片等外部文件。</div><div class="line">(6) 页面加载完毕。//load</div></pre></td></tr></table></figure></p>
<p>现在我们看看jQuery如何处理文档加载时机的问题：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> readyList;</div><div class="line">jQuery.fn.ready = <span class="function"><span class="keyword">function</span>(<span class="params"> fn </span>) </span>&#123;</div><div class="line">	jQuery.ready.promise().done( fn );</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">completed</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">document</span>.removeEventListener( <span class="string">"DOMContentLoaded"</span>, completed, <span class="literal">false</span> );</div><div class="line">	<span class="built_in">window</span>.removeEventListener( <span class="string">"load"</span>, completed, <span class="literal">false</span> );</div><div class="line">	jQuery.ready();</div><div class="line">&#125;</div><div class="line">jQuery.ready.promise = <span class="function"><span class="keyword">function</span>(<span class="params"> obj </span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span> ( !readyList ) &#123;</div><div class="line">		readyList = jQuery.Deferred();</div><div class="line">		<span class="keyword">if</span> ( <span class="built_in">document</span>.readyState === <span class="string">"complete"</span> ) &#123;</div><div class="line">			setTimeout( jQuery.ready );</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="built_in">document</span>.addEventListener( <span class="string">"DOMContentLoaded"</span>, completed, <span class="literal">false</span> );</div><div class="line">			<span class="built_in">window</span>.addEventListener( <span class="string">"load"</span>, completed, <span class="literal">false</span> );</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> readyList.promise( obj );</div><div class="line">&#125;;</div><div class="line">jQuery.ready.promise();</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接触前端已经有一年多，觉得应该能尝试着看一些伟大框架的源码。首先是大名鼎鼎的jQuery，感谢慕课网的教程。&lt;br&gt;
    
    </summary>
    
      <category term="jQuery" scheme="http://heji.website/categories/jQuery/"/>
    
    
      <category term="web前端" scheme="http://heji.website/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://heji.website/tags/JavaScript/"/>
    
      <category term="jQuery" scheme="http://heji.website/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>Array.prototype.slice.call(arguments)的理解</title>
    <link href="http://heji.website/2017/03/31/Array.prototype.slice.call(arguments)%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>http://heji.website/2017/03/31/Array.prototype.slice.call(arguments)的理解/</id>
    <published>2017-03-31T04:14:55.718Z</published>
    <updated>2017-03-31T04:18:29.439Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript中call和apply方法在一些框架的源码中经常遇到，这里简单介绍一下这两个方法。以Array.prototype.slice.call(arguments)为例</p>
<a id="more"></a>
<p>Array.prototype.slice.call(arguments)能将具有length属性的对象转成数组，除了IE下的节点集合（因为ie下的dom对象是以com对象的形式实现的，js对象与com对象不能进行转换）<br>例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a=&#123;length:<span class="number">2</span>,<span class="number">0</span>:<span class="string">'first'</span>,<span class="number">1</span>:<span class="string">'second'</span>&#125;;</div><div class="line"><span class="built_in">Array</span>.prototype.slice.call(a);<span class="comment">//  ["first", "second"]</span></div><div class="line"><span class="keyword">var</span> a=&#123;length:<span class="number">2</span>&#125;;</div><div class="line"><span class="built_in">Array</span>.prototype.slice.call(a);<span class="comment">//  [undefined, undefined]</span></div></pre></td></tr></table></figure></p>
<p>在说明Array.prototype.slice.call(arguments)之前，先举一个call用法的例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);    <span class="comment">//this表示'littledu'</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="keyword">this</span>);      <span class="comment">//  Object</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span> <span class="keyword">instanceof</span> <span class="built_in">String</span>);    <span class="comment">// true</span></div><div class="line">&#125;</div><div class="line">a.call(<span class="string">'littledu'</span>);</div></pre></td></tr></table></figure></p>
<p>调用call方法会把构造函数内部的this指向参数代表的对象<br>现在我们分析下Array.prototype.slice.call(arguments)。slice是Array原型对象的一个属性（以函数的形式存在）。当调用slice.call方法时，slice函数内部的this引用就指向arguments[0]<br>此时，我们再看看splice方法的实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype.slice = <span class="function"><span class="keyword">function</span>(<span class="params">start,end</span>)</span>&#123;</div><div class="line">     <span class="keyword">var</span> result = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">     start = start || <span class="number">0</span>;</div><div class="line">     end = end || <span class="keyword">this</span>.length; <span class="comment">//this指向调用的对象，当用了call后，能够改变this的指向，也就是指向传进来的对象，这是关键</span></div><div class="line">     <span class="keyword">for</span>(<span class="keyword">var</span> i = start; i &lt; end; i++)&#123;</div><div class="line">          result.push(<span class="keyword">this</span>[i]);</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>也就是说Array.prototype.slice.call(arguments)的参数对象必须要有length属性，并且其他属性的key必须是从0开始的索引才能把对象转成数组。<br>最后，附个转成数组的通用函数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> toArray = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>)</span>&#123;</div><div class="line">     <span class="keyword">try</span>&#123;</div><div class="line">         <span class="keyword">return</span> <span class="built_in">Array</span>.prototype.slice.call(s);</div><div class="line">     &#125; <span class="keyword">catch</span>(e)&#123;</div><div class="line">           <span class="comment">//当没有length属性时</span></div><div class="line">             <span class="keyword">var</span> arr = [];</div><div class="line">             <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>,len = s.length; i &lt; len; i++)&#123;</div><div class="line">                 <span class="comment">//arr.push(s[i]);</span></div><div class="line">                  arr[i] = s[i];  <span class="comment">//据说这样比push快</span></div><div class="line">             &#125;</div><div class="line">              <span class="keyword">return</span> arr;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>另外，call方法和apply方法很类似，区分它们看下面这句代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">foo.call(<span class="keyword">this</span>, arg1,arg2,arg3) == foo.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)==<span class="keyword">this</span>.foo(arg1, arg2, arg3)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JavaScript中call和apply方法在一些框架的源码中经常遇到，这里简单介绍一下这两个方法。以Array.prototype.slice.call(arguments)为例&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://heji.website/categories/JavaScript/"/>
    
    
      <category term="web前端" scheme="http://heji.website/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://heji.website/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>AngularJS踩坑记(未完待续)</title>
    <link href="http://heji.website/2017/03/15/AngularJS%E8%B8%A9%E5%9D%91%E8%AE%B0/"/>
    <id>http://heji.website/2017/03/15/AngularJS踩坑记/</id>
    <published>2017-03-15T02:21:22.811Z</published>
    <updated>2017-03-15T03:56:09.112Z</updated>
    
    <content type="html"><![CDATA[<p>第一次把AngularJS应用到生产开发，发现很多需要注意的问题。</p>
<a id="more"></a>
<ul>
<li><p>正确理解AngularJS擅长的SPA（单页面应用）的开发，因为AngularJS应用每次启动都需要重新编译HTML，所以AngularJS推荐的是初始页面不变，页面的跳转只是页面部分DOM的替换。从这一点看，那些频繁进行完整HTML的跳转，一次又一次初始化AngularJS应用的项目无疑是不恰当的。</p>
</li>
<li><p>关于服务注入的问题<br>  <strong>推断式注入：</strong></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> app.controller(<span class="string">"myCtrl1"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope,hello1,hello2</span>)</span>&#123;</div><div class="line">    $scope.hello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        hello1.hello();</div><div class="line">        hello2.hello();</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>  这种注入方式，需要在保证参数名称与服务名称相同。如果代码要经过压缩等操作，就会导致注入失败。<br>  <strong>内联式注入：</strong></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">app.controller(<span class="string">"myCtrl3"</span>,[<span class="string">'$scope'</span>,<span class="string">'hello1'</span>,<span class="string">'hello2'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope,hello1,hello2</span>)</span>&#123;</div><div class="line">    $scope.hello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        hello1.hello();</div><div class="line">        hello2.hello();</div><div class="line">    &#125;</div><div class="line">&#125;]);</div></pre></td></tr></table></figure>
</li>
<li><p>AngularJS与第三方技术整合，如果需要在第三方框架准备完成之后再初始化AngularJS，此时推荐手动初始化：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//等待设备准备完成</span></div><div class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"plusready"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">//设置APP只能竖屏显示</span></div><div class="line">	plus.screen.lockOrientation(<span class="string">"portrait-primary"</span>);</div><div class="line">	<span class="comment">//app依赖于框架的组件以及app自身的demo模块</span></div><div class="line">	angular.module(<span class="string">"standardApp"</span>,[<span class="string">"pd.src"</span>,<span class="string">"pd.action"</span>,<span class="string">"pd.view"</span>,<span class="string">"standardApp.login"</span>])</div><div class="line">	<span class="comment">//配置常量</span></div><div class="line">	.constant(<span class="string">"VIEWINSTYLE"</span>, <span class="string">"slide-in-right"</span>)</div><div class="line">	<span class="comment">//公司外网测试:http://202.104.140.36:8888/zwxxpt</span></div><div class="line">	.constant(<span class="string">"SERVICEURL"</span>, <span class="string">"http://202.104.140.36:8888/zwxxpt"</span>) </div><div class="line">	<span class="comment">//后端端服务请求path</span></div><div class="line">	.constant(<span class="string">"SERVICEPATH"</span>, <span class="string">"/invoke"</span>) </div><div class="line">	<span class="comment">//后端登陆请求path</span></div><div class="line">	.constant(<span class="string">"LGOINPATH"</span>, <span class="string">"/webLogin.do"</span>) </div><div class="line">	<span class="comment">//配置是否自动升级</span></div><div class="line">	.constant(<span class="string">"AUTOUPVERSION"</span>, <span class="literal">true</span>)</div><div class="line">	<span class="comment">//版本升级检测路径</span></div><div class="line">	.constant(<span class="string">"CHECKVERSIONURL"</span>, <span class="string">"/"</span>)</div><div class="line">	<span class="comment">//请求过期时间,15秒</span></div><div class="line">	.constant(<span class="string">"TIMEOUT"</span>, <span class="number">15000</span>)</div><div class="line">	<span class="comment">//默认下载的路径</span></div><div class="line">	.constant(<span class="string">"SERVICEDOWNLOADURL"</span>, <span class="string">"/pages/platform/config/xtcs/downFileProcessor.jsp"</span>) </div><div class="line">	<span class="comment">//附件下载保存的路径,注意不要使用_downloads/temp/作为路径，会找不到文件。且要以_downloads为根目录</span></div><div class="line">	.constant(<span class="string">"DOWNLOADPATH"</span>, <span class="string">"_downloads/_temp/"</span>)</div><div class="line">	<span class="comment">//服务器端下载的路径</span></div><div class="line">	.constant(<span class="string">"SERVICEDOWNLOADURL"</span>, <span class="string">"/pages/platform/config/xtcs/downFileProcessor.jsp"</span>)</div><div class="line">	<span class="comment">//服务器端上传的路径</span></div><div class="line">	.constant(<span class="string">"SERVICEUPLOADURL"</span>, <span class="string">"/upload/uploadfile.do"</span>) </div><div class="line">	<span class="comment">//调试用常量</span></div><div class="line">	.constant(<span class="string">"IMEI"</span>, <span class="string">"3C:07:54:04:E2:E5"</span>)</div><div class="line">	.constant(<span class="string">"SIM"</span>, <span class="string">"131111111"</span>);</div><div class="line">	<span class="comment">//手动初始化Angular应用</span></div><div class="line">	angular.bootstrap(<span class="built_in">document</span>,[<span class="string">"standardApp"</span>]);</div><div class="line">&#125;,<span class="literal">false</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>当一个元素使用了多个自定义指令时，指令不应该存在多个独立的作用域即应该都使用父作用域，设置为false（默认）或只能有一个独立的作用域（其中一个指令使用了独立的作用域），另一种解决方法是指令不要用在一个元素上。</p>
</li>
<li><p>为方便后续扩展和迁移，框架底层模块应该要尽量独立，也就是说，底层模块之间尽量减少依赖。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一次把AngularJS应用到生产开发，发现很多需要注意的问题。&lt;/p&gt;
    
    </summary>
    
      <category term="AngularJS" scheme="http://heji.website/categories/AngularJS/"/>
    
    
      <category term="AngularJS" scheme="http://heji.website/tags/AngularJS/"/>
    
  </entry>
  
  <entry>
    <title>关于JavaScript原型与继承的理解</title>
    <link href="http://heji.website/2017/03/07/Javascript%E5%8E%9F%E5%9E%8B%E4%B8%8E%E7%BB%A7%E6%89%BF/"/>
    <id>http://heji.website/2017/03/07/Javascript原型与继承/</id>
    <published>2017-03-07T09:37:35.895Z</published>
    <updated>2017-03-11T09:44:22.255Z</updated>
    
    <content type="html"><![CDATA[<p>原型是JavaScript的难点之一，所以有必要把相关知识点记录下来。</p>
<a id="more"></a>
<h3 id="私有变量和函数"><a href="#私有变量和函数" class="headerlink" title="私有变量和函数"></a>私有变量和函数</h3><p>在函数内部定义的变量和函数，如果不对外提供接口，外部是无法访问到的，也就是该函数的私有的变量和函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Box</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> color = <span class="string">"blue"</span>;<span class="comment">//私有变量</span></div><div class="line">        <span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) //私有函数</span></div><div class="line">        &#123;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<p>这样在函数对象<code>Box</code>外部无法访问变量<code>color</code>和<code>fn</code>，他们就变成私有的了：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Box();</div><div class="line">    alert(obj.color);<span class="comment">//弹出 undefined</span></div><div class="line">    alert(obj.fn);<span class="comment">//同上</span></div></pre></td></tr></table></figure></p>
<h3 id="静态变量和函数"><a href="#静态变量和函数" class="headerlink" title="静态变量和函数"></a>静态变量和函数</h3><p>当定义一个函数后通过点号 “.”为其添加的属性和函数，通过对象本身仍然可以访问得到，但是其实例却访问不到，这样的变量和函数分别被称为<code>静态变量</code>和<code>静态函数</code>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Obj</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">    Obj.num = <span class="number">72</span>;<span class="comment">//静态变量</span></div><div class="line">    Obj.fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="comment">//静态函数</span></div><div class="line">    &#125;  </div><div class="line">    </div><div class="line">    alert(Obj.num);<span class="comment">//72</span></div><div class="line">    alert(<span class="keyword">typeof</span> Obj.fn)<span class="comment">//function</span></div><div class="line">    </div><div class="line">    <span class="keyword">var</span> t = <span class="keyword">new</span> Obj();</div><div class="line">    alert(t.name);<span class="comment">//undefined</span></div><div class="line">    alert(<span class="keyword">typeof</span> t.fn);<span class="comment">//undefined</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="实例变量和函数"><a href="#实例变量和函数" class="headerlink" title="实例变量和函数"></a>实例变量和函数</h3><p>在面向对象编程中除了一些库函数我们还是希望在对象定义的时候同时定义一些属性和方法，实例化后可以访问，js也能做到这样<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Box</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.a=[]; <span class="comment">//实例变量</span></div><div class="line">        <span class="keyword">this</span>.fn=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//实例方法</span></div><div class="line">            </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> Box.a); <span class="comment">//undefined</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> Box.fn); <span class="comment">//undefined</span></div><div class="line">    <span class="keyword">var</span> box=<span class="keyword">new</span> Box();</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> box.a); <span class="comment">//object</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> box.fn); <span class="comment">//function</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<p>为实例变量和方法添加新的方法和属性:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Box</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.a=[]; <span class="comment">//实例变量</span></div><div class="line">        <span class="keyword">this</span>.fn=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//实例方法</span></div><div class="line">            </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> box1=<span class="keyword">new</span> Box();</div><div class="line">    box1.a.push(<span class="number">1</span>);</div><div class="line">    box1.fn=&#123;&#125;;</div><div class="line">    <span class="built_in">console</span>.log(box1.a); <span class="comment">//[1]</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> box1.fn); <span class="comment">//object</span></div><div class="line"></div><div class="line">    <span class="keyword">var</span> box2=<span class="keyword">new</span> Box();</div><div class="line">    <span class="built_in">console</span>.log(box2.a); <span class="comment">//[]</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> box2.fn); <span class="comment">//function</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<p>在<code>box1</code>中修改了<code>a</code>和<code>fn</code>，而在<code>box2</code>中没有改变，由于数组和函数都是对象，是引用类型，这就说明<code>box1</code>中的属性和方法与<code>box2</code>中的属性与方法虽然同名但却不是一个引用，而是对<code>Box</code>对象定义的属性和方法的一个复制。<br>这个对属性来说没有什么问题，但是对于方法来说问题就很大了，因为方法都是在做完全一样的功能，但是却又两份复制，如果一个函数对象有上千和实例方法，那么它的每个实例都要保持一份上千个方法的复制，这显然是不科学的，这可肿么办呢，<code>prototype</code>应运而生。</p>
<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul>
<li>普通函数与构造函数<br>  <table><tr><th>函数类型</th><th>是否需要<code>new</code>调用</th><th>是否需要返回</th><th>是否建议使用<code>this</code>关键字</th><th>命名方式</th></tr><tr><th>普通函数</th><th>不需要<code>new</code>,直接调用</th><th>可以返回</th><th>不应该使用this，此时this表示window对象</th><th>驼峰式命名，首字母小写</th></tr><tr><th>构造函数</th><th>用<code>new</code>关键字实例化</th><th>不需要返回,默认返回<code>this</code>，当前实例对象</th><th>内部经常使用this,this指向<code>new</code>创建的实例</th><th>函数名建议首字母大写</th></tr></table>其实普通函数和构造函数本质上都是函数，只是用法不大一样。</li>
<li><p>prototype属性（指向原型对象）<br>  在<code>JavaScript</code>中,一共有两种类型的值,原始值和对象值。每个对象的构造函数都有一个内部属性<code>prototype</code> ,我们通常称之为原型。原型的值可以是一个对象,也可以是<code>null</code>。如果它的值是一个对象，则这个对象的构造函数也一定有自己的原型。这样就形成了一条线性的链，我们称之为<code>原型链</code>。<br>  使用原型的好处是可以让对象实例共享它所包含的属性和方法。也就是说，不必在构造函数中添加定义对象信息，而是可以直接将这些信息添加到原型中。这样就解决了构造函数中每个方法都会在每个实例中重新创建的不科学的问题。<br>  <strong>注意：只有函数才有<code>prototype</code>属性（原型），该属性指向一个对象，但对象实例有一个<code>__proto__</code>属性，该属性又指向了对象的构造函数的原型，所以<code>对象.__proto__===构造函数.prototype</code>是成立的</strong><br>  下面有一个例子：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="keyword">var</span> Browser = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">    Browser.prototype.run = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="string">"I'm Gecko,a kernel of firefox￼"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> Bro = <span class="keyword">new</span> Browser();</div><div class="line">    <span class="comment">//Bro对象本身没有run属性，所以，他就会去他的`__proto__`中去找，也就是`Browser.prototype`，最终执行了run方法</span></div><div class="line">    Bro.run();</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>  原型对象初始化的时候是空的，我们可以在里面自定义任何属性和方法，这些方法和属性都将被该构造函数所创建的对象继承。</p>
</li>
<li><p>constructor属性（指向构造函数）以及<br>  实例一创造出来就具有constructor属性（本身是没有的，继承自原型）。原型对象内部有一个指针（constructor属性）指向构造函数:Person.prototype.constructor = Person;<br>  所以它们的关系如下图所示：</p>
<p>  <img src="imgs/1489225362484_2.png" alt=""><br>  举个例子：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;<span class="comment">//设置对象属性</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">//给基类构造函数的prototype添加behavior方法</span></div><div class="line">    Animal.prototype.behavior = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="string">"this is a "</span>+<span class="keyword">this</span>.name);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> Dog = <span class="keyword">new</span> Animal(<span class="string">"dog"</span>);<span class="comment">//创建Dog对象</span></div><div class="line">    <span class="keyword">var</span> Cat = <span class="keyword">new</span> Animal(<span class="string">"cat"</span>);<span class="comment">//创建Cat对象</span></div><div class="line">    Dog.behavior();<span class="comment">//output "this is a dog"</span></div><div class="line">    Cat.behavior();<span class="comment">//output "this is a cat"</span></div><div class="line">    alert(Dog.behavior==Cat.behavior);<span class="comment">//output true;</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>当从一个对象那里调取属性或方法时，如果该对象自身不存在这样的属性或方法，就会去自己关联的<code>prototype</code>对象那里寻找(通过实例的<code>__proto__</code>属性)，如果<code>prototype</code>没有，就会去<code>prototype</code>关联的前辈<code>prototype</code>那里寻找，如果再没有则继续查找<code>Prototype.Prototype</code>引用的对象，依次类推，直到Prototype.….Prototype为<code>undefined</code>（<code>Object</code>的<code>Prototype</code>就是<code>undefined</code>）从而形成了所谓的“原型链”。</p>
<h3 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h3><p>在原型链的末端，就是<code>Object</code>构造函数<code>prototype</code>属性指向的那个原型对象。这个原型对象是所有对象的祖先，这个老祖宗实现了诸如<code>toString</code>等所有对象天生就该具有的方法。其他内置构造函数，如<code>Function</code>，<code>Boolean</code>，<code>String</code>，<code>Date</code>和<code>RegExp</code>等的<code>prototype</code>都是从这个老祖宗传承下来的，但他们各自又定义了自身的属性和方法，从而他们的子孙就表现出各自宗族的那些特征。<br>另外，实例还能覆盖从原型继承来的属性，如下例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;<span class="comment">//设置对象属性</span></div><div class="line">    &#125;;</div><div class="line">    <span class="comment">//设置原型的属性</span></div><div class="line">    Person.prototype.company = <span class="string">"Microsoft"</span>;</div><div class="line">     <span class="comment">//原型的方法</span></div><div class="line">    Person.prototype.SayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </div><div class="line">        alert(<span class="string">"Hello,I'm "</span>+ <span class="keyword">this</span>.name+ <span class="string">" of "</span> + <span class="keyword">this</span>.company);</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">//创建person对象</span></div><div class="line">    <span class="keyword">var</span> BillGates = <span class="keyword">new</span> Person(<span class="string">"BillGates"</span>);</div><div class="line">    <span class="comment">//继承了原型的内容，输出"Hello,I'm BillGates of Microsoft"</span></div><div class="line">    BillGates.SayHello();</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> Jobs = <span class="keyword">new</span> Person(<span class="string">"Jobs"</span>);</div><div class="line">    <span class="comment">//设置自己的company属性，掩盖了原型的company属性</span></div><div class="line">    Jobs.company = <span class="string">"Apple"</span>;</div><div class="line">    Jobs.SayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="string">"Hi,"</span>+<span class="keyword">this</span>.name + <span class="string">" like "</span> + <span class="keyword">this</span>.company);</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">//自己覆盖的属性和方法，输出"Hi,Jobs like Apple"</span></div><div class="line">    Jobs.SayHello();</div><div class="line">    <span class="comment">//Jobs的覆盖没有影响原型，BillGates还是照样输出</span></div><div class="line">    BillGates.SayHello();</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
<th>例子</th>
</tr>
</thead>
<tbody>
<tr>
<td>isPrototypeof</td>
<td>判断对象是不是实例对象的原型</td>
<td>原型对象.isPrototypeof(实例对象)</td>
</tr>
<tr>
<td>hasOwnProperty</td>
<td>监测实例对象是否含有指定属性，但不能检测到原型</td>
<td>“Test”.hasOwnProperty(“split”); //false<br>String.prototype.hasOwnProperty(“split”); //true</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原型是JavaScript的难点之一，所以有必要把相关知识点记录下来。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://heji.website/categories/JavaScript/"/>
    
    
      <category term="web前端" scheme="http://heji.website/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://heji.website/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>第六章、运动商店：订单和管理</title>
    <link href="http://heji.website/2017/03/06/%E7%AC%AC%E5%85%AD%E7%AB%A0%E3%80%81%E8%BF%90%E5%8A%A8%E5%95%86%E5%BA%97%EF%BC%9A%E8%AE%A2%E5%8D%95%E5%92%8C%E7%AE%A1%E7%90%86/"/>
    <id>http://heji.website/2017/03/06/第六章、运动商店：订单和管理/</id>
    <published>2017-03-06T06:52:34.439Z</published>
    <updated>2017-03-06T06:54:35.147Z</updated>
    
    <content type="html"><![CDATA[<p>在本章中，我会收集并验证运输详情以完成运动商店应用程序，并把订单存储在Deployd服务器上。我还会创建管理应用程序，让认证的用户看到订单并管理产品目录。</p>
<a id="more"></a>
<h2 id="准备示例程序"><a href="#准备示例程序" class="headerlink" title="准备示例程序"></a>准备示例程序</h2><p>我将继续在上一章的项目上构建，你可以从<code>https://github.com/heji1993/angular-sportsstore.git</code>上获取源码。<br>在上一章中，我在<code>app.html</code>添加了两个URL路由，它们是本章完成结账过程所需的：<br><img src="imgs/1486699645094_2.png" alt=""></p>
<h2 id="获取运输详情"><a href="#获取运输详情" class="headerlink" title="获取运输详情"></a>获取运输详情</h2><p>在购物车中为用户显示商品总览后，我想获取订单的运输详情，这带我来到了AngularJS与表单相关的特性面前。我创建<code>views/placeorder.html</code>文件捕获用户的运输详情。下面是该文件的内容：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>提交订单<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>请输入你的相关信息，我们会直接把你的商品邮寄给你<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"well"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">h3</span>&gt;</span>收件人<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">label</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-model</span>=<span class="string">"data.shipping.name"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">h3</span>&gt;</span>收货地址<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">label</span>&gt;</span>街道地址<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-model</span>=<span class="string">"data.shipping.street"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>完成订单<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>关于该视图，首先要注意的是我没有使用ng-controller指令指定控制器，这意味着视图将被顶级控制器<code>sportsStoreCtrl</code>支持。另外，在输入框元素上，我使用了ng-model指令进行数据绑定，与双花括号不同的是，ng-model是双向数据绑定，视图上模型的改变会更新到作用域，而双花括号是单向绑定，通常用于展示。当data对象没有shipping属性时，AngularJS会动态创建这个属性。</p>
<h3 id="添加表单验证"><a href="#添加表单验证" class="headerlink" title="添加表单验证"></a>添加表单验证</h3><p>AngularJS支持表单验证，它能检查数值的适用性。<br>AngularJS表单校验基于元素上标准的HTML属性，比如type和required。表单验证自动执行，但仍需要一些工作来将验证的反馈呈现给用户，并在应用程序中整合整体的验证不通过的提示。</p>
<ul>
<li><p>验证的准备<br>  设置表单验证的第一步是在视图上添加form元素并在我的input元素上添加验证属性。下面是<code>views/placeorder.html</code>文件修改的内容：</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"shippingForm"</span> <span class="attr">novalidate</span>=<span class="string">""</span>&gt;</span></div><div class="line">    ...</div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-model</span>=<span class="string">"data.shipping.name"</span> <span class="attr">required</span>=<span class="string">"required"</span>/&gt;</span></div><div class="line">    ...</div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-model</span>=<span class="string">"data.shipping.street"</span> <span class="attr">required</span>=<span class="string">"required"</span>/&gt;</span></div><div class="line">    ...</div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p>  新增一个form元素有三个目的：开启表单验证；<code>novalidate</code>属性是H5的标准属性，表示禁用浏览器的默认校验，让表单校验统一由AngularJS执行；定义一个变量，用来报告表单的有效性，它通过name属性实现，我把它设置为shippingForm，在后面将会演示如何使用。</p>
</li>
<li><p>显示验证反馈<br>  一旦form元素和验证属性被放好，AngularJS就会开始验证用户所提供的数据，AngularJS提供两种验证结果的反馈形式：1.使用AngularJS赋予form元素的通过验证和未通过验证的类来定义CSS样式，当通过校验时，元素会有<code>ng-valid</code>类，当没有通过校验时，元素会有<code>ng-invalid</code>类。2.使用作用域变量的属性判断，比如，不满足 <code>required</code>时,<code>formName.inputName.$error</code>为<code>{required: true}</code>，更多验证请查看官方API。下面是<code>views/placeorder.html</code>文件部分修改的代码：</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">      ...</div><div class="line">      <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">      	<span class="selector-class">.ng-valid</span>&#123;</div><div class="line">      		<span class="attribute">border-color</span>: lightgreen;</div><div class="line">      	&#125;</div><div class="line">      	<span class="selector-class">.ng-invalid</span>&#123;</div><div class="line">      		<span class="attribute">border-color</span>: lightpink;</div><div class="line">      	&#125;</div><div class="line">      	<span class="selector-tag">span</span><span class="selector-class">.error</span>&#123;</div><div class="line">      		<span class="attribute">font-weight</span>: bold;</div><div class="line">      		<span class="attribute">color</span>: red;</div><div class="line">      	&#125;</div><div class="line">      <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">      ...</div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">label</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-model</span>=<span class="string">"data.shipping.name"</span> <span class="attr">required</span>=<span class="string">"required"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error"</span> <span class="attr">ng-show</span>=<span class="string">"shippingForm.name.$error.required"</span>&gt;</span>请输入姓名<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>收货地址<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">label</span>&gt;</span>街道地址<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"street"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-model</span>=<span class="string">"data.shipping.street"</span> <span class="attr">required</span>=<span class="string">"required"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error"</span> <span class="attr">ng-show</span>=<span class="string">"shippingForm.street.$error.required"</span>&gt;</span>请输入街道地址<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>连接按钮来验证<br>  当表单内一个或多个input元素未通过验证，<code>formName.$invalid</code>属性的值将会被AngularJS设为true，我们可以把它和ng-disabled指令联合来管理button元素的状态（校验未通过不允许点击提交），下面是<code>views/placeorder.html</code>文件部分修改的代码：</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">      ...</div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">ng-disabled</span>=<span class="string">"shippingForm.$invalid"</span>&gt;</span>完成订单<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">...</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="添加剩下的表单字段"><a href="#添加剩下的表单字段" class="headerlink" title="添加剩下的表单字段"></a>添加剩下的表单字段</h3><p>现在我将在表单中添加剩下的input元素，下面是<code>views/placeorder.html</code>文件的完整代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">	<span class="selector-class">.ng-valid</span>&#123;</div><div class="line">		<span class="attribute">border-color</span>: lightgreen;</div><div class="line">	&#125;</div><div class="line">	<span class="selector-class">.ng-invalid</span>&#123;</div><div class="line">		<span class="attribute">border-color</span>: lightpink;</div><div class="line">	&#125;</div><div class="line">	<span class="selector-tag">span</span><span class="selector-class">.error</span>&#123;</div><div class="line">		<span class="attribute">font-weight</span>: bold;</div><div class="line">		<span class="attribute">color</span>: red;</div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>提交订单<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>请输入你的相关信息，我们会直接把你的商品邮寄给你<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"shippingForm"</span> <span class="attr">novalidate</span>=<span class="string">""</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"well"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">h3</span>&gt;</span>收件人<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">label</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-model</span>=<span class="string">"data.shipping.name"</span> <span class="attr">required</span>=<span class="string">"required"</span>/&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error"</span> <span class="attr">ng-show</span>=<span class="string">"shippingForm.name.$error.required"</span>&gt;</span>请输入姓名<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">h3</span>&gt;</span>收货地址<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">label</span>&gt;</span>街道<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"street"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-model</span>=<span class="string">"data.shipping.street"</span> <span class="attr">required</span>=<span class="string">"required"</span>/&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error"</span> <span class="attr">ng-show</span>=<span class="string">"shippingForm.street.$error.required"</span>&gt;</span>请输入街道地址<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">label</span>&gt;</span>区<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"county"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-model</span>=<span class="string">"data.shipping.county"</span> <span class="attr">required</span>=<span class="string">"required"</span>/&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error"</span> <span class="attr">ng-show</span>=<span class="string">"shippingForm.county.$error.required"</span>&gt;</span>请输入所在区<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">label</span>&gt;</span>市<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"city"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-model</span>=<span class="string">"data.shipping.city"</span> <span class="attr">required</span>=<span class="string">"required"</span>/&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error"</span> <span class="attr">ng-show</span>=<span class="string">"shippingForm.city.$error.required"</span>&gt;</span>请输入所在市<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">label</span>&gt;</span>国家<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"country"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-model</span>=<span class="string">"data.shipping.country"</span> <span class="attr">required</span>=<span class="string">"required"</span>/&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error"</span> <span class="attr">ng-show</span>=<span class="string">"shippingForm.country.$error.required"</span>&gt;</span>请输入所在国家<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">label</span>&gt;</span>邮政编码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"zip"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-model</span>=<span class="string">"data.shipping.zip"</span> <span class="attr">required</span>=<span class="string">"required"</span>/&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error"</span> <span class="attr">ng-show</span>=<span class="string">"shippingForm.zip.$error.required"</span>&gt;</span>请输入所在市、区<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">h3</span>&gt;</span>可选<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkbox"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"giftwarp"</span> <span class="attr">ng-model</span>=<span class="string">"data.shipping.giftwrap"</span>/&gt;</span></div><div class="line">				是否礼盒包装</div><div class="line">			<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">ng-disabled</span>=<span class="string">"shippingForm.$invalid"</span>&gt;</span>完成订单<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="下单"><a href="#下单" class="headerlink" title="下单"></a>下单</h2><p>现在，我将扩展由Deployd服务器提供的数据库，使用Ajax请求发送订单数据到服务器，并最终显示感谢消息来完成这一过程。</p>
<h3 id="扩展Deployd服务"><a href="#扩展Deployd服务" class="headerlink" title="扩展Deployd服务"></a>扩展Deployd服务</h3><p>为管理订单，新增一个order集合，方式和之前创建product集合一样，下面是order必要的属性，与placeorder.html的表单字段对应。<br><img src="imgs/1487743819803_2.png" alt=""></p>
<h3 id="定义控制器行为"><a href="#定义控制器行为" class="headerlink" title="定义控制器行为"></a>定义控制器行为</h3><p>下一步是定义控制器行为，他将使用Ajax请求发送订单明细到Deployd服务器。我们可以使用不同的方法定义该功能，比如服务或新控制器。这种灵活性是使用AngularJS的标志之一。当谈到AngularJS应用程序的架构时，没有绝对的正确或错误，你会开发出属于自己的风格和偏好，积累到你的经验中。我将保持简单，向顶级控制器sportsStore控制器中添加行为，它目前已包含了产生Ajax请求加载产品数据的代码。下面是修改后的<code>controllers/sportsStore.js</code>文件的内容：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//module方法值传一个参数表示我们尝试找到sportsStore这个模块,必须先有sportsStore模块,否则会报错</span></div><div class="line">angular.module(<span class="string">"sportsStore"</span>)</div><div class="line">.constant(<span class="string">"dataUrl"</span>,<span class="string">"http://localhost:5500/products"</span>)</div><div class="line">.constant(<span class="string">"orderUrl"</span>,<span class="string">"http://localhost:5500/orders"</span>)</div><div class="line">.controller(<span class="string">"sportsStoreCtrl"</span>,[<span class="string">"$scope"</span>,<span class="string">"$http"</span>,<span class="string">"$location"</span>,<span class="string">"dataUrl"</span>,<span class="string">"orderUrl"</span>,<span class="string">"cartService"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope,$http,$location,dataUrl,orderUrl,cartService</span>)</span>&#123;</div><div class="line">	$scope.data = &#123;&#125;;</div><div class="line">	<span class="comment">//使用$http服务查询数据</span></div><div class="line">	$http.get(dataUrl)</div><div class="line">	.success(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</div><div class="line">		$scope.data.products = result;</div><div class="line">	&#125;)</div><div class="line">	.error(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</div><div class="line">		$scope.data.error = error;</div><div class="line">	&#125;);</div><div class="line">	<span class="comment">//发送订单</span></div><div class="line">	$scope.sendOrder = <span class="function"><span class="keyword">function</span>(<span class="params">shippingDetails</span>)</span>&#123;</div><div class="line">		<span class="comment">//创建运输详情对象的副本,以便修改不影响程序的其他部分</span></div><div class="line">		<span class="keyword">var</span> order = angular.copy(shippingDetails);</div><div class="line">		<span class="comment">//从购物车获取所有商品</span></div><div class="line">		order.products = cartService.getProducts();</div><div class="line">		<span class="comment">//发送请求提交订单（以post方法提交请求到Deployd服务器并发送数据即完成对象的创建）</span></div><div class="line">		$http.post(orderUrl,order)</div><div class="line">		.success(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">			$scope.data.orderId = data.id;</div><div class="line">			<span class="comment">//清空购物车</span></div><div class="line">			cartService.getProducts().length = <span class="number">0</span>;</div><div class="line">		&#125;)</div><div class="line">		.error(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</div><div class="line">			$scope.data.orderError = error;</div><div class="line">		&#125;)</div><div class="line">		.finally(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="comment">//最后导航到订单完成页面</span></div><div class="line">			$location.path(<span class="string">"/complete"</span>);</div><div class="line">		&#125;)</div><div class="line">	&#125;</div><div class="line">&#125;])</div></pre></td></tr></table></figure></p>
<h3 id="调用控制器行为"><a href="#调用控制器行为" class="headerlink" title="调用控制器行为"></a>调用控制器行为</h3><p>调用新控制器行为，我们需要在运输详情视图中为button元素添加ng-click指令调用行为即可。下面是<code>views/placeorder.html</code>页面部分修改的代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">ng-click</span>=<span class="string">"sendOrder(data.shipping);"</span> <span class="attr">ng-disabled</span>=<span class="string">"shippingForm.$invalid"</span>&gt;</span>完成订单<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="定义视图"><a href="#定义视图" class="headerlink" title="定义视图"></a>定义视图</h3><p>在Ajax请求被完成之后，我所指定的URL路径是<code>/complete</code>，URL路由配置会映射它到文件<code>/views/thankYou.html</code>。我创建了该文件，下面是<code>/views/thankYou.html</code>的内容：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-danger"</span> <span class="attr">ng-show</span>=<span class="string">"data.orderError"</span>&gt;</span></div><div class="line">	发生错误&#123;&#123;data.orderError.status&#125;&#125;.订单尚未完成<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/placeorder"</span> <span class="attr">class</span>=<span class="string">"alert-link"</span>&gt;</span>点击这里重试<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"well"</span> <span class="attr">ng-hide</span>=<span class="string">"data.orderError"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">h2</span>&gt;</span>已下单！<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">	感谢您使用我们的购物平台，您的订单编号是&#123;&#123;data.orderId&#125;&#125;，我们会尽快将商品派送到您手里。</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><ul>
<li>当浏览器载入app.html文件时，视图被显示和产品及分类元素被生成之间有一点延迟。在后面的章节，会讲解如何使用URL路由特性来组织AngularJS在Ajax请求完成之前显示视图。</li>
<li>为了显示导航和分页，我处理产品数据并筛出分类。在实际项目中，我会考虑在产品数据首次到达时只生成该信息一次，之后就复用它，在后续章节介绍如何使用承诺来构建行为链，那是适用于这种任务的理想方式。</li>
<li>最后我会介绍如何使用<code>$animate</code>服务在URL路径改变时显示简短的过渡动画。</li>
</ul>
<h2 id="管理产品分类"><a href="#管理产品分类" class="headerlink" title="管理产品分类"></a>管理产品分类</h2><h3 id="准备Deployd"><a href="#准备Deployd" class="headerlink" title="准备Deployd"></a>准备Deployd</h3><p>我们要对产品进行管理，需要有用户集合。普通用户和管理员还有权限之分。<br>点击新建一个<code>User Collection</code>，User集默认定义了id、username和password属性，全是我所需要的属性。创建集合之后，点击data创建一条数据：<code>{username:&quot;admin&quot;,password:&quot;secret&quot;}</code>。</p>
<ul>
<li><p>巩固集合<br>  Deployd最棒的特性之一是它定义了可用于实现服务端功能的简单JavaScript API（比如验证用户），当对集合进行操作时可以触发一系列的事件。在控制台点击products集合然后单击events，你将看到一系列代表不同集事件的选项卡,如下图：<br>  <img src="imgs/1488251043574_2.png" alt=""><br>  这些事件为所有集定义，你能做许多事情，其中就有使用JavaScript加强验证策略。在On Put和On Delete标签中输入以下JavaScript：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(!me || me.username!=<span class="string">"admin"</span>)&#123;</div><div class="line">    <span class="comment">//401表示被请求的页面要求身份验证</span></div><div class="line">    cancel(<span class="string">"没有权限"</span>,<span class="number">401</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  在Deployd的API中，me表示当前用户，而cancel函数终止指定消息和HTTP状态码的请求。这段代码允许验证后的admin用户访问，终止所有其他401状态码的请求。<br>  在orders集合中为ON GET、ON PUT和ON DELETE 事件重复这一过程，因为这些事件都需要验证用户身份，下面是需要添加验证控制的事件：<br>  <img src="imgs/1488252583879_3.png" alt=""></p>
</li>
</ul>
<h3 id="创建管理应用程序"><a href="#创建管理应用程序" class="headerlink" title="创建管理应用程序"></a>创建管理应用程序</h3><p>我将为管理任务创建单独的AngularJS应用程序。但我会把它相关代码整合到主应用程序中。我向<code>angular-sportsstore</code>项目根目录添加一个新文件<code>admin.html</code>，下面是它的内容：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">ng-app</span>=<span class="string">"sportsStoreAdmin"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"angular.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"ngmodules/angular-route.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"bootstrap.css"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"bootstrap-theme.css"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">			angular.module(<span class="string">"sportsStoreAdmin"</span>,[<span class="string">"ngRoute"</span>])</div><div class="line">			.config([<span class="string">"$routeProvider"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$routeProvider</span>)</span>&#123;</div><div class="line">				$routeProvider.when(<span class="string">"/login"</span>,&#123;</div><div class="line">					templateUrl : <span class="string">"views/adminLogin.html"</span></div><div class="line">				&#125;);</div><div class="line">				$routeProvider.when(<span class="string">"/main"</span>,&#123;</div><div class="line">					templateUrl : <span class="string">"views/adminMain.html"</span></div><div class="line">				&#125;);</div><div class="line">				$routeProvider.otherwise(&#123;</div><div class="line">					redirectTo : <span class="string">"/login"</span></div><div class="line">				&#125;);</div><div class="line">			&#125;])</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">ng-view</span>&gt;</span><span class="tag">&lt;/<span class="name">ng-view</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>该html文件引入一些必须的文件，以及定义sportsstoreAdmin模块并配置了路由。为了定义路由的otherwise方法，我使用了redirectTo，它改变URL路径到其他路由，这将是我可以验证用户。后面章节会详细讲述URL路由的配置项。</p>
<ul>
<li><p>添加占位符<br>  我将首先实现验证特性，但我需要为<code>/views/adminMain.html</code>视图文件创建一些占位内容，以让我有一些东西在验证成功后显示。下面是文件内容（临时的）：</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"well"</span>&gt;</span></div><div class="line">	这是主页面</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="实现验证"><a href="#实现验证" class="headerlink" title="实现验证"></a>实现验证</h3><p>Deployd验证用户使用标准HTTP请求，应用程序发送POST请求到/users/login（这是Deployd进行登录验证的URL），需要在请求提包含username和password。如果验证尝试成功了服务器就响应状态码200，在用户无法验证时状态码是401。为实现验证，我先定义产生Ajax调用的控制器并处理响应，下面是<code>controllers/adminControllers.js</code>文件的内容：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">"sportsStoreAdmin"</span>)</div><div class="line">.constant(<span class="string">"authUrl"</span>,<span class="string">"http://localhost:5500/users/login"</span>)</div><div class="line">.controller(<span class="string">"authCtrl"</span>,[<span class="string">"$scope"</span>,<span class="string">"$http"</span>,<span class="string">"$location"</span>,<span class="string">"authUrl"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope,$http,$location,authUrl</span>)</span>&#123;</div><div class="line">	$scope.authenticate = <span class="function"><span class="keyword">function</span>(<span class="params">username,password</span>)</span>&#123;</div><div class="line">		$http.post(authUrl,&#123;</div><div class="line">			username:username,</div><div class="line">			password:password</div><div class="line">		&#125;,&#123;</div><div class="line">			<span class="comment">//设置为true,会企业跨域请求的支持,允许Ajax请求使用cookie处理验证。后面会介绍</span></div><div class="line">			withCredentials : <span class="literal">true</span></div><div class="line">		&#125;).success(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">			$location.path(<span class="string">"/main"</span>);</div><div class="line">		&#125;).error(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</div><div class="line">			$scope.authenticationError = error;</div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line">&#125;])</div></pre></td></tr></table></figure>
<p>使用控制器，在<code>admin.html</code>页面引入<code>controllers/adminControllers.js</code>文件即可，注意确保它出现在模块定义的代码后面。</p>
<ul>
<li><p>定义验证视图<br>  下一步是创建允许用户输入用户名和密码的视图，调用authCtrl控制器所定义的行为<code>authenticate</code>，然后显示任何错误的详情。下面是<code>views/adminLogin.html</code>文件的内容：</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"well"</span> <span class="attr">ng-controller</span>=<span class="string">"authCtrl"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-info"</span> <span class="attr">ng-hide</span>=<span class="string">"authenticationError"</span>&gt;</span></div><div class="line">		请输入你的用户名和密码进行登录验证</div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-danger"</span> <span class="attr">ng-show</span>=<span class="string">"authenticationError"</span>&gt;</span></div><div class="line">		验证失败(&#123;&#123;authenticationError.status&#125;&#125;)。请重新尝试。</div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">novalidate</span>=<span class="string">"novalidate"</span> <span class="attr">name</span>=<span class="string">"authForm"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-model</span>=<span class="string">"username"</span> <span class="attr">required</span>=<span class="string">"required"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-model</span>=<span class="string">"password"</span> <span class="attr">required</span>=<span class="string">"required"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">ng-disabled</span>=<span class="string">"authForm.$invalid"</span> <span class="attr">ng-click</span>=<span class="string">"authenticate(username,password)"</span>&gt;</span></div><div class="line">				登录</div><div class="line">			<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="定义主视图和控制器"><a href="#定义主视图和控制器" class="headerlink" title="定义主视图和控制器"></a>定义主视图和控制器</h3><p>一旦用户验证通过，ng-view指令就显示adminMain.html视图，该视图将允许管理员管理产品分类的内容以及查看订单队列。<br>在开始之前，我先定义占位内容用于显示产品分类视图和订单列表视图。首先，我创建<code>views/adminProducts.html</code>，下面是文件内容：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"well"</span>&gt;</span></div><div class="line">	这是产品视图</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>类似地，我创建了<code>views/adminOrders.html</code>文件，并定义了相似的占位内容，下面是文件内容：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"well"</span>&gt;</span></div><div class="line">	这是订单视图</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>由于在主视图<code>views/adminMain.html</code>需要切换产品视图和订单视图，但遗憾的是<code>ng-view</code>指令不能嵌套使用，所以，我将使用<code>ng-include</code>指令来处理它，作为不太优雅（但功能完善）的代替品。现在，我在<code>controllers/adminControllers.js</code>文件中定义新的控制器，下面是部分修改的内容：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">.controller(<span class="string">"mainCtrl"</span>,[<span class="string">"$scope"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</div><div class="line">	$scope.screens = [<span class="string">"Products"</span>,<span class="string">"Orders"</span>];</div><div class="line">	$scope.current = $scope.screens[<span class="number">0</span>];</div><div class="line">	<span class="comment">//设置视图</span></div><div class="line">	$scope.setScreen = <span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</div><div class="line">		$scope.current = $scope.screens[index];</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//获取视图</span></div><div class="line">	$scope.getScreen = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> $scope.current == <span class="string">"Products"</span> ?</div><div class="line">				<span class="string">"views/adminProducts.html"</span> : <span class="string">"views/adminOrders.html"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;]);</div></pre></td></tr></table></figure>
<p>下面是修改后的<code>views/adminMain.html</code>文件：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-default row"</span> <span class="attr">ng-controller</span>=<span class="string">"mainCtrl"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-3 panel-body"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--ng-class:如果是一个对象。那么如果某个键所对应的的值是true则该键将会作为一个类名--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">span</span> <span class="attr">ng-repeat</span>=<span class="string">"item in screens"</span> </span></div><div class="line">			<span class="attr">class</span>=<span class="string">"btn btn-block btn-default"</span></div><div class="line">			<span class="attr">ng-class</span>=<span class="string">"&#123;'btn-primary':item == current&#125;"</span></div><div class="line">			<span class="attr">ng-click</span>=<span class="string">"setScreen($index);"</span>&gt;</div><div class="line">			&#123;&#123;item&#125;&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-8 panel-body"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-include</span>=<span class="string">"getScreen()"</span>&gt;</span></div><div class="line">			</div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="实现订单特性"><a href="#实现订单特性" class="headerlink" title="实现订单特性"></a>实现订单特性</h3><p>我现在开始订单列表，它处理起来是最简单的，因为我仅仅是要显示只读列表，在实际中可能会更复杂。我想<code>controllers/adminControllers.js</code>添加订单控制器，下面是部分修改的代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">.controller(<span class="string">"ordersCtrl"</span>,[<span class="string">"$scope"</span>,<span class="string">"$http"</span>,<span class="string">"ordersUrl"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope,$http,ordersUrl</span>)</span>&#123;</div><div class="line">	$http.get(ordersUrl,&#123;withCredentials:<span class="literal">true</span>&#125;)</div><div class="line">		.success(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">			$scope.orders = data;</div><div class="line">		&#125;)</div><div class="line">		.error(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</div><div class="line">			$scope.error = error;</div><div class="line">		&#125;);</div><div class="line">	$scope.selectedOrder;</div><div class="line">	<span class="comment">//选择订单</span></div><div class="line">	$scope.selectOrder = <span class="function"><span class="keyword">function</span>(<span class="params">order</span>)</span>&#123;</div><div class="line">		$scope.selectedOrder = order;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//计算总价</span></div><div class="line">	$scope.calcTotal = <span class="function"><span class="keyword">function</span>(<span class="params">order</span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> total = <span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; order.products.length ; i++)&#123;</div><div class="line">			total += order.products[i].count * order.products[i].price;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> total;</div><div class="line">	&#125;</div><div class="line">&#125;]);</div></pre></td></tr></table></figure>
<p>有了ordersCtrl控制器，我修改<code>views/adminOrders.html</code>页面的内容并使用控制器，下面是修改后的文件内容：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"ordersCtrl"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-striped table-bordered"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">th</span>&gt;</span>所在城市<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">th</span>&gt;</span>订单总价<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tr</span> <span class="attr">ng-repeat</span>=<span class="string">"order in orders"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;order.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;order.city&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;calcTotal(order) | currency&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">ng-click</span>=<span class="string">"selectOrder(order);"</span> <span class="attr">class</span>=<span class="string">"btn btn-xs btn-primary"</span>&gt;</span></div><div class="line">					订单详情</div><div class="line">				<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!--显示选择的订单详情--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-show</span>=<span class="string">"selectedOrder"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">h3</span>&gt;</span>订单详情<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-striped table-bordered"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>商品名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>商品数量<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>商品单价<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">tr</span> <span class="attr">ng-repeat</span>=<span class="string">"product in selectedOrder.products"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;product.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;product.count&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;product.price | currency&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>视图由两个table组成。第一个table显示订单摘要，第二个table只在订单被选中时可见，它显示订单的详情。</p>
<h3 id="实现产品特性"><a href="#实现产品特性" class="headerlink" title="实现产品特性"></a>实现产品特性</h3><p>为实现产品特性，管理员需要对产品进行增删改查。在Deployd控制面板，选择products集合并点击API，会看到RESTful API的更多细节，我会在后续章节详细介绍RESTful API。你可以使用<code>$http</code>服务来做RESTful API，这样做会暴露整组执行贯穿应用程序的操作的URL。更优雅的做法是使用可选模块<code>ngResource</code>中的<code>$resource</code>服务，它有漂亮的方式处理发送到服务器的URL的定义。</p>
<ul>
<li><p>定义RESTful控制器<br>  我要开始通过AngularJS的<code>$resource</code>服务来定义控制器以提供访问权限给Deployd的RESTful API。我在controllers文件夹中创建了新文件<code>adminProductController.js</code>并用它定义控制器，下面是文件内容：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">"sportsStoreAdmin"</span>)</div><div class="line">.constant(<span class="string">"productUrl"</span>,<span class="string">"http://localhost:5500/products/"</span>)</div><div class="line">.config(<span class="function"><span class="keyword">function</span>(<span class="params">$httpProvider</span>)</span>&#123;</div><div class="line">	$httpProvider.defaults.withCredentials = <span class="literal">true</span>;</div><div class="line">&#125;)</div><div class="line">.controller(<span class="string">"productCtrl"</span>,[<span class="string">"$scope"</span>,<span class="string">"$resource"</span>,<span class="string">"productUrl"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope,$resource,productUrl</span>)</span>&#123;</div><div class="line">	$scope.productResource = $resource(productUrl+<span class="string">":id"</span>,&#123;id:<span class="string">"@id"</span>&#125;);</div><div class="line">	<span class="comment">//查询列表</span></div><div class="line">	$scope.listProducts = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		$scope.products = $scope.productResource.query();</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//删除指定产品</span></div><div class="line">	$scope.deleteProduct = <span class="function"><span class="keyword">function</span>(<span class="params">product</span>)</span>&#123;</div><div class="line">		product.$<span class="keyword">delete</span>().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			$scope.products.splice($scope.products.indexOf(product),<span class="number">1</span>);</div><div class="line">		&#125;)</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//创建产品</span></div><div class="line">	$scope.createProduct = <span class="function"><span class="keyword">function</span>(<span class="params">product</span>)</span>&#123;</div><div class="line">		<span class="keyword">new</span> $scope.productResource(product).$save().then(<span class="function"><span class="keyword">function</span>(<span class="params">newProduct</span>)</span>&#123;</div><div class="line">			$scope.products.push(newProduct);</div><div class="line">			$scope.editedProduct = <span class="literal">null</span>;</div><div class="line">		&#125;)</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//更新指定产品</span></div><div class="line">	$scope.updateProduct = <span class="function"><span class="keyword">function</span>(<span class="params">product</span>)</span>&#123;</div><div class="line">		product.$save();</div><div class="line">		$scope.editedProduct = <span class="literal">null</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//编辑指定产品</span></div><div class="line">	$scope.startEdit = <span class="function"><span class="keyword">function</span>(<span class="params">product</span>)</span>&#123;</div><div class="line">		$scope.editedProduct = product;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//取消编辑</span></div><div class="line">	$scope.cancelEdit = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		$scope.editedProduct = <span class="literal">null</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//默认查询列表数据</span></div><div class="line">	$scope.listProducts();</div><div class="line">&#125;]);</div></pre></td></tr></table></figure>
<p>  这里不深入讨论该清单代码（后面详细讲解），只介绍部分重点代码。<br>  首先，<code>$resource</code>服务是建立在<code>$http</code>服务所提供的特性的基础上的。这需要我启用withCredentials选项，我没有权限访问由<code>$http</code>服务产生的请求，但我可以使用模块上的config方法改变所有Ajax请求的默认设置。<br>  本例中最重要的一部分是下面这句代码：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$scope.productResource = $resource(productUrl+<span class="string">":id"</span>,&#123;id:<span class="string">"@id"</span>&#125;);</div></pre></td></tr></table></figure>
<p>  传入<code>$resource</code>的第一个参数用来定义将用于产生查询的URL格式。”:id”部分与第二个参数的映射对象一致，告诉AngularJS如果数据对象中有id属性，那它应该被添加到用于Ajax请求的URL中。用于访问RESTful的API的URL 和HTTP方法是由这两个参数推断出的。<br>  访问对象是由<code>$resource</code>服务的结果，有query、get、delete、remove和save方法。调用这些方法触发执行相应操作的Ajax请求。</p>
</li>
<li><p>定义视图<br>  现在，我将视图<code>adminProducts.html</code>的占位内容替换为以下内容：</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">	<span class="selector-id">#productTable</span>&#123;<span class="attribute">width</span>: auto;&#125;</div><div class="line">	<span class="selector-id">#productTable</span> <span class="selector-tag">td</span>&#123;<span class="attribute">max-width</span>: <span class="number">150px</span>;<span class="attribute">text-overflow</span>: ellipsis;<span class="attribute">overflow</span>: hidden;<span class="attribute">white-space</span>: nowrap;&#125;</div><div class="line">	<span class="selector-id">#productTable</span> <span class="selector-tag">td</span> <span class="selector-tag">input</span>&#123;<span class="attribute">max-width</span>: <span class="number">125px</span>;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"productCtrl"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-striped table-bordered"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">th</span>&gt;</span>产品名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">th</span>&gt;</span>产品描述<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">th</span>&gt;</span>产品目录<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">th</span>&gt;</span>产品价格<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tr</span> <span class="attr">ng-repeat</span>=<span class="string">"item in products"</span> <span class="attr">ng-hide</span>=<span class="string">"item.id == editedProduct.id"</span> &gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"description"</span>&gt;</span>&#123;&#123;item.description&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.category&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.price | currency&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">ng-click</span>=<span class="string">"startEdit(item);"</span> <span class="attr">class</span>=<span class="string">"btn btn-xs btn-primary"</span>&gt;</span></div><div class="line">					编辑</div><div class="line">				<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">ng-click</span>=<span class="string">"deleteProduct(item);"</span> <span class="attr">class</span>=<span class="string">"btn btn-xs btn-danger"</span>&gt;</span></div><div class="line">					删除</div><div class="line">				<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tr</span> <span class="attr">ng-class</span>=<span class="string">"&#123;danger:editedProduct&#125;"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"editedProduct.name"</span> <span class="attr">required</span>=<span class="string">"required"</span> /&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"editedProduct.description"</span> <span class="attr">required</span>=<span class="string">"required"</span> /&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"editedProduct.category"</span> <span class="attr">required</span>=<span class="string">"required"</span> /&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"editedProduct.price"</span> <span class="attr">required</span>=<span class="string">"required"</span> /&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">ng-hide</span>=<span class="string">"editedProduct.id"</span> <span class="attr">ng-click</span>=<span class="string">"createProduct(editedProduct);"</span> <span class="attr">class</span>=<span class="string">"btn btn-xs btn-primary"</span>&gt;</span></div><div class="line">					创建</div><div class="line">				<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">ng-show</span>=<span class="string">"editedProduct.id"</span> <span class="attr">ng-click</span>=<span class="string">"updateProduct(editedProduct);"</span> <span class="attr">class</span>=<span class="string">"btn btn-xs btn-primary"</span>&gt;</span></div><div class="line">					保存</div><div class="line">				<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">ng-show</span>=<span class="string">"editedProduct"</span> <span class="attr">ng-click</span>=<span class="string">"cancelEdit(editedProduct);"</span> <span class="attr">class</span>=<span class="string">"btn btn-xs btn-danger"</span>&gt;</span></div><div class="line">					取消</div><div class="line">				<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>添加HTML文件的引用<br>  剩下的就是在admin.html文件中添加<code>script</code>元素来引入新模块和新控制器并更新主应用程序模块，依赖于<code>ngResource</code>，下面是admin.html文件修改后的内容：</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">ng-app</span>=<span class="string">"sportsStoreAdmin"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"angular.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"ngmodules/angular-route.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"ngmodules/angular-resource.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"bootstrap.css"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"bootstrap-theme.css"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">			angular.module(<span class="string">"sportsStoreAdmin"</span>,[<span class="string">"ngRoute"</span>,<span class="string">"ngResource"</span>])</div><div class="line">			.config([<span class="string">"$routeProvider"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$routeProvider</span>)</span>&#123;</div><div class="line">				$routeProvider.when(<span class="string">"/login"</span>,&#123;</div><div class="line">					templateUrl : <span class="string">"views/adminLogin.html"</span></div><div class="line">				&#125;);</div><div class="line">				$routeProvider.when(<span class="string">"/main"</span>,&#123;</div><div class="line">					templateUrl : <span class="string">"views/adminMain.html"</span></div><div class="line">				&#125;);</div><div class="line">				$routeProvider.otherwise(&#123;</div><div class="line">					redirectTo : <span class="string">"/login"</span></div><div class="line">				&#125;);</div><div class="line">			&#125;])</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"controllers/adminControllers.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"controllers/adminProductController.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">ng-view</span>&gt;</span><span class="tag">&lt;/<span class="name">ng-view</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>  现在，一个简单但完整的运动商店应用程序已经完成。你可以从<code>https://github.com/heji1993/angular-sportsstore.git</code>下载完整代码。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在本章中，我会收集并验证运输详情以完成运动商店应用程序，并把订单存储在Deployd服务器上。我还会创建管理应用程序，让认证的用户看到订单并管理产品目录。&lt;/p&gt;
    
    </summary>
    
      <category term="AngularJS" scheme="http://heji.website/categories/AngularJS/"/>
    
    
      <category term="AngularJS" scheme="http://heji.website/tags/AngularJS/"/>
    
  </entry>
  
  <entry>
    <title>第五章、运动商店：导航和结账</title>
    <link href="http://heji.website/2017/03/06/%E7%AC%AC%E4%BA%94%E7%AB%A0%E3%80%81%E8%BF%90%E5%8A%A8%E5%95%86%E5%BA%97%EF%BC%9A%E5%AF%BC%E8%88%AA%E5%92%8C%E7%BB%93%E8%B4%A6/"/>
    <id>http://heji.website/2017/03/06/第五章、运动商店：导航和结账/</id>
    <published>2017-03-06T06:39:25.214Z</published>
    <updated>2017-03-06T06:44:44.431Z</updated>
    
    <content type="html"><![CDATA[<p>在本章中，我将通过添加对真实数据的支持，实现购物车并开始订单结账的过程，继续运动商店应用程序的开发。</p>
<a id="more"></a>
<h2 id="使用真实数据-请先启动Deployd"><a href="#使用真实数据-请先启动Deployd" class="headerlink" title="使用真实数据(请先启动Deployd )"></a>使用真实数据(请先启动Deployd )</h2><h3 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h3><p> AngularJS通过服务<code>$http</code>提供对产生Ajax请求的支持，后续章节讲述服务的工作细节以及<code>$http</code>本身。下面是修改后的<code>controllers/sportsStore.js</code>文件。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">//module方法值传一个参数表示我们尝试找到sportsStore这个模块,必须先有sportsStore模块,否则会报错</span></div><div class="line">angular.module(<span class="string">"sportsStore"</span>)</div><div class="line">.constant(<span class="string">"dataUrl"</span>,<span class="string">"http://localhost:5550/products"</span>)</div><div class="line">.controller(<span class="string">"sportsStoreCtrl"</span>,[<span class="string">"$scope"</span>,<span class="string">"$http"</span>,<span class="string">"dataUrl"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope,$http,dataUrl</span>)</span>&#123;</div><div class="line">	$scope.data = &#123;&#125;;</div><div class="line">	<span class="comment">//使用$http服务查询数据</span></div><div class="line">	$http.get(dataUrl)</div><div class="line">	.success(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</div><div class="line">		$scope.data.products = result;</div><div class="line">	&#125;)</div><div class="line">	.error(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</div><div class="line">		$scope.data.error = error;</div><div class="line">	&#125;)</div><div class="line">&#125;])</div></pre></td></tr></table></figure>
<h3 id="处理错误"><a href="#处理错误" class="headerlink" title="处理错误"></a>处理错误</h3><p>当有错误时，应该在页面显示错误信息，为此，需要对<code>app.html</code>页面进行修改，下面是修改的部分代码：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">    &lt;header class="navbar navbar-inverse"&gt;</div><div class="line">		&lt;a href="#" class="navbar-brand"&gt;运动商店&lt;/a&gt;</div><div class="line">	&lt;/header&gt;</div><div class="line">	&lt;!--有错误时显示--&gt;</div><div class="line">	&#123;&#123;data.error.status&#125;&#125;</div><div class="line">	&lt;section class="alert alert-danger" ng-show="data.error"&gt;</div><div class="line">		Error (&#123;&#123;data.error.status&#125;&#125;).The product data was not loaded.</div><div class="line">		&lt;a href="/app.html" class="alert-link"&gt;Click here to try again&lt;/a&gt;</div><div class="line">	&lt;/section&gt;</div><div class="line">	&lt;!--没有错误时显示--&gt;</div><div class="line">	&lt;section class="panel panel-default row" ng-controller="productListCtrl" ng-hide="data.error"&gt;</div><div class="line">...</div></pre></td></tr></table></figure>
<h2 id="创建局部视图"><a href="#创建局部视图" class="headerlink" title="创建局部视图"></a>创建局部视图</h2><p>在<code>app.html</code>文件中的HTML错综复杂，随着应用程序功能的增加，情况会变得更加糟糕，幸运的是，我们可以把<code>app.html</code>拆分成多个独立的文件，然后使用AngularJS提供的<code>ng-include</code>指令在运行时引入这些文件。为了这个目的，我创建了<code>views/productList.html</code>文件，下面是该文件的内容：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"panel panel-default row"</span> <span class="attr">ng-controller</span>=<span class="string">"productListCtrl"</span> <span class="attr">ng-hide</span>=<span class="string">"data.error"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"col-xs-3"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">ng-click</span>=<span class="string">"selectCategory()"</span> <span class="attr">class</span>=<span class="string">"btn btn-block btn-default"</span> </span></div><div class="line">			<span class="attr">ng-class</span>=<span class="string">"getCategoryClass()"</span>&gt;Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--先对商品按目录进行排序,然后再返回去重后的目录--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">ng-repeat</span>=<span class="string">"item in data.products | orderBy:'category' | unique:'category'"</span></span></div><div class="line">			<span class="attr">ng-click</span>=<span class="string">"selectCategory(item)"</span> <span class="attr">class</span>=<span class="string">"btn btn-block btn-default btn-lg"</span> </div><div class="line">			<span class="attr">ng-class</span>=<span class="string">"getCategoryClass(item)"</span>&gt;&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">nav</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-8"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--遍历添加商品--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"well"</span> <span class="attr">ng-repeat</span>=<span class="string">"item in data.products | filter:categoryFilterFn | range:selectedPage:pageSize"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">h3</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></div><div class="line">				<span class="comment">&lt;!--使用金额过滤器，将数值转换为金额--&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"pull-right label label-primary"</span>&gt;</span></div><div class="line">					&#123;&#123;item.price | currency&#125;&#125;</div><div class="line">				<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"lead"</span>&gt;</span>&#123;&#123;item.description &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pull-right btn-group"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">ng-repeat</span>=<span class="string">"page in data.products | filter:categoryFilterFn | pageCount:pageSize"</span></span></div><div class="line">				<span class="attr">ng-click</span>=<span class="string">"selectPage($index + 1)"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">ng-class</span>=<span class="string">"getPageClass($index + 1)"</span>&gt;</div><div class="line">				&#123;&#123;$index + 1&#125;&#125;</div><div class="line">			<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>下面是<code>app.html</code>文件的内容：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">ng-app</span>=<span class="string">"sportsStore"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>SportsStore<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"angular.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"bootstrap.css"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"bootstrap-theme.css"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">			<span class="comment">//依赖customFilter模块</span></div><div class="line">			angular.module(<span class="string">"sportsStore"</span>,[<span class="string">"customFilter"</span>]);</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--引入顶级控制器--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"controllers/sportsStore.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--引入自定义过滤器--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"filters/customFilters.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--引入产品列表控制器--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"controllers/productListController.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!--使用控制器--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-controller</span>=<span class="string">"sportsStoreCtrl"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"navbar navbar-inverse"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span>&gt;</span>运动商店<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">header</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--有错误时显示--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"alert alert-danger"</span> <span class="attr">ng-show</span>=<span class="string">"data.error"</span>&gt;</span></div><div class="line">			Error (&#123;&#123;data.error.status&#125;&#125;).The product data was not loaded.</div><div class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/app.html"</span> <span class="attr">class</span>=<span class="string">"alert-link"</span>&gt;</span>Click here to try again<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">ng-include</span> <span class="attr">src</span>=<span class="string">"'views/productList.html'"</span>&gt;</span><span class="tag">&lt;/<span class="name">ng-include</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>注意：当AngularJS遇到ng-include指令时，它会产生Ajax请求，载入src属性所指定的文件，并插入其内容以替换该元素。在使用ng-include指令时，我将文件名写成单引号的字面量。如果我不这么做，那指令会在作用域属性上寻找文件名</strong></p>
<h2 id="创建购物车"><a href="#创建购物车" class="headerlink" title="创建购物车"></a>创建购物车</h2><p>用户能看到我的有效产品，但我没有购物车就没法出售任何东西。在本段中，我将构建购物车功能，下图是它的基本流程：<br><img src="imgs/1486461273494_2.png" alt=""><br>实现购物车特性需要若干组改动，包括创建自定义的AngularJS组件。</p>
<h3 id="定义购物车模块和服务"><a href="#定义购物车模块和服务" class="headerlink" title="定义购物车模块和服务"></a>定义购物车模块和服务</h3><p>通常，我们习惯把控制器放在<code>controllers</code>目录，过滤器放在<code>filters</code>目录下，视图放在<code>views</code>目录下等。我们也可以根据具体情况，把实现某一功能的全部代码写成一个组件，为此，我定义了<code>components</code>文件夹专门存放自定义的组件。在本例中，我将创建购物车模块。我首先创建<code>components/cart</code>目录，并向其添加新的javascript文件<code>cart.js</code>，下面是<code>cart.js</code>文件的内容：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">"cart"</span>,[])</div><div class="line">.factory(<span class="string">"cartService"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> cartData = [];</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		<span class="comment">//添加产品</span></div><div class="line">		addProduct : <span class="function"><span class="keyword">function</span>(<span class="params">id,name,price</span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> addToExistingItem = <span class="literal">false</span>;</div><div class="line">			<span class="comment">//如果已经存在相同id的产品,只增加其数量</span></div><div class="line">			<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; cartData.length ; i++)&#123;</div><div class="line">				<span class="keyword">if</span>(cartData[i].id == id)&#123;</div><div class="line">					cartData[i].count ++;</div><div class="line">					addToExistingItem = <span class="literal">true</span>;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span>(!addToExistingItem)&#123;</div><div class="line">				cartData.push(&#123;</div><div class="line">					count:<span class="number">1</span>,id:id,price:price,name:name</div><div class="line">				&#125;);</div><div class="line">			&#125;</div><div class="line">		&#125;,</div><div class="line">		<span class="comment">//移除产品</span></div><div class="line">		removeProduct : <span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>&#123;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; cartData.length ; i++)&#123;</div><div class="line">				<span class="keyword">if</span>(cartData[i].id == id)&#123;</div><div class="line">					cartData.splice(i,<span class="number">1</span>);</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;,</div><div class="line">		<span class="comment">//获取所有产品</span></div><div class="line">		getProducts : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">return</span> cartData;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>我先在新模块<code>cart</code>自定义了<code>cartService</code>服务，创建服务有不同的方法，比如<code>service</code>、<code>factory</code>和<code>provider</code>，后面讲讲解它们的区别。创建服务第一个参数是服务名，第二个参数是工厂函数，在服务被注入应用于应用程序时，工厂函数只被调用一次(第一次注入时调用)。在本例中，我的cart服务工厂函数返回对象，对象有三个方法，下面是<code>cartService</code>服务所定义的方法：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>addProduct(id,name,price)</td>
<td>添加指定的产品到购物车，或者如果购物车以及包含该产品，就增加产品的数量</td>
</tr>
<tr>
<td>removeProduct(id)</td>
<td>删除指定ID的产品</td>
</tr>
<tr>
<td>getProducts()</td>
<td>返回购物车中所有商品</td>
</tr>
</tbody>
</table>
<h3 id="创建购物车部件"><a href="#创建购物车部件" class="headerlink" title="创建购物车部件"></a>创建购物车部件</h3><p>我下一步要创建囊括购物车内容的部件，提供给用户以开始结账流程，我将创建自定义指令来做。指令是自包含的，复用功能单元是AngularJS开发的核心。下面是我在<code>components/cart/cart.js</code>文件添加的内容：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="comment">//自定义cartSummary指令,依赖于cartService服务</span></div><div class="line">.directive(<span class="string">"cartSummary"</span>,[<span class="string">"cartService"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">cartService</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		restrict : <span class="string">"E"</span>,</div><div class="line">		templateUrl : <span class="string">"components/cart/cartSummary.html"</span>,</div><div class="line">		controller : [<span class="string">"$scope"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> cartData = cartService.getProducts();</div><div class="line">			<span class="comment">//计算购物车商品总价</span></div><div class="line">			$scope.total = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="keyword">var</span> total = <span class="number">0</span>;</div><div class="line">				<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; cartData.length ; i++)&#123;</div><div class="line">					total += (cartData[i].count * cartData[i].price);</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">return</span> total;</div><div class="line">			&#125;</div><div class="line">			<span class="comment">//计算购物车商品总数</span></div><div class="line">			$scope.itemCount = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="keyword">var</span> total = <span class="number">0</span>;</div><div class="line">				<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; cartData.length ; i++)&#123;</div><div class="line">					total += cartData[i].count;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">return</span> total;</div><div class="line">			&#125;</div><div class="line">		&#125;]</div><div class="line">	&#125;</div><div class="line">&#125;]);</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>指令由AngularJS模块上的 directive方法创建，第一个参数是指令名（驼峰式命名），第二个参数是返回指令释义对象的工厂函数。指令释义对象定义属性告诉AngularJS你的指令做什么和如何做。我在定义cartSummary指令时指定了三个属性，下面是三个属性的说明（后续章节讲解并演示整套属性）</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>restrict</td>
<td>指定指令如果应用，E值表示指令只能作为元素使用，A值表示指令只能作为属性使用，EA表示指令可作为元素或属性使用</td>
</tr>
<tr>
<td>templateUrl</td>
<td>指定将被插入指令的元素内容的局部视图</td>
</tr>
<tr>
<td>controller</td>
<td>指定向局部视图提供数据和行为的控制器</td>
</tr>
</tbody>
</table>
<p>简单地说，我的指令释义定义了控制器，告诉AngularJS使用<code>components/cart/cartSummary.html</code>视图，还有约束指令，让其可以仅作为元素而被使用。<br>另外，因为我使用了<code>cartService</code>服务，需要注入服务。我又在指令的控制器定义了两个行为<code>total</code>和<code>itemCount</code>，这让我可以直接在局部视图内使用这些行为。下面是<code>components/cart/cartSummary.html</code>文件的内容：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;style type="text/css"&gt;</div><div class="line">	.navbar-right&#123;</div><div class="line">		float: right !important;</div><div class="line">		margin-right: 5px; </div><div class="line">	&#125;</div><div class="line">	.navbar-text&#123;</div><div class="line">		margin-right: 10px;</div><div class="line">	&#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;div class="navbar-right"&gt;</div><div class="line">	&lt;div class="navbar-text"&gt;</div><div class="line">		&lt;b&gt;Your cart:&lt;/b&gt;</div><div class="line">		&#123;&#123;itemCount()&#125;&#125; item(s),</div><div class="line">		&#123;&#123;total() | currency&#125;&#125;</div><div class="line">	&lt;/div&gt;</div><div class="line">	&lt;!--按钮功能后面实现--&gt;</div><div class="line">	&lt;a href="#" class="btn btn-default navbar-btn"&gt;Checkout&lt;/a&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>下面在<code>app.html</code>应用模块：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="comment">//依赖customFilter模块</span></div><div class="line">	angular.module(<span class="string">"sportsStore"</span>,[<span class="string">"customFilter"</span>,<span class="string">"cart"</span>]);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--引入顶级控制器--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"controllers/sportsStore.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--引入自定义过滤器--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"filters/customFilters.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--引入产品列表控制器--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"controllers/productListController.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--引入购物车模块--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"components/cart/cart.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">...</div><div class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"navbar navbar-inverse"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span>&gt;</span>运动商店<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">cart-summary</span>&gt;</span><span class="tag">&lt;/<span class="name">cart-summary</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></div><div class="line">...</div></pre></td></tr></table></figure></p>
<h3 id="添加产品选择按钮"><a href="#添加产品选择按钮" class="headerlink" title="添加产品选择按钮"></a>添加产品选择按钮</h3><p>我下一步是在产品详情添加按钮，让用户可以添加产品到购物车，下面是我对<code>controllers/productListController.js</code>文件所做的修改：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="comment">//控制器注入cartService模块</span></div><div class="line">.controller(<span class="string">"productListCtrl"</span>,[<span class="string">"$scope"</span>,<span class="string">"$filter"</span>,<span class="string">"productListActiveClass"</span>,<span class="string">"productListPageCount"</span>,<span class="string">"cartService"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope,$filter,productListActiveClass,productListPageCount,cartService</span>)</span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="comment">//往购物车添加商品</span></div><div class="line">	$scope.addProductToCart = <span class="function"><span class="keyword">function</span>(<span class="params">product</span>)</span>&#123;</div><div class="line">		cartService.addProduct(product.id,product.name,product.price);</div><div class="line">	&#125;</div><div class="line">&#125;]);</div></pre></td></tr></table></figure></p>
<p>我声明了对<code>cartService</code>的依赖，并定义了行为<code>addProductToCart</code>用于往购物车添加商品。<br>然后，往局部视图<code>views/productList.html</code>添加按钮调用<code>addProductToCart</code>行为：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="comment">&lt;!--遍历添加商品--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"well"</span> <span class="attr">ng-repeat</span>=<span class="string">"item in data.products | filter:categoryFilterFn | range:selectedPage:pageSize"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">h3</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--使用金额过滤器，将数值转换为金额--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"pull-right label label-primary"</span>&gt;</span></div><div class="line">			&#123;&#123;item.price | currency&#125;&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!--产品选择按钮--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-success pull-right"</span> <span class="attr">ng-click</span>=<span class="string">"addProductToCart(item)"</span>&gt;</span>Add to cart<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"lead"</span>&gt;</span>&#123;&#123;item.description &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>现在，你可以往购物车添加商品并自动计算购物车商品的数量和总价。</p>
<h2 id="添加URL导航"><a href="#添加URL导航" class="headerlink" title="添加URL导航"></a>添加URL导航</h2><p>在添加结账功能的支持之前，我要加强运动商店应用程序的基础设施，添加URL路由的支持。我会在后续章节详细介绍路由，简单地说，路由可以基于当前的URL自动地显示不同的局部视图。这使得它更易于建立更大的应用程序。<br>为实现路由功能，我先创建结账页面的局部视图，因为还没开始开阿发结账流程，所以局部视图只包含简单的占位符。下面是<code>views/checkoutSunmary.html</code>页面的内容：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"lead"</span>&gt;</span></div><div class="line">	This is the checkout summary view</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/products"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>返回<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="定义和使用URL路由"><a href="#定义和使用URL路由" class="headerlink" title="定义和使用URL路由"></a>定义和使用URL路由</h3><p>现在，我需要分别映射<code>/product</code>和<code>/checkout</code>到<code>productList.html</code>页面和<code>checkoutSummary.html</code>页面，其他的URL都默认映射到<code>productList.html</code>页面，下面是<code>app.html</code>文件的改动:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="comment">//依赖customFilter模块、cart模块和ngRoute模块</span></div><div class="line">	angular.module(<span class="string">"sportsStore"</span>,[<span class="string">"customFilter"</span>,<span class="string">"cart"</span>,<span class="string">"ngRoute"</span>])</div><div class="line">	<span class="comment">//配置路由</span></div><div class="line">	.config([<span class="string">"$routeProvider"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$routeProvider</span>)</span>&#123;</div><div class="line">		$routeProvider.when(<span class="string">"/checkout"</span>,&#123;</div><div class="line">			templateUrl:<span class="string">"views/checkoutSunmary.html"</span></div><div class="line">		&#125;)</div><div class="line">		.when(<span class="string">"/pruducts"</span>,&#123;</div><div class="line">			templateUrl:<span class="string">"views/productList.html"</span></div><div class="line">		&#125;)</div><div class="line">		.otherwise(&#123;</div><div class="line">			templateUrl:<span class="string">"views/productList.html"</span></div><div class="line">		&#125;);</div><div class="line">	&#125;]);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--引入顶级控制器--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"controllers/sportsStore.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--引入自定义过滤器--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"filters/customFilters.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--引入产品列表控制器--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"controllers/productListController.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--引入购物车模块--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"components/cart/cart.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--引入路由模块--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"ngmodules/angular-route.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">...</div><div class="line"><span class="comment">&lt;!--有错误时显示--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"alert alert-danger"</span> <span class="attr">ng-show</span>=<span class="string">"data.error"</span>&gt;</span></div><div class="line">	出现错误 (&#123;&#123;data.error.status&#125;&#125;).商品的数据不能加载.</div><div class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/app.html"</span> <span class="attr">class</span>=<span class="string">"alert-link"</span>&gt;</span>点击这里再次尝试<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ng-view</span>&gt;</span><span class="tag">&lt;/<span class="name">ng-view</span>&gt;</span></div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>在<code>cartSummary.html</code>页面点击结账按钮需要跳转到结账页面，为此，需要对<code>components/cart/cartSummary.html</code>进行跳转：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="comment">&lt;!--按钮功能后面实现--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/checkout"</span> <span class="attr">class</span>=<span class="string">"btn btn-default navbar-btn"</span>&gt;</span>back<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">...</div></pre></td></tr></table></figure></p>
<h2 id="开始结账流程"><a href="#开始结账流程" class="headerlink" title="开始结账流程"></a>开始结账流程</h2><p>现在，我将转向结账流程。我的第一个任务是定义新的控制器<code>cartSummaryCtrl</code>，我把它放在<code>controllers/checkoutController.js</code>文件。因为cartSummary指令需要使用计算总价和商品数量的行为，<code>cartSummaryCtrl</code>也需要使用计算总价行为，为此，我修改<code>components/cart/cart.js</code>文件，把这些行为定义在<code>cartService</code>内，下面是修改后的<code>components/cart/cart.js</code>文件：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">"cart"</span>,[])</div><div class="line">.factory(<span class="string">"cartService"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> cartData = [];</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		<span class="comment">//添加产品</span></div><div class="line">		addProduct : <span class="function"><span class="keyword">function</span>(<span class="params">id,name,price</span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> addToExistingItem = <span class="literal">false</span>;</div><div class="line">			<span class="comment">//如果已经存在相同id的产品,只增加其数量</span></div><div class="line">			<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; cartData.length ; i++)&#123;</div><div class="line">				<span class="keyword">if</span>(cartData[i].id == id)&#123;</div><div class="line">					cartData[i].count ++;</div><div class="line">					addToExistingItem = <span class="literal">true</span>;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span>(!addToExistingItem)&#123;</div><div class="line">				cartData.push(&#123;</div><div class="line">					count:<span class="number">1</span>,id:id,price:price,name:name</div><div class="line">				&#125;);</div><div class="line">			&#125;</div><div class="line">		&#125;,</div><div class="line">		<span class="comment">//移除产品</span></div><div class="line">		removeProduct : <span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>&#123;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; cartData.length ; i++)&#123;</div><div class="line">				<span class="keyword">if</span>(cartData[i].id == id)&#123;</div><div class="line">					cartData.slice(i,<span class="number">1</span>);</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;,</div><div class="line">		<span class="comment">//获取所有产品</span></div><div class="line">		getProducts : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">return</span> cartData;</div><div class="line">		&#125;,</div><div class="line">		<span class="comment">//计算购物车商品总价</span></div><div class="line">		total : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> total = <span class="number">0</span>;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; cartData.length ; i++)&#123;</div><div class="line">				total += (cartData[i].count * cartData[i].price);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> total;</div><div class="line">		&#125;,</div><div class="line">		<span class="comment">//计算购物车商品总数</span></div><div class="line">		itemCount : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> total = <span class="number">0</span>;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; cartData.length ; i++)&#123;</div><div class="line">				total += cartData[i].count;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> total;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;)</div><div class="line"><span class="comment">//自定义cartSummary指令,依赖于cartService服务</span></div><div class="line">.directive(<span class="string">"cartSummary"</span>,[<span class="string">"cartService"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">cartService</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		restrict : <span class="string">"E"</span>,</div><div class="line">		templateUrl : <span class="string">"components/cart/cartSummary.html"</span>,</div><div class="line">		controller : [<span class="string">"$scope"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> cartData = cartService.getProducts();</div><div class="line">			<span class="comment">//计算购物车商品总价</span></div><div class="line">			$scope.total = cartService.total;</div><div class="line">			<span class="comment">//计算购物车商品总数</span></div><div class="line">			$scope.itemCount = cartService.itemCount;</div><div class="line">		&#125;]</div><div class="line">	&#125;</div><div class="line">&#125;]);</div></pre></td></tr></table></figure></p>
<p>下面是<code>controllers/checkoutController.js</code>文件的内容：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">"sportsStore"</span>)</div><div class="line">.controller(<span class="string">"cartSummaryCtrl"</span>,[<span class="string">"$scope"</span>,<span class="string">"cartService"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope,cartService</span>)</span>&#123;</div><div class="line">	<span class="comment">//获取购物车所有商品</span></div><div class="line">	$scope.cartData = cartService.getProducts();</div><div class="line">	<span class="comment">//计算商品总价</span></div><div class="line">	$scope.total = cartService.total;</div><div class="line">	<span class="comment">//移除商品</span></div><div class="line">	$scope.remove = cartService.removeProduct;</div><div class="line">&#125;]);</div></pre></td></tr></table></figure></p>
<p>为应用控制器，实现结账流程，我需要对<code>views/checkoutSunmary.html</code>文件进行修改，下面是修改后的内容：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我的购物车<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"cartSummaryCtrl"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-warning"</span> <span class="attr">ng-show</span>=<span class="string">"cartData.length == 0"</span>&gt;</span></div><div class="line">		你的购物车没有商品，点击<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/products"</span> <span class="attr">class</span>=<span class="string">"alert-link"</span>&gt;</span>这里<span class="tag">&lt;/<span class="name">a</span>&gt;</span>返回购物。</div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-hide</span>=<span class="string">"cartData.length == 0"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">thead</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span>数量<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">th</span>&gt;</span>商品名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">"text-right"</span>&gt;</span>商品单价<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">"text-right"</span>&gt;</span>商品总价<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">thead</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">tbody</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span> <span class="attr">ng-repeat</span>=<span class="string">"item in cartData"</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span>&#123;&#123;item.count&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"text-left"</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"text-right"</span>&gt;</span>&#123;&#123;item.price | currency&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"text-right"</span>&gt;</span>&#123;&#123;(item.price * item.count) | currency&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-click</span>=<span class="string">"remove(item.id)"</span> <span class="attr">class</span>=<span class="string">"btn btn-sm btn-warning"</span>&gt;</span>移除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"4"</span> <span class="attr">class</span>=<span class="string">"text-right"</span>&gt;</span>总计：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"text-left"</span>&gt;</span></div><div class="line">						&#123;&#123;total() | currency&#125;&#125;</div><div class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/products"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>继续购物<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/placeorder"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>支付<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span>	</div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>接着，我需要在<code>app.html</code>引入控制器并添加支付路由、感谢页面路由，这两个页面我在接下来的章节会补充，下面是<code>app.html</code>修改的内容：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="comment">//依赖customFilter模块、cart模块和ngRoute模块</span></div><div class="line">	angular.module(<span class="string">"sportsStore"</span>,[<span class="string">"customFilter"</span>,<span class="string">"cart"</span>,<span class="string">"ngRoute"</span>])</div><div class="line">	<span class="comment">//配置路由</span></div><div class="line">	.config([<span class="string">"$routeProvider"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$routeProvider</span>)</span>&#123;</div><div class="line">		$routeProvider.when(<span class="string">"/checkout"</span>,&#123;</div><div class="line">			templateUrl:<span class="string">"views/checkoutSunmary.html"</span></div><div class="line">		&#125;)</div><div class="line">		.when(<span class="string">"/placeorder"</span>,&#123;</div><div class="line">			templateUrl:<span class="string">"views/placeorder.html"</span></div><div class="line">		&#125;)</div><div class="line">		.when(<span class="string">"/complete"</span>,&#123;</div><div class="line">			templateUrl:<span class="string">"views/thankYou.html"</span></div><div class="line">		&#125;)</div><div class="line">		.when(<span class="string">"/pruducts"</span>,&#123;</div><div class="line">			templateUrl:<span class="string">"views/productList.html"</span></div><div class="line">		&#125;)</div><div class="line">		.otherwise(&#123;</div><div class="line">			templateUrl:<span class="string">"views/productList.html"</span></div><div class="line">		&#125;);</div><div class="line">	&#125;]);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--引入顶级控制器--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"controllers/sportsStore.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--引入自定义过滤器--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"filters/customFilters.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--引入产品列表控制器--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"controllers/productListController.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--引入购物车模块--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"components/cart/cart.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--引入路由模块--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"ngmodules/angular-route.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--引入结账控制器--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"controllers/checkoutController.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">...</div></pre></td></tr></table></figure></p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>在本章中，我继续了运动商店应用程序的开发，从Deployd服务器获取产品数据，添加局部视图的支持，以及实现自定义指令，我还设置了URL路由并添加允许用户下单的功能。在下一章，我将完成运动商店应用程序并添加管理系统的支持。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在本章中，我将通过添加对真实数据的支持，实现购物车并开始订单结账的过程，继续运动商店应用程序的开发。&lt;/p&gt;
    
    </summary>
    
      <category term="AngularJS" scheme="http://heji.website/categories/AngularJS/"/>
    
    
      <category term="AngularJS" scheme="http://heji.website/tags/AngularJS/"/>
    
  </entry>
  
  <entry>
    <title>CSS3制作消息提示框</title>
    <link href="http://heji.website/2017/02/22/CSS3%E5%88%B6%E4%BD%9C%E6%B6%88%E6%81%AF%E6%8F%90%E7%A4%BA%E6%A1%86/"/>
    <id>http://heji.website/2017/02/22/CSS3制作消息提示框/</id>
    <published>2017-02-22T02:54:41.758Z</published>
    <updated>2017-02-22T03:00:27.841Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍使用CSS3制作实用消息提示框。</p>
<p>三角提示框，就是下面所示：<br><img src="imgs/1487729518342_2.png" alt=""><br>我们来研究下如何用CSS实现。<br>假定有一个盒子(div)，给定宽高分别为100像素，再给定边框50像素，那么它看起来会是下面这个样子(为了更直观，给了边框四种不同的颜色)：<br><img src="imgs/1487729572015_3.png" alt=""><br><strong>注意：box-sizing默认为content-box，即在宽度和高度之外绘制元素的内边距和边框</strong><br>接下来，把盒子的高度设为0：<br><img src="imgs/1487729733577_4.png" alt=""><br>再把宽度也设为0：<br><img src="imgs/1487729746624_5.png" alt=""><br>这样雏形就已经出来了，由于IE6的bug(高度为0的div会有一定默认的高度，我的电脑上测量结果为19像素)，需要做一些小调整，给div加一个overflow:hidden，IE6就能正确解析了。<br>接下来的工作就是去掉其余的三个边框。以向上箭头为例，假如我想让箭头朝上，那么就需要将左、上、右三条边框的颜色给去掉。一个常规的方法是将这三条边框的颜色设为透明，即transparent属性。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*设置三个值时，第一个值是上边框颜色，第二个值是右左边框颜色，第三个值是下边框颜色*/</span></div><div class="line"><span class="selector-tag">border-color</span><span class="selector-pseudo">:transparent</span> <span class="selector-tag">transparent</span> <span class="selector-id">#056F61</span></div></pre></td></tr></table></figure></p>
<p>设置以后可以看到如下效果：<br><img src="imgs/1487729865921_6.png" alt=""><br>这样CSS制作的三角形就完成了。到这里看起来工作好像差不多可以结束的样子，还需要测试一下浏览器的兼容性，经过测试，主流浏览器都支持，但是打开IE6，结果悲催了，居然是这个样子：<br><img src="imgs/1487729887192_7.png" alt=""><br>排查一下哪个地方出了问题，才发现原来IE6不支持transparent属性，之后再研究了一下，发现如果将其余三条边的属性由solid改为dotted或者dashed就可以了(原理请自行谷歌)：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*border-style:solid*/</span></div><div class="line"><span class="selector-tag">border-style</span><span class="selector-pseudo">:dotted</span> <span class="selector-tag">dotted</span> <span class="selector-tag">solid</span>;</div><div class="line"><span class="selector-tag">border-width</span><span class="selector-pseudo">:50px</span>;</div><div class="line"><span class="selector-tag">border-color</span><span class="selector-pseudo">:transparent</span> <span class="selector-tag">transparent</span> <span class="selector-id">#056f61</span>;</div></pre></td></tr></table></figure></p>
<p>下面附上完整代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">			<span class="selector-class">.tips</span>&#123;</div><div class="line">				<span class="attribute">position</span>: relative;</div><div class="line">				<span class="attribute">background-color</span>: <span class="number">#245</span>;</div><div class="line">				<span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">				<span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">				<span class="attribute">display</span>: inline-block;</div><div class="line">				<span class="attribute">border-radius</span>: <span class="number">10px</span>;</div><div class="line">				<span class="attribute">margin-top</span>: <span class="number">100px</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="selector-class">.tips</span><span class="selector-pseudo">:after</span>&#123;</div><div class="line">				<span class="attribute">position</span>: absolute;</div><div class="line">				<span class="attribute">border-width</span>: <span class="number">20px</span>;</div><div class="line">				<span class="attribute">border-color</span>: transparent transparent <span class="number">#245</span>;</div><div class="line">				<span class="attribute">bottom</span>: <span class="number">100px</span>;</div><div class="line">				<span class="attribute">right</span>: <span class="number">30px</span>;</div><div class="line">				<span class="attribute">content</span>: <span class="string">""</span>;</div><div class="line">				<span class="attribute">height</span>: <span class="number">0</span>;</div><div class="line">				<span class="attribute">width</span>: <span class="number">0</span>;</div><div class="line">				<span class="attribute">border-style</span>:dotted dotted solid;</div><div class="line">			&#125; </div><div class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"tips"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>效果如下所示：<br><img src="imgs/1487732263707_8.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍使用CSS3制作实用消息提示框。&lt;/p&gt;
&lt;p&gt;三角提示框，就是下面所示：&lt;br&gt;&lt;img src=&quot;imgs/1487729518342_2.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;我们来研究下如何用CSS实现。&lt;br&gt;假定有一个盒子(div)，给定宽高分别为100像
    
    </summary>
    
      <category term="CSS" scheme="http://heji.website/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://heji.website/tags/CSS/"/>
    
      <category term="CSS3" scheme="http://heji.website/tags/CSS3/"/>
    
      <category term="web前端" scheme="http://heji.website/tags/web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
